from _typeshed import Incomplete
from typing import ClassVar, Iterable, Iterator, overload

class Account:
    default: bool
    def __init__(self) -> None: ...
    def create(self, cfg: AccountConfig, make_default: bool = ...) -> None: ...
    @staticmethod
    def lookup(acc_id: int) -> Account: ...
    def modify(self, cfg: AccountConfig) -> None: ...
    def onIncomingCall(self, prm: OnIncomingCallParam) -> None: ...
    def onRegStarted(self, prm: OnRegStartedParam) -> None: ...
    def onRegState(self, prm: OnRegStateParam) -> None: ...
    def setRegistration(self, renew: bool) -> None: ...
    def setTransport(self, tp_id: int) -> None: ...
    def shutdown(self) -> None: ...
    @property
    def id(self) -> int: ...
    @property
    def info(self) -> AccountInfo: ...
    @property
    def valid(self) -> bool: ...

class AccountConfig:
    idUri: str
    priority: int
    def __init__(self) -> None: ...
    @property
    def regConfig(self) -> AccountRegConfig: ...
    @property
    def sipConfig(self) -> AccountSipConfig: ...

class AccountInfo:
    id: int
    isDefault: bool
    onlineStatus: bool
    onlineStatusText: str
    regExpiresSec: int
    regIsActive: bool
    regIsConfigured: bool
    regLastErr: int
    regStatus: StatusCode
    regStatusText: str
    uri: str
    def __init__(self) -> None: ...

class AccountRegConfig(PersistentObject):
    contactParams: str
    contactUriParams: str
    delayBeforeRefreshSec: int
    dropCallsOnFail: bool
    firstRetryIntervalSec: int
    proxyUse: int
    randomRetryIntervalSec: int
    registerOnAdd: bool
    registrarUri: str
    retryIntervalSec: int
    timeoutSec: int
    unregWaitMsec: int
    def __init__(self) -> None: ...

class AccountSipConfig(PersistentObject):
    authCreds: AuthCredInfoVector
    authInitialAlgorithm: str
    authInitialEmpty: bool
    contactForced: str
    contactParams: str
    contactUriParams: str
    ipv6Use: Ipv6Use
    proxies: StringVector
    transportId: int
    def __init__(self) -> None: ...

class AudDevCap:
    __members__: ClassVar[dict] = ...  # read-only
    CNG: ClassVar[AudDevCap] = ...
    EC: ClassVar[AudDevCap] = ...
    EC_TAIL: ClassVar[AudDevCap] = ...
    EXT_FORMAT: ClassVar[AudDevCap] = ...
    INPUT_LATENCY: ClassVar[AudDevCap] = ...
    INPUT_ROUTE: ClassVar[AudDevCap] = ...
    INPUT_SIGNAL_METER: ClassVar[AudDevCap] = ...
    INPUT_SOURCE: ClassVar[AudDevCap] = ...
    INPUT_VOLUME_SETTING: ClassVar[AudDevCap] = ...
    MAX: ClassVar[AudDevCap] = ...
    OUTPUT_LATENCY: ClassVar[AudDevCap] = ...
    OUTPUT_ROUTE: ClassVar[AudDevCap] = ...
    OUTPUT_SIGNAL_METER: ClassVar[AudDevCap] = ...
    OUTPUT_VOLUME_SETTING: ClassVar[AudDevCap] = ...
    PLC: ClassVar[AudDevCap] = ...
    VAD: ClassVar[AudDevCap] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class AudDevManager:
    captureDev: int
    cng: bool
    inputLatency: int
    inputRoute: MediaAudioDevRoute
    inputVolume: int
    outputLatency: int
    outputRoute: MediaAudioDevRoute
    outputVolume: int
    playbackDev: int
    plc: bool
    vad: bool
    def __init__(self, *args, **kwargs) -> None: ...
    def capName(self, cap: AudDevCap) -> str: ...
    def getDevInfo(self, id: int) -> AudioDevInfo: ...
    def lookupDev(self, drv_name: str, dev_name: str) -> int: ...
    def refreshDevs(self) -> None: ...
    def setNullDev(self) -> None: ...
    @property
    def captureDevMedia(self) -> AudioMedia: ...
    @property
    def devCount(self) -> int: ...
    @property
    def enumDev2(self) -> AudioDevInfoVector2: ...
    @property
    def inputSignal(self) -> int: ...
    @property
    def outputSignal(self) -> int: ...
    @property
    def playbackDevMedia(self) -> AudioMedia: ...
    @property
    def sndIsActive(self) -> bool: ...

class AudioDevInfo:
    caps: int
    defaultSamplesPerSec: int
    driver: str
    id: int
    inputCount: int
    name: str
    outputCount: int
    routes: int
    def __init__(self, *args, **kwargs) -> None: ...

class AudioDevInfoVector2:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: AudioDevInfoVector2) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: AudioDevInfo) -> None: ...
    def clear(self) -> None: ...
    @overload
    def extend(self, L: AudioDevInfoVector2) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: AudioDevInfo) -> None: ...
    @overload
    def pop(self) -> AudioDevInfo: ...
    @overload
    def pop(self, i: int) -> AudioDevInfo: ...
    def __bool__(self) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    @overload
    def __getitem__(self, s: slice) -> AudioDevInfoVector2: ...
    @overload
    def __getitem__(self, arg0: int) -> AudioDevInfo: ...
    def __iter__(self) -> Iterator[AudioDevInfo]: ...
    def __len__(self) -> int: ...
    @overload
    def __setitem__(self, arg0: int, arg1: AudioDevInfo) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: AudioDevInfoVector2) -> None: ...

class AudioMedia(Media):
    def __init__(self) -> None: ...
    def adjustRxLevel(self, level: float) -> None: ...
    def adjustTxLevel(self, level: float) -> None: ...
    @staticmethod
    def getPortInfoFromId(port_id: int) -> ConfPortInfo: ...
    def startTransmit(self, sink: AudioMedia) -> None: ...
    def startTransmit2(self, sink: AudioMedia, param) -> None: ...
    def stopTransmit(self, sink: AudioMedia) -> None: ...
    @staticmethod
    def typecastFromMedia(media: Media) -> AudioMedia: ...
    @property
    def portId(self) -> int: ...
    @property
    def portInfo(self) -> ConfPortInfo: ...
    @property
    def rxLevel(self) -> int: ...
    @property
    def txLevel(self) -> int: ...

class AudioMediaTransmitParam:
    level: float
    def __init__(self) -> None: ...

class AudioMediaVector2:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: AudioMediaVector2) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: AudioMedia) -> None: ...
    def clear(self) -> None: ...
    @overload
    def extend(self, L: AudioMediaVector2) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: AudioMedia) -> None: ...
    @overload
    def pop(self) -> AudioMedia: ...
    @overload
    def pop(self, i: int) -> AudioMedia: ...
    def __bool__(self) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    @overload
    def __getitem__(self, s: slice) -> AudioMediaVector2: ...
    @overload
    def __getitem__(self, arg0: int) -> AudioMedia: ...
    def __iter__(self) -> Iterator[AudioMedia]: ...
    def __len__(self) -> int: ...
    @overload
    def __setitem__(self, arg0: int, arg1: AudioMedia) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: AudioMediaVector2) -> None: ...

class AuthCredInfo:
    akaAmf: str
    akaK: str
    akaOp: str
    data: str
    dataType: int
    realm: str
    scheme: str
    username: str
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, scheme: str, realm: str, user_name: str, data_type: int, data: str) -> None: ...

class AuthCredInfoVector:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: AuthCredInfoVector) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: AuthCredInfo) -> None: ...
    def clear(self) -> None: ...
    @overload
    def extend(self, L: AuthCredInfoVector) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: AuthCredInfo) -> None: ...
    @overload
    def pop(self) -> AuthCredInfo: ...
    @overload
    def pop(self, i: int) -> AuthCredInfo: ...
    def __bool__(self) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    @overload
    def __getitem__(self, s: slice) -> AuthCredInfoVector: ...
    @overload
    def __getitem__(self, arg0: int) -> AuthCredInfo: ...
    def __iter__(self) -> Iterator[AuthCredInfo]: ...
    def __len__(self) -> int: ...
    @overload
    def __setitem__(self, arg0: int, arg1: AuthCredInfo) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: AuthCredInfoVector) -> None: ...

class Call:
    def __init__(self, acc: Account, call_id: int = ...) -> None: ...
    def answer(self, prm: CallOpParam) -> None: ...
    def dialDtmf(self, digits: str) -> None: ...
    def getAudioMedia(self, med_idx: int) -> AudioMedia: ...
    def getMedia(self, med_idx: int) -> Media: ...
    def hangup(self, prm: CallOpParam) -> None: ...
    @staticmethod
    def lookup(id_: int) -> Call: ...
    def makeCall(self, dst_uri: str, prm: CallOpParam) -> None: ...
    def onCallMediaState(self, prm: OnCallMediaStateParam) -> None: ...
    def onCallSdpCreated(self, prm: OnCallSdpCreatedParam) -> None: ...
    def onCallState(self, prm: OnCallStateParam) -> None: ...
    def onCallTsxState(self, prm: OnCallTsxStateParam) -> None: ...
    def onDtmfDigit(self, prm: OnDtmfDigitParam) -> None: ...
    def onDtmfEvent(self, prm: OnDtmfEventParam) -> None: ...
    def onStreamCreated(self, prm: OnStreamCreatedParam) -> None: ...
    def onStreamDestroyed(self, prm: OnStreamDestroyedParam) -> None: ...
    def onStreamPreCreate(self, prm: OnStreamPreCreateParam) -> None: ...
    def processRedirect(self, cmd: RedirectOp) -> None: ...
    def reinvite(self, prm: CallOpParam) -> None: ...
    def sendDtmf(self, param: CallSendDtmfParam) -> None: ...
    def setHold(self, prm: CallOpParam) -> None: ...
    def update(self, prm: CallOpParam) -> None: ...
    def xfer(self, dest: str, prm: CallOpParam) -> None: ...
    def xferReplaces(self, dest_call: Call, prm: CallOpParam) -> None: ...
    @property
    def active(self) -> bool: ...
    @property
    def hasMedia(self) -> bool: ...
    @property
    def id(self) -> int: ...
    @property
    def info(self) -> CallInfo: ...

class CallInfo:
    accId: int
    callIdString: str
    id: int
    lastReason: str
    lastStatusCode: StatusCode
    localContact: str
    localUri: str
    remAudioCount: int
    remOfferer: bool
    remVideoCount: int
    remoteContact: str
    remoteUri: str
    role: Role
    state: InvState
    stateText: str
    def __init__(self) -> None: ...
    @property
    def connectDuration(self) -> TimeVal: ...
    @property
    def media(self) -> CallMediaInfoVector: ...
    @property
    def provMedia(self) -> CallMediaInfoVector: ...
    @property
    def setting(self) -> CallSetting: ...
    @property
    def totalDuration(self) -> TimeVal: ...

class CallMediaInfo:
    audioConfSlot: int
    dir: MediaDir
    index: int
    status: CallMediaStatus
    type: MediaType
    def __init__(self) -> None: ...

class CallMediaInfoVector:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: CallMediaInfoVector) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: CallMediaInfo) -> None: ...
    def clear(self) -> None: ...
    @overload
    def extend(self, L: CallMediaInfoVector) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: CallMediaInfo) -> None: ...
    @overload
    def pop(self) -> CallMediaInfo: ...
    @overload
    def pop(self, i: int) -> CallMediaInfo: ...
    def __bool__(self) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    @overload
    def __getitem__(self, s: slice) -> CallMediaInfoVector: ...
    @overload
    def __getitem__(self, arg0: int) -> CallMediaInfo: ...
    def __iter__(self) -> Iterator[CallMediaInfo]: ...
    def __len__(self) -> int: ...
    @overload
    def __setitem__(self, arg0: int, arg1: CallMediaInfo) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: CallMediaInfoVector) -> None: ...

class CallMediaStatus:
    __members__: ClassVar[dict] = ...  # read-only
    ACTIVE: ClassVar[CallMediaStatus] = ...
    ERROR: ClassVar[CallMediaStatus] = ...
    LOCAL_HOLD: ClassVar[CallMediaStatus] = ...
    NONE: ClassVar[CallMediaStatus] = ...
    REMOTE_HOLD: ClassVar[CallMediaStatus] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class CallOpParam:
    options: int
    reason: str
    statusCode: StatusCode
    def __init__(self, useDefaultCallSetting: bool = ...) -> None: ...
    @property
    def opt(self) -> CallSetting: ...
    @property
    def sdp(self) -> SdpSession: ...
    @property
    def txOption(self) -> SipTxOption: ...

class CallSendDtmfParam:
    digits: str
    duration: int
    method: DtmfMethod
    def __init__(self) -> None: ...

class CallSetting:
    audioCount: int
    flag: int
    mediaDir: IntVector
    reqKeyframeMethod: int
    videoCount: int
    def __init__(self) -> None: ...

class ConfPortInfo:
    name: str
    portId: int
    rxLevelAdj: float
    txLevelAdj: float
    def __init__(self) -> None: ...
    @property
    def format(self) -> MediaFormatAudio: ...
    @property
    def listeners(self) -> IntVector: ...

class DtmfMethod:
    __members__: ClassVar[dict] = ...  # read-only
    RFC2833: ClassVar[DtmfMethod] = ...
    SIP_INFO: ClassVar[DtmfMethod] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Endpoint:
    def __init__(self) -> None: ...
    def hangupAllCalls(self) -> None: ...
    @staticmethod
    def instance() -> Endpoint: ...
    def libCreate(self) -> None: ...
    def libDestroy(self, prmFlags: int = ...) -> None: ...
    def libInit(self, prmEpConfig: EpConfig) -> None: ...
    def libStart(self) -> None: ...
    def mediaAdd(self, media: AudioMedia) -> None: ...
    def mediaExists(self, media: AudioMedia) -> bool: ...
    def mediaRemove(self, media: AudioMedia) -> None: ...
    def transportClose(self, id: int) -> None: ...
    def transportCreate(self, type_: TransportType, cfg: TransportConfig) -> int: ...
    def transportGetInfo(self, id: int) -> TransportInfo: ...
    def transportSetEnable(self, id: int, enabled: bool) -> None: ...
    @property
    def audDevManager(self) -> AudDevManager: ...
    @property
    def mediaActivePorts(self) -> int: ...
    @property
    def mediaEnumPorts2(self) -> AudioMediaVector2: ...
    @property
    def mediaMaxPorts(self) -> int: ...
    @property
    def state(self) -> State: ...
    @property
    def transportEnum(self) -> IntVector: ...
    @property
    def version(self) -> Version: ...

class EpConfig(PersistentObject):
    def __init__(self) -> None: ...
    @property
    def logConfig(self) -> LogConfig: ...
    @property
    def medConfig(self) -> MediaConfig: ...
    @property
    def uaConfig(self) -> UaConfig: ...

class EventId:
    __members__: ClassVar[dict] = ...  # read-only
    RX_MSG: ClassVar[EventId] = ...
    TIMER: ClassVar[EventId] = ...
    TRANSPORT_ERROR: ClassVar[EventId] = ...
    TSX_STATE: ClassVar[EventId] = ...
    TX_MSG: ClassVar[EventId] = ...
    UNKNOWN: ClassVar[EventId] = ...
    USER: ClassVar[EventId] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class IntVector:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: IntVector) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: IntVector) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: IntVector) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> IntVector: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: IntVector) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: IntVector) -> None: ...

class InvState:
    __members__: ClassVar[dict] = ...  # read-only
    CALLING: ClassVar[InvState] = ...
    CONFIRMED: ClassVar[InvState] = ...
    CONNECTING: ClassVar[InvState] = ...
    DISCONNECTED: ClassVar[InvState] = ...
    EARLY: ClassVar[InvState] = ...
    INCOMING: ClassVar[InvState] = ...
    NULL: ClassVar[InvState] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Ipv6Use:
    __members__: ClassVar[dict] = ...  # read-only
    DISABLED: ClassVar[Ipv6Use] = ...
    ENABLED: ClassVar[Ipv6Use] = ...
    ENABLED_NO_PREFERENCE: ClassVar[Ipv6Use] = ...
    ENABLED_PREFER_IPV4: ClassVar[Ipv6Use] = ...
    ENABLED_PREFER_IPV6: ClassVar[Ipv6Use] = ...
    ENABLED_USE_IPV6_ONLY: ClassVar[Ipv6Use] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class LogConfig(PersistentObject):
    consoleLevel: int
    decor: int
    fileFlags: int
    filename: str
    level: int
    msgLogging: int
    writer: LogWriter
    def __init__(self) -> None: ...

class LogEntry:
    level: int
    msg: str
    threadId: int
    threadName: str
    def __init__(self) -> None: ...

class LogWriter:
    def __init__(self) -> None: ...
    def write(self, entry: LogEntry) -> None: ...

class Media:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def type(self) -> MediaType: ...

class MediaAudioDevRoute:
    __members__: ClassVar[dict] = ...  # read-only
    BLUETOOTH: ClassVar[MediaAudioDevRoute] = ...
    CUSTOM: ClassVar[MediaAudioDevRoute] = ...
    DEFAULT: ClassVar[MediaAudioDevRoute] = ...
    EARPIECE: ClassVar[MediaAudioDevRoute] = ...
    LOUDSPEAKER: ClassVar[MediaAudioDevRoute] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class MediaConfig(PersistentObject):
    audioFramePtime: int
    channelCount: int
    clockRate: int
    ecOptions: int
    ecTailLen: int
    hasIoqueue: bool
    ilbcMode: int
    jbDiscardAlgo: MediaJbDiscardAlgo
    jbInit: int
    jbMax: int
    jbMaxPre: int
    jbMinPre: int
    maxMediaPorts: int
    noVad: bool
    ptime: int
    quality: int
    rxDropPct: int
    sndAutoCloseTime: int
    sndClockRate: int
    sndPlayLatency: int
    sndRecLatency: int
    threadCnt: int
    txDropPct: int
    vidPreviewEnableNative: bool
    def __init__(self) -> None: ...

class MediaDir:
    __members__: ClassVar[dict] = ...  # read-only
    CAPTURE: ClassVar[MediaDir] = ...
    CAPTURE_PLAYBACK: ClassVar[MediaDir] = ...
    CAPTURE_RENDER: ClassVar[MediaDir] = ...
    DECODING: ClassVar[MediaDir] = ...
    ENCODING: ClassVar[MediaDir] = ...
    ENCODING_DECODING: ClassVar[MediaDir] = ...
    NONE: ClassVar[MediaDir] = ...
    PLAYBACK: ClassVar[MediaDir] = ...
    RENDER: ClassVar[MediaDir] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class MediaFormatAudio:
    avgBps: int
    bitsPerSample: int
    channelCount: int
    clockRate: int
    frameTimeUsec: int
    maxBps: int
    def __init__(self) -> None: ...

class MediaJbDiscardAlgo:
    __members__: ClassVar[dict] = ...  # read-only
    NONE: ClassVar[MediaJbDiscardAlgo] = ...
    PROGRESSIVE: ClassVar[MediaJbDiscardAlgo] = ...
    STATIC: ClassVar[MediaJbDiscardAlgo] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class MediaType:
    __members__: ClassVar[dict] = ...  # read-only
    APPLICATION: ClassVar[MediaType] = ...
    AUDIO: ClassVar[MediaType] = ...
    NONE: ClassVar[MediaType] = ...
    UNKNOWN: ClassVar[MediaType] = ...
    VIDEO: ClassVar[MediaType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class OnCallMediaStateParam:
    def __init__(self) -> None: ...

class OnCallReplaceRequestParam:
    newCall: Incomplete
    opt: CallSetting
    rdata: SipRxData
    reason: str
    statusCode: StatusCode
    def __init__(self) -> None: ...

class OnCallReplacedParam:
    newCall: Incomplete
    newCallId: int
    def __init__(self) -> None: ...

class OnCallRxOfferParam:
    offer: SdpSession
    opt: CallSetting
    statusCode: StatusCode
    def __init__(self) -> None: ...

class OnCallSdpCreatedParam:
    def __init__(self) -> None: ...
    @property
    def remSdp(self) -> SdpSession: ...
    @property
    def sdp(self) -> SdpSession: ...

class OnCallStateParam:
    def __init__(self) -> None: ...
    @property
    def e(self) -> SipEvent: ...

class OnCallTransferStatusParam:
    cont: bool
    finalNotify: bool
    reason: str
    statusCode: StatusCode
    def __init__(self) -> None: ...

class OnCallTsxStateParam:
    def __init__(self) -> None: ...
    @property
    def e(self) -> SipEvent: ...

class OnDtmfDigitParam:
    digit: str
    duration: int
    method: DtmfMethod
    def __init__(self) -> None: ...

class OnDtmfEventParam:
    digit: str
    duration: int
    flags: int
    method: DtmfMethod
    timestamp: int
    def __init__(self) -> None: ...

class OnIncomingCallParam:
    callId: int
    def __init__(self) -> None: ...
    @property
    def rdata(self) -> SipRxData: ...

class OnRegStartedParam:
    renew: bool
    def __init__(self) -> None: ...

class OnRegStateParam:
    code: StatusCode
    expiration: int
    reason: str
    status: int
    def __init__(self) -> None: ...
    @property
    def rdata(self) -> SipRxData: ...

class OnStreamCreatedParam:
    destroyPort: bool
    streamIdx: int
    def __init__(self) -> None: ...

class OnStreamDestroyedParam:
    streamIdx: int
    def __init__(self) -> None: ...

class OnStreamPreCreateParam:
    streamIdx: int
    def __init__(self) -> None: ...
    @property
    def streamInfo(self) -> StreamInfo: ...

class PersistentObject:
    def __init__(self) -> None: ...

class RedirectOp:
    __members__: ClassVar[dict] = ...  # read-only
    ACCEPT: ClassVar[RedirectOp] = ...
    ACCEPT_REPLACE: ClassVar[RedirectOp] = ...
    PENDING: ClassVar[RedirectOp] = ...
    REJECT: ClassVar[RedirectOp] = ...
    STOP: ClassVar[RedirectOp] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Role:
    __members__: ClassVar[dict] = ...  # read-only
    UAC: ClassVar[Role] = ...
    UAS: ClassVar[Role] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class RxMsgEvent:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def rdata(self) -> SipRxData: ...

class SdpSession:
    wholeSdp: str
    def __init__(self) -> None: ...

class SipEvent:
    body: SipEventBody
    type: EventId
    def __init__(self) -> None: ...

class SipEventBody:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def rxMsg(self) -> RxMsgEvent: ...
    @property
    def timer(self) -> TimerEvent: ...
    @property
    def tsxState(self) -> TsxStateEvent: ...
    @property
    def txError(self) -> TxErrorEvent: ...
    @property
    def txMsg(self) -> TxMsgEvent: ...
    @property
    def user(self) -> UserEvent: ...

class SipHeader:
    hName: str
    hValue: str
    def __init__(self) -> None: ...

class SipHeaderVector:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: SipHeaderVector) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: SipHeader) -> None: ...
    def clear(self) -> None: ...
    @overload
    def extend(self, L: SipHeaderVector) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: SipHeader) -> None: ...
    @overload
    def pop(self) -> SipHeader: ...
    @overload
    def pop(self, i: int) -> SipHeader: ...
    def __bool__(self) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    @overload
    def __getitem__(self, s: slice) -> SipHeaderVector: ...
    @overload
    def __getitem__(self, arg0: int) -> SipHeader: ...
    def __iter__(self) -> Iterator[SipHeader]: ...
    def __len__(self) -> int: ...
    @overload
    def __setitem__(self, arg0: int, arg1: SipHeader) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: SipHeaderVector) -> None: ...

class SipRxData:
    info: str
    srcAddress: str
    wholeMsg: str
    def __init__(self) -> None: ...

class SipTransaction:
    method: str
    role: Role
    state: TsxState
    statusCode: int
    statusText: str
    def __init__(self) -> None: ...
    @property
    def lastTx(self) -> SipTxData: ...

class SipTxData:
    dstAddress: str
    info: str
    wholeMsg: str
    def __init__(self) -> None: ...

class SipTxOption:
    contentType: str
    localUri: str
    msgBody: str
    targetUri: str
    def __init__(self) -> None: ...
    @property
    def empty(self) -> bool: ...
    @property
    def headers(self) -> SipHeaderVector: ...

class State:
    __members__: ClassVar[dict] = ...  # read-only
    CLOSING: ClassVar[State] = ...
    CREATED: ClassVar[State] = ...
    INIT: ClassVar[State] = ...
    NULL: ClassVar[State] = ...
    RUNNING: ClassVar[State] = ...
    STARTING: ClassVar[State] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class StatusCode:
    __members__: ClassVar[dict] = ...  # read-only
    ACCEPTED: ClassVar[StatusCode] = ...
    ADDRESS_INCOMPLETE: ClassVar[StatusCode] = ...
    ALTERNATIVE_SERVICE: ClassVar[StatusCode] = ...
    AMBIGUOUS: ClassVar[StatusCode] = ...
    ANONIMITY_DISALLOWED: ClassVar[StatusCode] = ...
    BAD_EVENT: ClassVar[StatusCode] = ...
    BAD_EXTENSION: ClassVar[StatusCode] = ...
    BAD_GATEWAY: ClassVar[StatusCode] = ...
    BAD_IDENTITY_INFO: ClassVar[StatusCode] = ...
    BAD_INFO_PACKAGE: ClassVar[StatusCode] = ...
    BAD_LOCATION_INFORMATION: ClassVar[StatusCode] = ...
    BAD_REQUEST: ClassVar[StatusCode] = ...
    BUSY_EVERYWHERE: ClassVar[StatusCode] = ...
    BUSY_HERE: ClassVar[StatusCode] = ...
    CALL_BEING_FORWARDED: ClassVar[StatusCode] = ...
    CALL_TSX_DOES_NOT_EXIST: ClassVar[StatusCode] = ...
    CONDITIONAL_REQUEST_FAILED: ClassVar[StatusCode] = ...
    CONFLICT: ClassVar[StatusCode] = ...
    CONSENT_NEEDED: ClassVar[StatusCode] = ...
    DECLINE: ClassVar[StatusCode] = ...
    DOES_NOT_EXIST_ANYWHERE: ClassVar[StatusCode] = ...
    EARLY_DIALOG_TERMINATED: ClassVar[StatusCode] = ...
    EXTENSION_REQUIRED: ClassVar[StatusCode] = ...
    FIRST_HOP_LACKS_OUTBOUND_SUPPORT: ClassVar[StatusCode] = ...
    FLOW_FAILED: ClassVar[StatusCode] = ...
    FORBIDDEN: ClassVar[StatusCode] = ...
    GONE: ClassVar[StatusCode] = ...
    INTERNAL_SERVER_ERROR: ClassVar[StatusCode] = ...
    INTERVAL_TOO_BRIEF: ClassVar[StatusCode] = ...
    INVALID_IDENTITY_HEADER: ClassVar[StatusCode] = ...
    LENGTH_REQUIRED: ClassVar[StatusCode] = ...
    LOOP_DETECTED: ClassVar[StatusCode] = ...
    MAX_BREADTH_EXCEEDED: ClassVar[StatusCode] = ...
    MESSAGE_TOO_LARGE: ClassVar[StatusCode] = ...
    METHOD_NOT_ALLOWED: ClassVar[StatusCode] = ...
    MOVED_PERMANENTLY: ClassVar[StatusCode] = ...
    MOVED_TEMPORARILY: ClassVar[StatusCode] = ...
    MULTIPLE_CHOICES: ClassVar[StatusCode] = ...
    NOT_ACCEPTABLE: ClassVar[StatusCode] = ...
    NOT_ACCEPTABLE_ANYWHERE: ClassVar[StatusCode] = ...
    NOT_ACCEPTABLE_HERE: ClassVar[StatusCode] = ...
    NOT_FOUND: ClassVar[StatusCode] = ...
    NOT_IMPLEMENTED: ClassVar[StatusCode] = ...
    NO_NOTIFICATION: ClassVar[StatusCode] = ...
    NULL: ClassVar[StatusCode] = ...
    OK: ClassVar[StatusCode] = ...
    PAYMENT_REQUIRED: ClassVar[StatusCode] = ...
    PRECONDITION_FAILURE: ClassVar[StatusCode] = ...
    PROGRESS: ClassVar[StatusCode] = ...
    PROVIDE_REFERRER_HEADER: ClassVar[StatusCode] = ...
    PROXY_AUTHENTICATION_REQUIRED: ClassVar[StatusCode] = ...
    PUSH_NOTIFICATION_SERVICE_NOT_SUPPORTED: ClassVar[StatusCode] = ...
    QUEUED: ClassVar[StatusCode] = ...
    REJECTED: ClassVar[StatusCode] = ...
    REQUEST_ENTITY_TOO_LARGE: ClassVar[StatusCode] = ...
    REQUEST_PENDING: ClassVar[StatusCode] = ...
    REQUEST_TERMINATED: ClassVar[StatusCode] = ...
    REQUEST_TIMEOUT: ClassVar[StatusCode] = ...
    REQUEST_UPDATED: ClassVar[StatusCode] = ...
    REQUEST_URI_TOO_LONG: ClassVar[StatusCode] = ...
    RINGING: ClassVar[StatusCode] = ...
    SECURITY_AGREEMENT_NEEDED: ClassVar[StatusCode] = ...
    SERVER_TIMEOUT: ClassVar[StatusCode] = ...
    SERVICE_UNAVAILABLE: ClassVar[StatusCode] = ...
    SESSION_TIMER_TOO_SMALL: ClassVar[StatusCode] = ...
    TEMPORARILY_UNAVAILABLE: ClassVar[StatusCode] = ...
    TOO_MANY_HOPS: ClassVar[StatusCode] = ...
    TRYING: ClassVar[StatusCode] = ...
    TSX_TIMEOUT: ClassVar[StatusCode] = ...
    TSX_TRANSPORT_ERROR: ClassVar[StatusCode] = ...
    UNAUTHORIZED: ClassVar[StatusCode] = ...
    UNDECIPHERABLE: ClassVar[StatusCode] = ...
    UNKNOWN_RESOURCE_PRIORITY: ClassVar[StatusCode] = ...
    UNSUPPORTED_CERTIFICATE: ClassVar[StatusCode] = ...
    UNSUPPORTED_MEDIA_TYPE: ClassVar[StatusCode] = ...
    UNSUPPORTED_URI_SCHEME: ClassVar[StatusCode] = ...
    UNWANTED: ClassVar[StatusCode] = ...
    USE_IDENTITY_HEADER: ClassVar[StatusCode] = ...
    USE_PROXY: ClassVar[StatusCode] = ...
    VERSION_NOT_SUPPORTED: ClassVar[StatusCode] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class StreamInfo:
    type: MediaType
    def __init__(self) -> None: ...

class StringVector:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: StringVector) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: str) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: str) -> int: ...
    @overload
    def extend(self, L: StringVector) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: str) -> None: ...
    @overload
    def pop(self) -> str: ...
    @overload
    def pop(self, i: int) -> str: ...
    def remove(self, x: str) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: str) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: StringVector) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> StringVector: ...
    @overload
    def __getitem__(self, arg0: int) -> str: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: StringVector) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: str) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: StringVector) -> None: ...

class TimeVal:
    msec: int
    sec: int
    def __init__(self) -> None: ...

class TimerEvent:
    def __init__(self, *args, **kwargs) -> None: ...

class TransportConfig(PersistentObject):
    boundAddress: str
    port: int
    portRange: int
    publicAddress: str
    randomizePort: bool
    def __init__(self) -> None: ...

class TransportInfo:
    flags: int
    id: int
    info: str
    localAddress: str
    localName: str
    type: TransportType
    typeName: str
    usageCount: int
    def __init__(self, *args, **kwargs) -> None: ...

class TransportType:
    __members__: ClassVar[dict] = ...  # read-only
    DGRAM: ClassVar[TransportType] = ...
    DTLS: ClassVar[TransportType] = ...
    DTLS6: ClassVar[TransportType] = ...
    IPV6: ClassVar[TransportType] = ...
    LOOP: ClassVar[TransportType] = ...
    SCTP: ClassVar[TransportType] = ...
    TCP: ClassVar[TransportType] = ...
    TCP6: ClassVar[TransportType] = ...
    TLS: ClassVar[TransportType] = ...
    TLS6: ClassVar[TransportType] = ...
    UDP: ClassVar[TransportType] = ...
    UDP6: ClassVar[TransportType] = ...
    UNSPECIFIED: ClassVar[TransportType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class TsxState:
    __members__: ClassVar[dict] = ...  # read-only
    CALLING: ClassVar[TsxState] = ...
    COMPLETED: ClassVar[TsxState] = ...
    CONFIRMED: ClassVar[TsxState] = ...
    DESTROYED: ClassVar[TsxState] = ...
    MAX: ClassVar[TsxState] = ...
    NULL: ClassVar[TsxState] = ...
    PROCEEDING: ClassVar[TsxState] = ...
    TERMINATED: ClassVar[TsxState] = ...
    TRYING: ClassVar[TsxState] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class TsxStateEvent:
    def __init__(self) -> None: ...
    @property
    def prevState(self) -> TsxState: ...
    @property
    def src(self) -> TsxStateEventSrc: ...
    @property
    def tsx(self) -> SipTransaction: ...
    @property
    def type(self) -> EventId: ...

class TsxStateEventSrc:
    def __init__(self) -> None: ...
    @property
    def rdata(self) -> SipRxData: ...
    @property
    def status(self) -> int: ...
    @property
    def tdata(self) -> SipTxData: ...

class TxErrorEvent:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def tdata(self) -> SipTxData: ...
    @property
    def tsx(self) -> SipTransaction: ...

class TxMsgEvent:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def tdata(self) -> SipTxData: ...

class UaConfig(PersistentObject):
    mainThreadOnly: bool
    maxCalls: int
    nameserver: StringVector
    threadCnt: int
    def __init__(self) -> None: ...

class UserEvent:
    def __init__(self, *args, **kwargs) -> None: ...

class Version:
    full: str
    major: int
    numeric: int
    rev: int
    suffix: str
    def __init__(self, *args, **kwargs) -> None: ...

class onCallTransferRequestParam:
    dstUri: str
    newCall: Incomplete
    opt: CallSetting
    statusCode: StatusCode
    def __init__(self) -> None: ...

class onCallTxOfferParam:
    opt: CallSetting
    def __init__(self) -> None: ...
