name: Python

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'py-archive-to-parquet-*'
  pull_request:
  workflow_dispatch:

jobs:
  build-python:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
#          # Musl
#          - image: ghcr.io/rust-cross/musllinux_1_2-cross:x86_64
#            target: x86_64-unknown-linux-musl
#            runner: ubuntu-latest
#            compat: "musllinux_1_2"
#          - image: ghcr.io/rust-cross/musllinux_1_2-cross:aarch64
#            target: aarch64-unknown-linux-musl
#            runner: ubuntu-latest
#            compat: "musllinux_1_2"

          # GNU
          - image: ghcr.io/rust-cross/manylinux_2_28-cross:x86_64
            target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
            compat: "manylinux_2_28"
          - image: ghcr.io/rust-cross/manylinux_2_28-cross:aarch64
            target: aarch64-unknown-linux-gnu
            runner: ubuntu-latest
            compat: "manylinux_2_28"

          # MacOS
          - image: null
            target: aarch64-apple-darwin
            runner: macos-14
            compat: ""
          - image: null
            target: x86_64-apple-darwin
            runner: macos-14
            compat: ""
    container:
      image: ${{ matrix.image }}
    steps:
      - uses: actions/checkout@v4
      - run: apt install -y zstd
        if: runner.os == 'Linux'
      - uses: jdx/mise-action@v2
        with:
          install: "true"
          cache: "true"
          cache_key_prefix: 'python-mise-v0'
          mise_toml: |
            [tools]
            zig = "latest"
            uv = "latest"
            "pipx:maturin" = "latest"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        id: rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: 'false'
          cache-on-failure: false
          target: ${{ matrix.target }}

      - name: Setup Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: false
          prefix-key: python-${{ matrix.target }}
          key: ${{ steps.rust.outputs.cachekey }}

      - run: mise --version
      - run: mise x -- maturin list-python

      - name: Build dev
        run: mise run build-python --target=${{matrix.target}} --compat=${{ matrix.compat || 'linux' }} --profile=dev
        if: ${{ !(startsWith(github.ref, 'refs/tags/py-archive-to-parquet-') || github.event_name == 'workflow_dispatch') }}
        shell: bash

      - name: Build release
        run: mise run build-python --target=${{matrix.target}} --compat=${{ matrix.compat || 'linux' }} --profile=release
        if: ${{ startsWith(github.ref, 'refs/tags/py-archive-to-parquet-') || github.event_name == 'workflow_dispatch' }}
        shell: bash

      - run: mise run build-python --target=${{matrix.target}} --compat=${{ matrix.compat || 'linux' }} --sdist
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        shell: bash

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.target }}
          path: target/wheels/
          if-no-files-found: error
          retention-days: 1

  test-python:
    runs-on: ${{ matrix.runner }}
    needs: [ build-python ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-latest
          - target: ''
            runner: macos-13
          - target: ''
            runner: macos-14
    steps:
      - uses: actions/checkout@v4

      # Download all artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: 'target/wheels/'

      - name: List wheels
        run: ls -la target/wheels/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: runner.os == 'Linux'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: runner.os == 'Linux'

      - name: Run Docker Debian tests
        if: runner.os == 'Linux'
        run: |
          set -e
          docker run --rm --platform=${{ matrix.platform }} -v${{ github.workspace }}/:/workspace/ \
            --workdir=/workspace/ python:3.11 \
            bash -c "apt-get update && apt-get install -y zstd && ./.github/setup-project-tests && ./.github/run-python-package-tests"

#      - name: Run Docker Alpine tests
#        if: runner.os == 'Linux'
#        run: |
#          set -e
#          docker run --rm --platform=${{ matrix.platform }} -v${{ github.workspace }}/:/workspace/ \
#            --workdir=/workspace/ alpine:latest \
#            sh -c "apk add python3 python3-dev uv bash zstd gcc curl musl-dev && ./.github/setup-project-tests && ./.github/run-basic-python-tests"

      - name: Run tests
        if: runner.os != 'Linux'
        run: ./.github/setup-project-tests && ./.github/run-python-package-tests

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/py-archive-to-parquet-') || github.event_name == 'workflow_dispatch' }}
    needs: [ test-python ]
    environment: pypi
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: 'target/wheels/'
      - name: Check artifacts
        run: ls -la target/wheels/
      - name: Generate artifact attestation
        if: ${{ startsWith(github.ref, 'refs/tags/py-archive-to-parquet-') }}
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'target/wheels/*'
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/py-archive-to-parquet-') }}
        uses: PyO3/maturin-action@v1
        #        env:
        #          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing target/wheels/*
