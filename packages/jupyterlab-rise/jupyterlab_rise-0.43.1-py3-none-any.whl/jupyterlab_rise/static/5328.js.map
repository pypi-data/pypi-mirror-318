{"version":3,"file":"5328.bundle.js","mappings":"0KA0BA,MAAMA,EAMF,WAAAC,CAAYC,GACRC,KAAKC,KAAOC,EAAQC,UACpBH,KAAKI,KAAOL,EAAQK,KACpBJ,KAAKK,QAAUN,EAAQO,OACvBN,KAAKO,QAAUR,EAAQS,QAAU,KACjCR,KAAKS,SAAWV,EAAQW,SAAW,KACnCV,KAAKW,SAAWZ,EAAQa,SAAW,IACvC,CAYA,GAAAC,CAAIC,GACA,IAAIC,EACAC,EAAMd,EAAQe,UAAUH,GAO5B,OALIC,EADAf,KAAKC,QAAQe,EACLA,EAAIhB,KAAKC,MAGTe,EAAIhB,KAAKC,MAAQD,KAAKkB,aAAaJ,GAExCC,CACX,CAYA,GAAAI,CAAIL,EAAOC,GACP,IAAIK,EACAJ,EAAMd,EAAQe,UAAUH,GAExBM,EADApB,KAAKC,QAAQe,EACFA,EAAIhB,KAAKC,MAGTe,EAAIhB,KAAKC,MAAQD,KAAKkB,aAAaJ,GAElD,IAAIO,EAAWrB,KAAKsB,aAAaR,EAAOC,GACxCf,KAAKuB,aAAaT,EAAOM,EAAWJ,EAAIhB,KAAKC,MAAQoB,EACzD,CAUA,MAAAb,CAAOM,GACH,IAAIM,EACAJ,EAAMd,EAAQe,UAAUH,GAExBM,EADApB,KAAKC,QAAQe,EACFA,EAAIhB,KAAKC,MAGTe,EAAIhB,KAAKC,MAAQD,KAAKkB,aAAaJ,GAElD,IAAIO,EAAWrB,KAAKsB,aAAaR,EAAOM,GACxCpB,KAAKuB,aAAaT,EAAOM,EAAWJ,EAAIhB,KAAKC,MAAQoB,EACzD,CAIA,YAAAH,CAAaJ,GAET,OAAOR,EADMN,KAAKK,SACJS,EAClB,CAIA,YAAAQ,CAAaR,EAAOC,GAChB,IAAIP,EAASR,KAAKO,QAClB,OAAOC,EAASA,EAAOM,EAAOC,GAASA,CAC3C,CAIA,aAAAS,CAAcJ,EAAUC,GACpB,IAAIX,EAAUV,KAAKS,SACnB,OAAOC,EAAUA,EAAQU,EAAUC,GAAYD,IAAaC,CAChE,CAIA,YAAAE,CAAaT,EAAOM,EAAUC,GAC1B,IAAIT,EAAUZ,KAAKW,SACfC,IAAYZ,KAAKwB,cAAcJ,EAAUC,IACzCT,EAAQE,EAAOM,EAAUC,EAEjC,EAuBJ,IAAInB,GAlBJ,SAAWL,GAaPA,EAAiB4B,UAHjB,SAAmBX,GACfZ,EAAQwB,UAAUC,OAAOb,EAC7B,CAEH,CAdD,CAcGjB,IAAqBA,EAAmB,CAAC,IAK5C,SAAWK,GAIPA,EAAQwB,UAAY,IAAIE,QAIxB1B,EAAQC,QAAU,MACd,IAAI0B,EAAK,EACT,MAAO,IAGI,OADI,GADAC,KAAKC,WACKC,MAAM,MACLH,KAE7B,EAPiB,GAsBlB3B,EAAQe,UATR,SAAmBH,GACf,IAAIE,EAAMd,EAAQwB,UAAUb,IAAIC,GAChC,OAAIE,IAGJA,EAAMiB,OAAO3B,OAAO,MACpBJ,EAAQwB,UAAUP,IAAIL,EAAOE,GACtBA,EACX,CAEH,CA/BD,CA+BGd,IAAYA,EAAU,CAAC,G","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lumino/properties/dist/index.es6.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module properties\n */\n/**\n * A class which attaches a value to an external object.\n *\n * #### Notes\n * Attached properties are used to extend the state of an object with\n * semantic data from an unrelated class. They also encapsulate value\n * creation, coercion, and notification.\n *\n * Because attached property values are stored in a hash table, which\n * in turn is stored in a WeakMap keyed on the owner object, there is\n * non-trivial storage overhead involved in their use. The pattern is\n * therefore best used for the storage of rare data.\n */\nclass AttachedProperty {\n    /**\n     * Construct a new attached property.\n     *\n     * @param options - The options for initializing the property.\n     */\n    constructor(options) {\n        this._pid = Private.nextPID();\n        this.name = options.name;\n        this._create = options.create;\n        this._coerce = options.coerce || null;\n        this._compare = options.compare || null;\n        this._changed = options.changed || null;\n    }\n    /**\n     * Get the current value of the property for a given owner.\n     *\n     * @param owner - The property owner of interest.\n     *\n     * @returns The current value of the property.\n     *\n     * #### Notes\n     * If the value has not yet been set, the default value will be\n     * computed and assigned as the current value of the property.\n     */\n    get(owner) {\n        let value;\n        let map = Private.ensureMap(owner);\n        if (this._pid in map) {\n            value = map[this._pid];\n        }\n        else {\n            value = map[this._pid] = this._createValue(owner);\n        }\n        return value;\n    }\n    /**\n     * Set the current value of the property for a given owner.\n     *\n     * @param owner - The property owner of interest.\n     *\n     * @param value - The value for the property.\n     *\n     * #### Notes\n     * If the value has not yet been set, the default value will be\n     * computed and used as the previous value for the comparison.\n     */\n    set(owner, value) {\n        let oldValue;\n        let map = Private.ensureMap(owner);\n        if (this._pid in map) {\n            oldValue = map[this._pid];\n        }\n        else {\n            oldValue = map[this._pid] = this._createValue(owner);\n        }\n        let newValue = this._coerceValue(owner, value);\n        this._maybeNotify(owner, oldValue, (map[this._pid] = newValue));\n    }\n    /**\n     * Explicitly coerce the current property value for a given owner.\n     *\n     * @param owner - The property owner of interest.\n     *\n     * #### Notes\n     * If the value has not yet been set, the default value will be\n     * computed and used as the previous value for the comparison.\n     */\n    coerce(owner) {\n        let oldValue;\n        let map = Private.ensureMap(owner);\n        if (this._pid in map) {\n            oldValue = map[this._pid];\n        }\n        else {\n            oldValue = map[this._pid] = this._createValue(owner);\n        }\n        let newValue = this._coerceValue(owner, oldValue);\n        this._maybeNotify(owner, oldValue, (map[this._pid] = newValue));\n    }\n    /**\n     * Get or create the default value for the given owner.\n     */\n    _createValue(owner) {\n        let create = this._create;\n        return create(owner);\n    }\n    /**\n     * Coerce the value for the given owner.\n     */\n    _coerceValue(owner, value) {\n        let coerce = this._coerce;\n        return coerce ? coerce(owner, value) : value;\n    }\n    /**\n     * Compare the old value and new value for equality.\n     */\n    _compareValue(oldValue, newValue) {\n        let compare = this._compare;\n        return compare ? compare(oldValue, newValue) : oldValue === newValue;\n    }\n    /**\n     * Run the change notification if the given values are different.\n     */\n    _maybeNotify(owner, oldValue, newValue) {\n        let changed = this._changed;\n        if (changed && !this._compareValue(oldValue, newValue)) {\n            changed(owner, oldValue, newValue);\n        }\n    }\n}\n/**\n * The namespace for the `AttachedProperty` class statics.\n */\n(function (AttachedProperty) {\n    /**\n     * Clear the stored property data for the given owner.\n     *\n     * @param owner - The property owner of interest.\n     *\n     * #### Notes\n     * This will clear all property values for the owner, but it will\n     * **not** run the change notification for any of the properties.\n     */\n    function clearData(owner) {\n        Private.ownerData.delete(owner);\n    }\n    AttachedProperty.clearData = clearData;\n})(AttachedProperty || (AttachedProperty = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A weak mapping of property owner to property map.\n     */\n    Private.ownerData = new WeakMap();\n    /**\n     * A function which computes successive unique property ids.\n     */\n    Private.nextPID = (() => {\n        let id = 0;\n        return () => {\n            let rand = Math.random();\n            let stem = `${rand}`.slice(2);\n            return `pid-${stem}-${id++}`;\n        };\n    })();\n    /**\n     * Lookup the data map for the property owner.\n     *\n     * This will create the map if one does not already exist.\n     */\n    function ensureMap(owner) {\n        let map = Private.ownerData.get(owner);\n        if (map) {\n            return map;\n        }\n        map = Object.create(null);\n        Private.ownerData.set(owner, map);\n        return map;\n    }\n    Private.ensureMap = ensureMap;\n})(Private || (Private = {}));\n\nexport { AttachedProperty };\n//# sourceMappingURL=index.es6.js.map\n"],"names":["AttachedProperty","constructor","options","this","_pid","Private","nextPID","name","_create","create","_coerce","coerce","_compare","compare","_changed","changed","get","owner","value","map","ensureMap","_createValue","set","oldValue","newValue","_coerceValue","_maybeNotify","_compareValue","clearData","ownerData","delete","WeakMap","id","Math","random","slice","Object"],"sourceRoot":""}