{"version":3,"file":"6116.bundle.js","mappings":"qKAYIA,E,6CACJ,SAAWA,GACPA,EAAWC,WAAa,8BAC3B,CAFD,CAEGD,IAAeA,EAAa,CAAC,IAIhC,MAiBA,EAjBe,CACXE,GAAI,0CACJC,YAAa,qCACbC,SAAU,CACN,EAAAC,iBACA,EAAAC,iBACA,EAAAC,WACA,EAAAC,gBACA,EAAAC,aAEJC,SAAU,EAAAC,oBACVC,SAWJ,SAAkBC,EAAKC,EAAYC,EAAiBC,EAAWC,EAAgBC,GAC3E,MAAMC,GAASD,QAA+CA,EAAa,EAAAE,gBAAgBC,KAAK,cAoChG,OAnCIP,GACAD,EAAIS,SAASC,WAAWvB,EAAWC,WAAY,CAC3CuB,MAAOL,EAAMM,GAAG,qBAChBC,QAASC,IACL,MAAMC,EAAOD,EAAW,KAClBzB,EAAKyB,EAAS,GACdE,EAAQF,EAAY,OAAK,SAC/B,GAAKC,EAGL,MAAc,WAAVC,EAGKhB,EAAIS,SAASQ,WAAWC,GAItBlB,EAAIS,SAASI,QAAQK,EAAsB,CAAEH,cAHhDI,QAAQC,KAAK,oEAMdnB,EAAWoB,SAASC,SACtBC,IAAIR,EAAM,CAAES,SAAS,IACrBC,MAAK,KAGN,MAAMC,EAAUzB,EAAW0B,SAASC,6BAA6Bb,GAC3Dc,EAAS5B,EAAW6B,aAAaf,EAAMW,EAAQK,MAEjDF,GAAUxC,GACVwC,EAAOG,YAAY3C,EACvB,GACF,IAIP,IAAI,EAAA4C,mBAAmB,CAC1BC,iBAAkB,EAAAC,0BAClBC,YAAcnC,EAER,CACEb,WAAY,CAACiD,EAAMtB,EAAM1B,KAGA,MAAjBgD,EAAKC,SAAmBD,EAAKE,aAAa,aAG9CvC,EAAIwC,cAAcC,YAAYJ,EAAMlD,EAAWC,WAAY,CACvD2B,OACA1B,MACF,EAENqD,WAAY,CAACL,EAAMtB,EAAMC,EAAO3B,KAC5BW,EAAIwC,cAAcC,YAAYJ,EAAMlD,EAAWC,WAAY,CACvD2B,OACA1B,KACA2B,SACF,QAlBR2B,EAqBNzC,gBAAiBA,QAAyDA,OAAkByC,EAC5FvC,eAAgBA,QAAuDA,OAAiBuC,EACxFtC,WAAYA,QAA+CA,OAAasC,EACxExC,UAAWA,QAA6CA,OAAYwC,GAE5E,EA5EIC,WAAW,GAMT1B,EAAuB,sB","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime-extension/lib/index.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module rendermime-extension\n */\nimport { ISanitizer } from '@jupyterlab/apputils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { ILatexTypesetter, IMarkdownParser, IRenderMimeRegistry, RenderMimeRegistry, standardRendererFactories } from '@jupyterlab/rendermime';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.handleLink = 'rendermime:handle-local-link';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A plugin providing a rendermime registry.\n */\nconst plugin = {\n    id: '@jupyterlab/rendermime-extension:plugin',\n    description: 'Provides the render mime registry.',\n    optional: [\n        IDocumentManager,\n        ILatexTypesetter,\n        ISanitizer,\n        IMarkdownParser,\n        ITranslator\n    ],\n    provides: IRenderMimeRegistry,\n    activate: activate,\n    autoStart: true\n};\n/**\n * Export the plugin as default.\n */\nexport default plugin;\nconst DEBUGGER_OPEN_SOURCE = 'debugger:open-source';\n/**\n * Activate the rendermine plugin.\n */\nfunction activate(app, docManager, latexTypesetter, sanitizer, markdownParser, translator) {\n    const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('jupyterlab');\n    if (docManager) {\n        app.commands.addCommand(CommandIDs.handleLink, {\n            label: trans.__('Handle Local Link'),\n            execute: args => {\n                const path = args['path'];\n                const id = args['id'];\n                const scope = args['scope'] || 'server';\n                if (!path) {\n                    return;\n                }\n                if (scope === 'kernel') {\n                    // Note: using a command instead of requiring\n                    // `IDebuggerSourceViewer` to avoid a dependency cycle.\n                    if (!app.commands.hasCommand(DEBUGGER_OPEN_SOURCE)) {\n                        console.warn('Cannot open kernel file: debugger sources provider not available');\n                        return;\n                    }\n                    return app.commands.execute(DEBUGGER_OPEN_SOURCE, { path });\n                }\n                // First check if the path exists on the server.\n                return docManager.services.contents\n                    .get(path, { content: false })\n                    .then(() => {\n                    // Open the link with the default rendered widget factory,\n                    // if applicable.\n                    const factory = docManager.registry.defaultRenderedWidgetFactory(path);\n                    const widget = docManager.openOrReveal(path, factory.name);\n                    // Handle the hash if one has been provided.\n                    if (widget && id) {\n                        widget.setFragment(id);\n                    }\n                });\n            }\n        });\n    }\n    return new RenderMimeRegistry({\n        initialFactories: standardRendererFactories,\n        linkHandler: !docManager\n            ? undefined\n            : {\n                handleLink: (node, path, id) => {\n                    // If node has the download attribute explicitly set, use the\n                    // default browser downloading behavior.\n                    if (node.tagName === 'A' && node.hasAttribute('download')) {\n                        return;\n                    }\n                    app.commandLinker.connectNode(node, CommandIDs.handleLink, {\n                        path,\n                        id\n                    });\n                },\n                handlePath: (node, path, scope, id) => {\n                    app.commandLinker.connectNode(node, CommandIDs.handleLink, {\n                        path,\n                        id,\n                        scope\n                    });\n                }\n            },\n        latexTypesetter: latexTypesetter !== null && latexTypesetter !== void 0 ? latexTypesetter : undefined,\n        markdownParser: markdownParser !== null && markdownParser !== void 0 ? markdownParser : undefined,\n        translator: translator !== null && translator !== void 0 ? translator : undefined,\n        sanitizer: sanitizer !== null && sanitizer !== void 0 ? sanitizer : undefined\n    });\n}\n//# sourceMappingURL=index.js.map"],"names":["CommandIDs","handleLink","id","description","optional","IDocumentManager","ILatexTypesetter","ISanitizer","IMarkdownParser","ITranslator","provides","IRenderMimeRegistry","activate","app","docManager","latexTypesetter","sanitizer","markdownParser","translator","trans","nullTranslator","load","commands","addCommand","label","__","execute","args","path","scope","hasCommand","DEBUGGER_OPEN_SOURCE","console","warn","services","contents","get","content","then","factory","registry","defaultRenderedWidgetFactory","widget","openOrReveal","name","setFragment","RenderMimeRegistry","initialFactories","standardRendererFactories","linkHandler","node","tagName","hasAttribute","commandLinker","connectNode","handlePath","undefined","autoStart"],"sourceRoot":""}