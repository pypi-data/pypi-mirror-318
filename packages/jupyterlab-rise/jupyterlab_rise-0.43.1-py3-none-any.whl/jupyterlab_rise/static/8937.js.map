{"version":3,"file":"8937.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/observablemap.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/observablejson.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/observablestring.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/observablelist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/undoablelist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/modeldb.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of IObservableMap<T>.\n */\nexport class ObservableMap {\n    /**\n     * Construct a new observable map.\n     */\n    constructor(options = {}) {\n        this._map = new Map();\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this._itemCmp = options.itemCmp || Private.itemCmp;\n        if (options.values) {\n            for (const key in options.values) {\n                this._map.set(key, options.values[key]);\n            }\n        }\n    }\n    /**\n     * The type of the Observable.\n     */\n    get type() {\n        return 'Map';\n    }\n    /**\n     * A signal emitted when the map has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Whether this map has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The number of key-value pairs in the map.\n     */\n    get size() {\n        return this._map.size;\n    }\n    /**\n     * Set a key-value pair in the map\n     *\n     * @param key - The key to set.\n     *\n     * @param value - The value for the key.\n     *\n     * @returns the old value for the key, or undefined\n     *   if that did not exist.\n     *\n     * @throws if the new value is undefined.\n     *\n     * #### Notes\n     * This is a no-op if the value does not change.\n     */\n    set(key, value) {\n        const oldVal = this._map.get(key);\n        if (value === undefined) {\n            throw Error('Cannot set an undefined value, use remove');\n        }\n        // Bail if the value does not change.\n        const itemCmp = this._itemCmp;\n        if (oldVal !== undefined && itemCmp(oldVal, value)) {\n            return oldVal;\n        }\n        this._map.set(key, value);\n        this._changed.emit({\n            type: oldVal ? 'change' : 'add',\n            key: key,\n            oldValue: oldVal,\n            newValue: value\n        });\n        return oldVal;\n    }\n    /**\n     * Get a value for a given key.\n     *\n     * @param key - the key.\n     *\n     * @returns the value for that key.\n     */\n    get(key) {\n        return this._map.get(key);\n    }\n    /**\n     * Check whether the map has a key.\n     *\n     * @param key - the key to check.\n     *\n     * @returns `true` if the map has the key, `false` otherwise.\n     */\n    has(key) {\n        return this._map.has(key);\n    }\n    /**\n     * Get a list of the keys in the map.\n     *\n     * @returns - a list of keys.\n     */\n    keys() {\n        const keyList = [];\n        this._map.forEach((v, k) => {\n            keyList.push(k);\n        });\n        return keyList;\n    }\n    /**\n     * Get a list of the values in the map.\n     *\n     * @returns - a list of values.\n     */\n    values() {\n        const valList = [];\n        this._map.forEach((v, k) => {\n            valList.push(v);\n        });\n        return valList;\n    }\n    /**\n     * Remove a key from the map\n     *\n     * @param key - the key to remove.\n     *\n     * @returns the value of the given key,\n     *   or undefined if that does not exist.\n     *\n     * #### Notes\n     * This is a no-op if the value does not change.\n     */\n    delete(key) {\n        const oldVal = this._map.get(key);\n        const removed = this._map.delete(key);\n        if (removed) {\n            this._changed.emit({\n                type: 'remove',\n                key: key,\n                oldValue: oldVal,\n                newValue: undefined\n            });\n        }\n        return oldVal;\n    }\n    /**\n     * Set the ObservableMap to an empty map.\n     */\n    clear() {\n        // Delete one by one to emit the correct signals.\n        const keyList = this.keys();\n        for (let i = 0; i < keyList.length; i++) {\n            this.delete(keyList[i]);\n        }\n    }\n    /**\n     * Dispose of the resources held by the map.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this._map.clear();\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default strict equality item comparator.\n     */\n    function itemCmp(first, second) {\n        return first === second;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=observablemap.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JSONExt } from '@lumino/coreutils';\nimport { Message } from '@lumino/messaging';\nimport { ObservableMap } from './observablemap';\n/**\n * A concrete Observable map for JSON data.\n */\nexport class ObservableJSON extends ObservableMap {\n    /**\n     * Construct a new observable JSON object.\n     */\n    constructor(options = {}) {\n        super({\n            itemCmp: JSONExt.deepEqual,\n            values: options.values\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const out = Object.create(null);\n        const keys = this.keys();\n        for (const key of keys) {\n            const value = this.get(key);\n            if (value !== undefined) {\n                out[key] = JSONExt.deepCopy(value);\n            }\n        }\n        return out;\n    }\n}\n/**\n * The namespace for ObservableJSON static data.\n */\n(function (ObservableJSON) {\n    /**\n     * An observable JSON change message.\n     */\n    class ChangeMessage extends Message {\n        /**\n         * Create a new metadata changed message.\n         */\n        constructor(type, args) {\n            super(type);\n            this.args = args;\n        }\n    }\n    ObservableJSON.ChangeMessage = ChangeMessage;\n})(ObservableJSON || (ObservableJSON = {}));\n//# sourceMappingURL=observablejson.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of [[IObservableString]]\n */\nexport class ObservableString {\n    /**\n     * Construct a new observable string.\n     */\n    constructor(initialText = '') {\n        this._text = '';\n        this._isDisposed = false;\n        this._changed = new Signal(this);\n        this._text = initialText;\n    }\n    /**\n     * The type of the Observable.\n     */\n    get type() {\n        return 'String';\n    }\n    /**\n     * A signal emitted when the string has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Set the value of the string.\n     */\n    set text(value) {\n        if (value.length === this._text.length && value === this._text) {\n            return;\n        }\n        this._text = value;\n        this._changed.emit({\n            type: 'set',\n            start: 0,\n            end: value.length,\n            value: value\n        });\n    }\n    /**\n     * Get the value of the string.\n     */\n    get text() {\n        return this._text;\n    }\n    /**\n     * Insert a substring.\n     *\n     * @param index - The starting index.\n     *\n     * @param text - The substring to insert.\n     */\n    insert(index, text, options) {\n        this._text = this._text.slice(0, index) + text + this._text.slice(index);\n        this._changed.emit({\n            type: 'insert',\n            start: index,\n            end: index + text.length,\n            value: text,\n            options\n        });\n    }\n    /**\n     * Remove a substring.\n     *\n     * @param start - The starting index.\n     *\n     * @param end - The ending index.\n     */\n    remove(start, end, options) {\n        const oldValue = this._text.slice(start, end);\n        this._text = this._text.slice(0, start) + this._text.slice(end);\n        this._changed.emit({\n            type: 'remove',\n            start: start,\n            end: end,\n            value: oldValue,\n            options\n        });\n    }\n    /**\n     * Set the ObservableString to an empty string.\n     */\n    clear() {\n        this.text = '';\n    }\n    /**\n     * Test whether the string has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the string.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this.clear();\n    }\n}\n//# sourceMappingURL=observablestring.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of [[IObservableList]].\n */\nexport class ObservableList {\n    /**\n     * Construct a new observable map.\n     */\n    constructor(options = {}) {\n        this._array = [];\n        this._isDisposed = false;\n        this._changed = new Signal(this);\n        if (options.values) {\n            for (const value of options.values) {\n                this._array.push(value);\n            }\n        }\n        this._itemCmp = options.itemCmp || Private.itemCmp;\n    }\n    /**\n     * The type of this object.\n     */\n    get type() {\n        return 'List';\n    }\n    /**\n     * A signal emitted when the list has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The length of the list.\n     */\n    get length() {\n        return this._array.length;\n    }\n    /**\n     * Test whether the list has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the list.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this.clear();\n    }\n    /**\n     * Create an iterator over the values in the list.\n     *\n     * @returns A new iterator starting at the front of the list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    [Symbol.iterator]() {\n        return this._array[Symbol.iterator]();\n    }\n    /**\n     * Get the value at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @returns The value at the specified index.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    get(index) {\n        return this._array[index];\n    }\n    /**\n     * Set the value at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @param value - The value to set at the specified index.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    set(index, value) {\n        const oldValue = this._array[index];\n        if (value === undefined) {\n            throw new Error('Cannot set an undefined item');\n        }\n        // Bail if the value does not change.\n        const itemCmp = this._itemCmp;\n        if (itemCmp(oldValue, value)) {\n            return;\n        }\n        this._array[index] = value;\n        this._changed.emit({\n            type: 'set',\n            oldIndex: index,\n            newIndex: index,\n            oldValues: [oldValue],\n            newValues: [value]\n        });\n    }\n    /**\n     * Add a value to the end of the list.\n     *\n     * @param value - The value to add to the end of the list.\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Notes\n     * By convention, the oldIndex is set to -1 to indicate\n     * an push operation.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    push(value) {\n        const num = this._array.push(value);\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex: this.length - 1,\n            oldValues: [],\n            newValues: [value]\n        });\n        return num;\n    }\n    /**\n     * Insert a value into the list at a specific index.\n     *\n     * @param index - The index at which to insert the value.\n     *\n     * @param value - The value to set at the specified index.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the list.\n     *\n     * By convention, the oldIndex is set to -2 to indicate\n     * an insert operation.\n     *\n     * The value -2 as oldIndex can be used to distinguish from the push\n     * method which will use a value -1.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    insert(index, value) {\n        if (index === this._array.length) {\n            this._array.push(value);\n        }\n        else {\n            ArrayExt.insert(this._array, index, value);\n        }\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -2,\n            newIndex: index,\n            oldValues: [],\n            newValues: [value]\n        });\n    }\n    /**\n     * Remove the first occurrence of a value from the list.\n     *\n     * @param value - The value of interest.\n     *\n     * @returns The index of the removed value, or `-1` if the value\n     *   is not contained in the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed value and beyond are invalidated.\n     */\n    removeValue(value) {\n        const itemCmp = this._itemCmp;\n        const index = ArrayExt.findFirstIndex(this._array, item => {\n            return itemCmp(item, value);\n        });\n        this.remove(index);\n        return index;\n    }\n    /**\n     * Remove and return the value at a specific index.\n     *\n     * @param index - The index of the value of interest.\n     *\n     * @returns The value at the specified index, or `undefined` if the\n     *   index is out of range.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed value and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    remove(index) {\n        const value = ArrayExt.removeAt(this._array, index);\n        if (value === undefined) {\n            return;\n        }\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: index,\n            newIndex: -1,\n            newValues: [],\n            oldValues: [value]\n        });\n        return value;\n    }\n    /**\n     * Remove all values from the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * All current iterators are invalidated.\n     */\n    clear() {\n        const copy = this._array.slice();\n        this._array.length = 0;\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: 0,\n            newIndex: 0,\n            newValues: [],\n            oldValues: copy\n        });\n    }\n    /**\n     * Move a value from one index to another.\n     *\n     * @param fromIndex - The index of the element to move.\n     *\n     * @param toIndex - The index to move the element to.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the lesser of the `fromIndex` and the `toIndex`\n     * and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * A `fromIndex` or a `toIndex` which is non-integral.\n     */\n    move(fromIndex, toIndex) {\n        if (this.length <= 1 || fromIndex === toIndex) {\n            return;\n        }\n        const values = [this._array[fromIndex]];\n        ArrayExt.move(this._array, fromIndex, toIndex);\n        this._changed.emit({\n            type: 'move',\n            oldIndex: fromIndex,\n            newIndex: toIndex,\n            oldValues: values,\n            newValues: values\n        });\n    }\n    /**\n     * Push a set of values to the back of the list.\n     *\n     * @param values - An iterable set of values to add.\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Notes\n     * By convention, the oldIndex is set to -1 to indicate\n     * an push operation.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    pushAll(values) {\n        const newIndex = this.length;\n        for (const value of values) {\n            this._array.push(value);\n        }\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex,\n            oldValues: [],\n            newValues: Array.from(values)\n        });\n        return this.length;\n    }\n    /**\n     * Insert a set of items into the list at the specified index.\n     *\n     * @param index - The index at which to insert the values.\n     *\n     * @param values - The values to insert at the specified index.\n     *\n     * #### Complexity.\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the list.\n     * By convention, the oldIndex is set to -2 to indicate\n     * an insert operation.\n     *\n     * #### Undefined Behavior.\n     * An `index` which is non-integral.\n     */\n    insertAll(index, values) {\n        const newIndex = index;\n        for (const value of values) {\n            ArrayExt.insert(this._array, index++, value);\n        }\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -2,\n            newIndex,\n            oldValues: [],\n            newValues: Array.from(values)\n        });\n    }\n    /**\n     * Remove a range of items from the list.\n     *\n     * @param startIndex - The start index of the range to remove (inclusive).\n     *\n     * @param endIndex - The end index of the range to remove (exclusive).\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing to the first removed value and beyond are invalid.\n     *\n     * #### Undefined Behavior\n     * A `startIndex` or `endIndex` which is non-integral.\n     */\n    removeRange(startIndex, endIndex) {\n        const oldValues = this._array.slice(startIndex, endIndex);\n        for (let i = startIndex; i < endIndex; i++) {\n            ArrayExt.removeAt(this._array, startIndex);\n        }\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: startIndex,\n            newIndex: -1,\n            oldValues,\n            newValues: []\n        });\n        return this.length;\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default strict equality item cmp.\n     */\n    function itemCmp(first, second) {\n        return first === second;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=observablelist.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ObservableList } from './observablelist';\n/**\n * A concrete implementation of an observable undoable list.\n */\nexport class ObservableUndoableList extends ObservableList {\n    /**\n     * Construct a new undoable observable list.\n     */\n    constructor(serializer) {\n        super();\n        this._inCompound = false;\n        this._isUndoable = true;\n        this._madeCompoundChange = false;\n        this._index = -1;\n        this._stack = [];\n        this._serializer = serializer;\n        this.changed.connect(this._onListChanged, this);\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    get canRedo() {\n        return this._index < this._stack.length - 1;\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    get canUndo() {\n        return this._index >= 0;\n    }\n    /**\n     * Begin a compound operation.\n     *\n     * @param isUndoAble - Whether the operation is undoable.\n     *   The default is `true`.\n     */\n    beginCompoundOperation(isUndoAble) {\n        this._inCompound = true;\n        this._isUndoable = isUndoAble !== false;\n        this._madeCompoundChange = false;\n    }\n    /**\n     * End a compound operation.\n     */\n    endCompoundOperation() {\n        this._inCompound = false;\n        this._isUndoable = true;\n        if (this._madeCompoundChange) {\n            this._index++;\n        }\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        if (!this.canUndo) {\n            return;\n        }\n        const changes = this._stack[this._index];\n        this._isUndoable = false;\n        for (const change of changes.reverse()) {\n            this._undoChange(change);\n        }\n        this._isUndoable = true;\n        this._index--;\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        if (!this.canRedo) {\n            return;\n        }\n        this._index++;\n        const changes = this._stack[this._index];\n        this._isUndoable = false;\n        for (const change of changes) {\n            this._redoChange(change);\n        }\n        this._isUndoable = true;\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndo() {\n        this._index = -1;\n        this._stack = [];\n    }\n    /**\n     * Handle a change in the list.\n     */\n    _onListChanged(list, change) {\n        if (this.isDisposed || !this._isUndoable) {\n            return;\n        }\n        // Clear everything after this position if necessary.\n        if (!this._inCompound || !this._madeCompoundChange) {\n            this._stack = this._stack.slice(0, this._index + 1);\n        }\n        // Copy the change.\n        const evt = this._copyChange(change);\n        // Put the change in the stack.\n        if (this._stack[this._index + 1]) {\n            this._stack[this._index + 1].push(evt);\n        }\n        else {\n            this._stack.push([evt]);\n        }\n        // If not in a compound operation, increase index.\n        if (!this._inCompound) {\n            this._index++;\n        }\n        else {\n            this._madeCompoundChange = true;\n        }\n    }\n    /**\n     * Undo a change event.\n     */\n    _undoChange(change) {\n        let index = 0;\n        const serializer = this._serializer;\n        switch (change.type) {\n            case 'add':\n                for (let length = change.newValues.length; length > 0; length--) {\n                    this.remove(change.newIndex);\n                }\n                break;\n            case 'set':\n                index = change.oldIndex;\n                for (const value of change.oldValues) {\n                    this.set(index++, serializer.fromJSON(value));\n                }\n                break;\n            case 'remove':\n                index = change.oldIndex;\n                for (const value of change.oldValues) {\n                    this.insert(index++, serializer.fromJSON(value));\n                }\n                break;\n            case 'move':\n                this.move(change.newIndex, change.oldIndex);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * Redo a change event.\n     */\n    _redoChange(change) {\n        let index = 0;\n        const serializer = this._serializer;\n        switch (change.type) {\n            case 'add':\n                index = change.newIndex;\n                for (const value of change.newValues) {\n                    this.insert(index++, serializer.fromJSON(value));\n                }\n                break;\n            case 'set':\n                index = change.newIndex;\n                for (const value of change.newValues) {\n                    this.set(change.newIndex++, serializer.fromJSON(value));\n                }\n                break;\n            case 'remove':\n                for (let length = change.oldValues.length; length > 0; length--) {\n                    this.remove(change.oldIndex);\n                }\n                break;\n            case 'move':\n                this.move(change.oldIndex, change.newIndex);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * Copy a change as JSON.\n     */\n    _copyChange(change) {\n        const oldValues = [];\n        for (const value of change.oldValues) {\n            oldValues.push(this._serializer.toJSON(value));\n        }\n        const newValues = [];\n        for (const value of change.newValues) {\n            newValues.push(this._serializer.toJSON(value));\n        }\n        return {\n            type: change.type,\n            oldIndex: change.oldIndex,\n            newIndex: change.newIndex,\n            oldValues,\n            newValues\n        };\n    }\n}\n/**\n * Namespace for ObservableUndoableList utilities.\n */\n(function (ObservableUndoableList) {\n    /**\n     * A default, identity serializer.\n     */\n    class IdentitySerializer {\n        /**\n         * Identity serialize.\n         */\n        toJSON(value) {\n            return value;\n        }\n        /**\n         * Identity deserialize.\n         */\n        fromJSON(value) {\n            return value;\n        }\n    }\n    ObservableUndoableList.IdentitySerializer = IdentitySerializer;\n})(ObservableUndoableList || (ObservableUndoableList = {}));\n//# sourceMappingURL=undoablelist.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JSONExt } from '@lumino/coreutils';\nimport { DisposableSet } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\nimport { ObservableJSON } from './observablejson';\nimport { ObservableMap } from './observablemap';\nimport { ObservableString } from './observablestring';\nimport { ObservableUndoableList } from './undoablelist';\n/**\n * A concrete implementation of an `IObservableValue`.\n */\nexport class ObservableValue {\n    /**\n     * Constructor for the value.\n     *\n     * @param initialValue the starting value for the `ObservableValue`.\n     */\n    constructor(initialValue = null) {\n        this._value = null;\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this._value = initialValue;\n    }\n    /**\n     * The observable type.\n     */\n    get type() {\n        return 'Value';\n    }\n    /**\n     * Whether the value has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The changed signal.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the current value, or `undefined` if it has not been set.\n     */\n    get() {\n        return this._value;\n    }\n    /**\n     * Set the current value.\n     */\n    set(value) {\n        const oldValue = this._value;\n        if (JSONExt.deepEqual(oldValue, value)) {\n            return;\n        }\n        this._value = value;\n        this._changed.emit({\n            oldValue: oldValue,\n            newValue: value\n        });\n    }\n    /**\n     * Dispose of the resources held by the value.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this._value = null;\n    }\n}\n/**\n * The namespace for the `ObservableValue` class statics.\n */\n(function (ObservableValue) {\n    /**\n     * The changed args object emitted by the `IObservableValue`.\n     */\n    class IChangedArgs {\n    }\n    ObservableValue.IChangedArgs = IChangedArgs;\n})(ObservableValue || (ObservableValue = {}));\n/**\n * A concrete implementation of an `IModelDB`.\n */\nexport class ModelDB {\n    /**\n     * Constructor for the `ModelDB`.\n     */\n    constructor(options = {}) {\n        /**\n         * Whether the model has been populated with\n         * any model values.\n         */\n        this.isPrepopulated = false;\n        /**\n         * Whether the model is collaborative.\n         */\n        this.isCollaborative = false;\n        /**\n         * A promise resolved when the model is connected\n         * to its backend. For the in-memory ModelDB it\n         * is immediately resolved.\n         */\n        this.connected = Promise.resolve(void 0);\n        this._toDispose = false;\n        this._isDisposed = false;\n        this._disposables = new DisposableSet();\n        this._basePath = options.basePath || '';\n        if (options.baseDB) {\n            this._db = options.baseDB;\n        }\n        else {\n            this._db = new ObservableMap();\n            this._toDispose = true;\n        }\n    }\n    /**\n     * The base path for the `ModelDB`. This is prepended\n     * to all the paths that are passed in to the member\n     * functions of the object.\n     */\n    get basePath() {\n        return this._basePath;\n    }\n    /**\n     * Whether the database is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Get a value for a path.\n     *\n     * @param path the path for the object.\n     *\n     * @returns an `IObservable`.\n     */\n    get(path) {\n        return this._db.get(this._resolvePath(path));\n    }\n    /**\n     * Whether the `IModelDB` has an object at this path.\n     *\n     * @param path the path for the object.\n     *\n     * @returns a boolean for whether an object is at `path`.\n     */\n    has(path) {\n        return this._db.has(this._resolvePath(path));\n    }\n    /**\n     * Create a string and insert it in the database.\n     *\n     * @param path the path for the string.\n     *\n     * @returns the string that was created.\n     */\n    createString(path) {\n        const str = new ObservableString();\n        this._disposables.add(str);\n        this.set(path, str);\n        return str;\n    }\n    /**\n     * Create an undoable list and insert it in the database.\n     *\n     * @param path the path for the list.\n     *\n     * @returns the list that was created.\n     *\n     * #### Notes\n     * The list can only store objects that are simple\n     * JSON Objects and primitives.\n     */\n    createList(path) {\n        const vec = new ObservableUndoableList(new ObservableUndoableList.IdentitySerializer());\n        this._disposables.add(vec);\n        this.set(path, vec);\n        return vec;\n    }\n    /**\n     * Create a map and insert it in the database.\n     *\n     * @param path the path for the map.\n     *\n     * @returns the map that was created.\n     *\n     * #### Notes\n     * The map can only store objects that are simple\n     * JSON Objects and primitives.\n     */\n    createMap(path) {\n        const map = new ObservableJSON();\n        this._disposables.add(map);\n        this.set(path, map);\n        return map;\n    }\n    /**\n     * Create an opaque value and insert it in the database.\n     *\n     * @param path the path for the value.\n     *\n     * @returns the value that was created.\n     */\n    createValue(path) {\n        const val = new ObservableValue();\n        this._disposables.add(val);\n        this.set(path, val);\n        return val;\n    }\n    /**\n     * Get a value at a path, or `undefined if it has not been set\n     * That value must already have been created using `createValue`.\n     *\n     * @param path the path for the value.\n     */\n    getValue(path) {\n        const val = this.get(path);\n        if (!val || val.type !== 'Value') {\n            throw Error('Can only call getValue for an ObservableValue');\n        }\n        return val.get();\n    }\n    /**\n     * Set a value at a path. That value must already have\n     * been created using `createValue`.\n     *\n     * @param path the path for the value.\n     *\n     * @param value the new value.\n     */\n    setValue(path, value) {\n        const val = this.get(path);\n        if (!val || val.type !== 'Value') {\n            throw Error('Can only call setValue on an ObservableValue');\n        }\n        val.set(value);\n    }\n    /**\n     * Create a view onto a subtree of the model database.\n     *\n     * @param basePath the path for the root of the subtree.\n     *\n     * @returns an `IModelDB` with a view onto the original\n     *   `IModelDB`, with `basePath` prepended to all paths.\n     */\n    view(basePath) {\n        const view = new ModelDB({ basePath, baseDB: this });\n        this._disposables.add(view);\n        return view;\n    }\n    /**\n     * Set a value at a path. Not intended to\n     * be called by user code, instead use the\n     * `create*` factory methods.\n     *\n     * @param path the path to set the value at.\n     *\n     * @param value the value to set at the path.\n     */\n    set(path, value) {\n        this._db.set(this._resolvePath(path), value);\n    }\n    /**\n     * Dispose of the resources held by the database.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        if (this._toDispose) {\n            this._db.dispose();\n        }\n        this._disposables.dispose();\n    }\n    /**\n     * Compute the fully resolved path for a path argument.\n     */\n    _resolvePath(path) {\n        if (this._basePath) {\n            path = this._basePath + '.' + path;\n        }\n        return path;\n    }\n}\n//# sourceMappingURL=modeldb.js.map"],"names":["Private","ObservableMap","constructor","options","this","_map","Map","_changed","Signal","_isDisposed","_itemCmp","itemCmp","values","key","set","type","changed","isDisposed","size","value","oldVal","get","undefined","Error","emit","oldValue","newValue","has","keys","keyList","forEach","v","k","push","valList","delete","clear","i","length","dispose","clearData","first","second","ObservableJSON","super","JSONExt","deepEqual","toJSON","out","Object","create","deepCopy","ChangeMessage","Message","args","ObservableString","initialText","_text","text","start","end","insert","index","slice","remove","ObservableList","_array","Symbol","iterator","oldIndex","newIndex","oldValues","newValues","num","ArrayExt","removeValue","findFirstIndex","item","removeAt","copy","move","fromIndex","toIndex","pushAll","Array","from","insertAll","removeRange","startIndex","endIndex","ObservableUndoableList","serializer","_inCompound","_isUndoable","_madeCompoundChange","_index","_stack","_serializer","connect","_onListChanged","canRedo","canUndo","beginCompoundOperation","isUndoAble","endCompoundOperation","undo","changes","change","reverse","_undoChange","redo","_redoChange","clearUndo","list","evt","_copyChange","fromJSON","IdentitySerializer","ObservableValue","initialValue","_value","IChangedArgs","ModelDB","isPrepopulated","isCollaborative","connected","Promise","resolve","_toDispose","_disposables","DisposableSet","_basePath","basePath","baseDB","_db","path","_resolvePath","createString","str","add","createList","vec","createMap","map","createValue","val","getValue","setValue","view"],"sourceRoot":""}