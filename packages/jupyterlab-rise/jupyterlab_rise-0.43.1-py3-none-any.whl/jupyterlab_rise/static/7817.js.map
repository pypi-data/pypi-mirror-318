{"version":3,"file":"7817.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/property-inspector/lib/token.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/property-inspector/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The property inspector provider token.\n */\nexport const IPropertyInspectorProvider = new Token('@jupyterlab/property-inspector:IPropertyInspectorProvider', 'A service to register new widgets in the property inspector side panel.');\n//# sourceMappingURL=token.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module property-inspector\n */\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ReactWidget } from '@jupyterlab/ui-components';\nimport { Signal } from '@lumino/signaling';\nimport { FocusTracker, SingletonLayout, Widget } from '@lumino/widgets';\nimport { IPropertyInspectorProvider } from './token';\nexport { IPropertyInspectorProvider };\n/**\n * The implementation of the PropertyInspector.\n */\nclass PropertyInspectorProvider extends Widget {\n    /**\n     * Construct a new Property Inspector.\n     */\n    constructor() {\n        super();\n        this._tracker = new FocusTracker();\n        this._inspectors = new Map();\n        this.addClass('jp-PropertyInspector');\n        this._tracker = new FocusTracker();\n        this._tracker.currentChanged.connect(this._onCurrentChanged, this);\n    }\n    /**\n     * Register a widget in the property inspector provider.\n     *\n     * @param widget The owner widget to register.\n     */\n    register(widget) {\n        if (this._inspectors.has(widget)) {\n            throw new Error('Widget is already registered');\n        }\n        const inspector = new Private.PropertyInspector(widget);\n        widget.disposed.connect(this._onWidgetDisposed, this);\n        this._inspectors.set(widget, inspector);\n        inspector.onAction.connect(this._onInspectorAction, this);\n        this._tracker.add(widget);\n        return inspector;\n    }\n    /**\n     * The current widget being tracked by the inspector.\n     */\n    get currentWidget() {\n        return this._tracker.currentWidget;\n    }\n    /**\n     * Refresh the content for the current widget.\n     */\n    refresh() {\n        const current = this._tracker.currentWidget;\n        if (!current) {\n            this.setContent(null);\n            return;\n        }\n        const inspector = this._inspectors.get(current);\n        if (inspector) {\n            this.setContent(inspector.content);\n        }\n    }\n    /**\n     * Handle the disposal of a widget.\n     */\n    _onWidgetDisposed(sender) {\n        const inspector = this._inspectors.get(sender);\n        if (inspector) {\n            inspector.dispose();\n            this._inspectors.delete(sender);\n        }\n    }\n    /**\n     * Handle inspector actions.\n     */\n    _onInspectorAction(sender, action) {\n        const owner = sender.owner;\n        const current = this._tracker.currentWidget;\n        switch (action) {\n            case 'content':\n                if (current === owner) {\n                    this.setContent(sender.content);\n                }\n                break;\n            case 'dispose':\n                if (owner) {\n                    this._tracker.remove(owner);\n                    this._inspectors.delete(owner);\n                }\n                break;\n            case 'show-panel':\n                if (current === owner) {\n                    this.showPanel();\n                }\n                break;\n            default:\n                throw new Error('Unsupported inspector action');\n        }\n    }\n    /**\n     * Handle a change to the current widget in the tracker.\n     */\n    _onCurrentChanged() {\n        const current = this._tracker.currentWidget;\n        if (current) {\n            const inspector = this._inspectors.get(current);\n            const content = inspector.content;\n            this.setContent(content);\n        }\n        else {\n            this.setContent(null);\n        }\n    }\n}\n/**\n * A class that adds a property inspector provider to the\n * JupyterLab sidebar.\n */\nexport class SideBarPropertyInspectorProvider extends PropertyInspectorProvider {\n    /**\n     * Construct a new Side Bar Property Inspector.\n     */\n    constructor({ shell, placeholder, translator }) {\n        super();\n        this._labshell = shell;\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        const layout = (this.layout = new SingletonLayout());\n        if (placeholder) {\n            this._placeholder = placeholder;\n        }\n        else {\n            const node = document.createElement('div');\n            const content = document.createElement('div');\n            const placeholderHeadline = document.createElement('h3');\n            const placeholderText = document.createElement('p');\n            placeholderHeadline.textContent = this._trans.__('No Properties');\n            placeholderText.textContent = this._trans.__('The property inspector allows to view and edit properties of a selected notebook.');\n            content.className = 'jp-PropertyInspector-placeholderContent';\n            content.appendChild(placeholderHeadline);\n            content.appendChild(placeholderText);\n            node.appendChild(content);\n            this._placeholder = new Widget({ node });\n            this._placeholder.addClass('jp-PropertyInspector-placeholder');\n        }\n        layout.widget = this._placeholder;\n        this._labshell.currentChanged.connect(this._onShellCurrentChanged, this);\n        this._onShellCurrentChanged();\n    }\n    /**\n     * Set the content of the sidebar panel.\n     */\n    setContent(content) {\n        const layout = this.layout;\n        if (layout.widget) {\n            layout.widget.removeClass('jp-PropertyInspector-content');\n            layout.removeWidget(layout.widget);\n        }\n        if (!content) {\n            content = this._placeholder;\n        }\n        content.addClass('jp-PropertyInspector-content');\n        layout.widget = content;\n    }\n    /**\n     * Show the sidebar panel.\n     */\n    showPanel() {\n        this._labshell.activateById(this.id);\n    }\n    /**\n     * Handle the case when the current widget is not in our tracker.\n     */\n    _onShellCurrentChanged() {\n        const current = this.currentWidget;\n        if (!current) {\n            this.setContent(null);\n            return;\n        }\n        const currentShell = this._labshell.currentWidget;\n        if (currentShell === null || currentShell === void 0 ? void 0 : currentShell.node.contains(current.node)) {\n            this.refresh();\n        }\n        else {\n            this.setContent(null);\n        }\n    }\n}\n/**\n * A namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * An implementation of the property inspector used by the\n     * property inspector provider.\n     */\n    class PropertyInspector {\n        /**\n         * Construct a new property inspector.\n         */\n        constructor(owner) {\n            this._isDisposed = false;\n            this._content = null;\n            this._owner = null;\n            this._onAction = new Signal(this);\n            this._owner = owner;\n        }\n        /**\n         * The owner widget for the property inspector.\n         */\n        get owner() {\n            return this._owner;\n        }\n        /**\n         * The current content for the property inspector.\n         */\n        get content() {\n            return this._content;\n        }\n        /**\n         * Whether the property inspector is disposed.\n         */\n        get isDisposed() {\n            return this._isDisposed;\n        }\n        /**\n         * A signal used for actions related to the property inspector.\n         */\n        get onAction() {\n            return this._onAction;\n        }\n        /**\n         * Show the property inspector panel.\n         */\n        showPanel() {\n            if (this._isDisposed) {\n                return;\n            }\n            this._onAction.emit('show-panel');\n        }\n        /**\n         * Render the property inspector content.\n         */\n        render(widget) {\n            if (this._isDisposed) {\n                return;\n            }\n            if (widget instanceof Widget) {\n                this._content = widget;\n            }\n            else {\n                this._content = ReactWidget.create(widget);\n            }\n            this._onAction.emit('content');\n        }\n        /**\n         * Dispose of the property inspector.\n         */\n        dispose() {\n            if (this._isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            this._content = null;\n            this._owner = null;\n            Signal.clearData(this);\n        }\n    }\n    Private.PropertyInspector = PropertyInspector;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"names":["IPropertyInspectorProvider","Token","PropertyInspectorProvider","Widget","constructor","super","this","_tracker","FocusTracker","_inspectors","Map","addClass","currentChanged","connect","_onCurrentChanged","register","widget","has","Error","inspector","Private","PropertyInspector","disposed","_onWidgetDisposed","set","onAction","_onInspectorAction","add","currentWidget","refresh","current","setContent","get","content","sender","dispose","delete","action","owner","remove","showPanel","SideBarPropertyInspectorProvider","shell","placeholder","translator","_labshell","nullTranslator","_trans","load","layout","SingletonLayout","_placeholder","node","document","createElement","placeholderHeadline","placeholderText","textContent","__","className","appendChild","_onShellCurrentChanged","removeClass","removeWidget","activateById","id","currentShell","contains","_isDisposed","_content","_owner","_onAction","Signal","isDisposed","emit","render","ReactWidget","create","clearData"],"sourceRoot":""}