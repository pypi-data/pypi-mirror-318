{"version":3,"file":"4453.bundle.js","mappings":"6LAQIA,E,uBACJ,SAAWA,GAIPA,EAAWC,KAAO,oBAIlBD,EAAWE,MAAQ,eACtB,CATD,CASGF,IAAeA,EAAa,CAAC,IAIzB,MAAMG,EACT,WAAAC,GACIC,KAAKC,cAAe,CACxB,CACA,wBAAMC,GACGF,KAAKC,eACND,KAAKG,oBAAsBC,EAAQC,qBACnCL,KAAKC,cAAe,EAE5B,CAIA,kBAAMK,GAEF,aADMN,KAAKE,qBACJF,KAAKG,aAChB,CAIA,aAAMI,CAAQC,GACV,UACUR,KAAKE,oBACf,CACA,MAAOO,GAEH,YADAC,QAAQC,MAAMF,EAElB,CACAT,KAAKG,cAAcS,QAAQC,SAAW,CAACL,GACvCR,KAAKG,cAAcW,QAAQC,gBACpBf,KAAKG,cAAcS,QAAQC,QACtC,EAKJ,MA2BA,EA3BsB,CAClBG,GAAI,uCACJC,YAAa,0DACbC,SAAU,EAAAC,iBACVC,SAAWC,IACP,MAAMC,EAAa,IAAIxB,EAkBvB,OAjBAuB,EAAIE,SAASC,WAAW7B,EAAWC,KAAM,CACrC6B,QAASC,UACL,MACMC,SADWL,EAAWhB,gBACZsB,gBACVC,UAAUC,UAAUC,UAAUJ,EAAKK,KAAKA,KAAK,EAEvDC,MAAO,uBAEXZ,EAAIE,SAASC,WAAW7B,EAAWE,MAAO,CACtC4B,QAASC,MAAOQ,IACZ,MAAMC,QAAWb,EAAWhB,eACtBT,EAAQqC,EAAY,OAAK,EAC/BC,EAAGP,UAAUhB,QAAQf,MAAQA,EAC7BsC,EAAGC,UAAU,EAEjBH,MAAOC,GAAQ,kBAAoBA,EAAY,MAAI,IAAIA,EAAY,QAAM,WAEtEZ,CAAU,EAErBe,WAAW,GAMf,IAAIjC,GACJ,SAAWA,GACP,IAAIkC,EAAW,KA6CflC,EAAQC,mBA5CRqB,iBACI,IAAKY,EAAU,CACXA,EAAW,IAAI,EAAAC,gBACV,uEACL,OAAO,QAAEC,IAAW,MAAEC,IAAS,IAAEC,IAAO,QAAEC,IAAW,YAAEC,IAAe,YAAEC,IAAe,YAAEC,IAAe,eAAEC,IAAkB,oBAAEC,UAA+BC,QAAQC,IAAI,CACrK,gCACA,kFACA,iFACA,8DACA,4EACA,oCACA,kFACA,gCACA,oFAEJV,EAAQW,SAASC,SAASJ,EAAoBH,EAAY,IAAIC,EAAYC,QAC1E,MAAMM,UAAkBV,GAExBU,EAAUC,aAAe,CAAC,EAC1B,MAAMC,EAAQ,IAAId,EAAM,CAEpBe,KAAM,IAAIH,IAERI,EAAM,IAAIf,EAAI,CAChBgB,SAAUd,EAAYe,OAAO,WAC7BC,WAAY,CACR,CAAC,IAAK,KACN,CAAC,MAAO,QAEZC,YAAa,CACT,CAAC,KAAM,MACP,CAAC,MAAO,QAEZC,gBAAgB,EAChBC,qBAAqB,IAEnBzD,EAAekC,EAAQwB,SAASC,OAAOD,SAAU,CACnDE,SAAUT,EACVU,UAAWZ,IAEfjB,EAAS8B,QAAQ9D,EACrB,CACA,OAAOgC,EAAS+B,OACpB,CAEH,CA/CD,CA+CGjE,IAAYA,EAAU,CAAC,G","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/mathjax-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module mathjax-extension\n */\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { ILatexTypesetter } from '@jupyterlab/rendermime';\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * Copy raw LaTeX to clipboard.\n     */\n    CommandIDs.copy = 'mathjax:clipboard';\n    /**\n     * Scale MathJax elements.\n     */\n    CommandIDs.scale = 'mathjax:scale';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The MathJax Typesetter.\n */\nexport class MathJaxTypesetter {\n    constructor() {\n        this._initialized = false;\n    }\n    async _ensureInitialized() {\n        if (!this._initialized) {\n            this._mathDocument = await Private.ensureMathDocument();\n            this._initialized = true;\n        }\n    }\n    /**\n     * Get an instance of the MathDocument object.\n     */\n    async mathDocument() {\n        await this._ensureInitialized();\n        return this._mathDocument;\n    }\n    /**\n     * Typeset the math in a node.\n     */\n    async typeset(node) {\n        try {\n            await this._ensureInitialized();\n        }\n        catch (e) {\n            console.error(e);\n            return;\n        }\n        this._mathDocument.options.elements = [node];\n        this._mathDocument.clear().render();\n        delete this._mathDocument.options.elements;\n    }\n}\n/**\n * The MathJax extension.\n */\nconst mathJaxPlugin = {\n    id: '@jupyterlab/mathjax-extension:plugin',\n    description: 'Provides the LaTeX mathematical expression interpreter.',\n    provides: ILatexTypesetter,\n    activate: (app) => {\n        const typesetter = new MathJaxTypesetter();\n        app.commands.addCommand(CommandIDs.copy, {\n            execute: async () => {\n                const md = await typesetter.mathDocument();\n                const oJax = md.outputJax;\n                await navigator.clipboard.writeText(oJax.math.math);\n            },\n            label: 'MathJax Copy Latex'\n        });\n        app.commands.addCommand(CommandIDs.scale, {\n            execute: async (args) => {\n                const md = await typesetter.mathDocument();\n                const scale = args['scale'] || 1.0;\n                md.outputJax.options.scale = scale;\n                md.rerender();\n            },\n            label: args => 'Mathjax Scale ' + (args['scale'] ? `x${args['scale']}` : 'Reset')\n        });\n        return typesetter;\n    },\n    autoStart: true\n};\nexport default mathJaxPlugin;\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    let _loading = null;\n    async function ensureMathDocument() {\n        if (!_loading) {\n            _loading = new PromiseDelegate();\n            void import('mathjax-full/js/input/tex/require/RequireConfiguration');\n            const [{ mathjax }, { CHTML }, { TeX }, { TeXFont }, { AllPackages }, { SafeHandler }, { HTMLHandler }, { browserAdaptor }, { AssistiveMmlHandler }] = await Promise.all([\n                import('mathjax-full/js/mathjax'),\n                import('mathjax-full/js/output/chtml'),\n                import('mathjax-full/js/input/tex'),\n                import('mathjax-full/js/output/chtml/fonts/tex'),\n                import('mathjax-full/js/input/tex/AllPackages'),\n                import('mathjax-full/js/ui/safe/SafeHandler'),\n                import('mathjax-full/js/handlers/html/HTMLHandler'),\n                import('mathjax-full/js/adaptors/browserAdaptor'),\n                import('mathjax-full/js/a11y/assistive-mml')\n            ]);\n            mathjax.handlers.register(AssistiveMmlHandler(SafeHandler(new HTMLHandler(browserAdaptor()))));\n            class EmptyFont extends TeXFont {\n            }\n            EmptyFont.defaultFonts = {};\n            const chtml = new CHTML({\n                // Override dynamically generated fonts in favor of our font css\n                font: new EmptyFont()\n            });\n            const tex = new TeX({\n                packages: AllPackages.concat('require'),\n                inlineMath: [\n                    ['$', '$'],\n                    ['\\\\(', '\\\\)']\n                ],\n                displayMath: [\n                    ['$$', '$$'],\n                    ['\\\\[', '\\\\]']\n                ],\n                processEscapes: true,\n                processEnvironments: true\n            });\n            const mathDocument = mathjax.document(window.document, {\n                InputJax: tex,\n                OutputJax: chtml\n            });\n            _loading.resolve(mathDocument);\n        }\n        return _loading.promise;\n    }\n    Private.ensureMathDocument = ensureMathDocument;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"names":["CommandIDs","copy","scale","MathJaxTypesetter","constructor","this","_initialized","_ensureInitialized","_mathDocument","Private","ensureMathDocument","mathDocument","typeset","node","e","console","error","options","elements","clear","render","id","description","provides","ILatexTypesetter","activate","app","typesetter","commands","addCommand","execute","async","oJax","outputJax","navigator","clipboard","writeText","math","label","args","md","rerender","autoStart","_loading","PromiseDelegate","mathjax","CHTML","TeX","TeXFont","AllPackages","SafeHandler","HTMLHandler","browserAdaptor","AssistiveMmlHandler","Promise","all","handlers","register","EmptyFont","defaultFonts","chtml","font","tex","packages","concat","inlineMath","displayMath","processEscapes","processEnvironments","document","window","InputJax","OutputJax","resolve","promise"],"sourceRoot":""}