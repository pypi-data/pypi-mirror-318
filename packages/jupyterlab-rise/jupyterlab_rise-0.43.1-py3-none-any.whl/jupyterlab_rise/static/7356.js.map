{"version":3,"file":"7356.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/dagre-d3-es/src/graphlib/json.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lodash-es/clone.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/mermaid/dist/index-3862675e.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nimport { c as createLabel, g as getSubGraphTitleMargins, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, h as insertEdge, j as positionEdgeLabel } from \"./edges-e0da2a9e.js\";\nimport { l as log, c as getConfig, m as evaluate } from \"./mermaid-b5860b54.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { a as createText } from \"./createText-2e5e7dd3.js\";\nimport { select } from \"d3\";\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\nconst isDescendant = (id, ancestorId) => {\n  log.trace(\"In isDescendant\", ancestorId, \" \", id, \" = \", descendants[ancestorId].includes(id));\n  if (descendants[ancestorId].includes(id)) {\n    return true;\n  }\n  return false;\n};\nconst edgeInCluster = (edge, clusterId) => {\n  log.info(\"Descendants of \", clusterId, \" is \", descendants[clusterId]);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n  if (!descendants[clusterId]) {\n    log.debug(\"Tilt, \", clusterId, \",not in descendants\");\n    return false;\n  }\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n};\nconst extractDescendants = (id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n};\nconst findNonClusterChild = (id, graph) => {\n  log.trace(\"Searching\", id);\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    log.trace(\"This is a valid node\", id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace(\"Found replacement for\", id, \" => \", _id);\n      return _id;\n    }\n  }\n};\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\nconst adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        if (edge.v !== id && edge.w !== id) {\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n          if (d1 ^ d2) {\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n            log.warn(\"Descendants of XXX \", id, \": \", descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  for (let id of Object.keys(clusterDb)) {\n    const nonClusterChild = clusterDb[id].id;\n    const parent = graph.parent(nonClusterChild);\n    if (parent !== id && clusterDb[parent] && !clusterDb[parent].externalConnections) {\n      clusterDb[id].id = parent;\n    }\n  }\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb[e.v],\n      \" --- \",\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + \"---\" + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: \"\",\n        labelText: edge.label,\n        padding: 0,\n        shape: \"labelRect\",\n        style: \"\"\n      });\n      const edge1 = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge2.label = \"\";\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        const parent = graph.parent(v);\n        clusterDb[parent].externalConnections = true;\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        const parent = graph.parent(w);\n        clusterDb[parent].externalConnections = true;\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n};\nconst extractor = (graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb[node]) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n    graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        // Todo: set proper spacing\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb[node].externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n};\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\nconst rect = (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const siteConfig = getConfig();\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const useHtmlLabels = evaluate(siteConfig.flowchart.htmlLabels);\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(siteConfig.flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  log.trace(\"Data \", node, JSON.stringify(node));\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n  const { subGraphTitleTopMargin } = getSubGraphTitleMargins(siteConfig);\n  if (useHtmlLabels) {\n    label.attr(\n      \"transform\",\n      // This puts the label on top of the box instead of inside it\n      `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`\n    );\n  } else {\n    label.attr(\n      \"transform\",\n      // This puts the label on top of the box instead of inside it\n      `translate(${node.x}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`\n    );\n  }\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst noteGroup = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  const siteConfig = getConfig();\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const innerRect = shapeSvg.append(\"rect\");\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(siteConfig.flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n  const { subGraphTitleTopMargin } = getSubGraphTitleMargins(siteConfig);\n  label.attr(\n    \"transform\",\n    `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 - node.padding / 3 + (evaluate(siteConfig.flowchart.htmlLabels) ? 5 : 3) + subGraphTitleTopMargin})`\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst divider = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\nlet clusterElems = {};\nconst insertCluster = (elem, node) => {\n  log.trace(\"Inserting cluster\");\n  const shape = node.shape || \"rect\";\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = () => {\n  clusterElems = {};\n};\nconst recursiveRender = async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node && node.clusterNode) {\n        log.info(\"Cluster identified\", v, node.width, graph.node(v));\n        const o = await recursiveRender(\n          nodes,\n          node.graph,\n          diagramType,\n          id,\n          graph.node(v),\n          siteConfig\n        );\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n        setNodeElem(newEl, node);\n        log.warn(\"Recursive render complete \", newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n          log.info(findNonClusterChild(node.id, graph));\n          clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        } else {\n          log.info(\"Node - the non recursive path\", v, node.id, node);\n          await insertNode(nodes, graph.node(v), dir);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translating: \", clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n  graph.edges().forEach(function(e) {\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n  });\n  log.info(\"#############################################\");\n  log.info(\"###                Layout                 ###\");\n  log.info(\"#############################################\");\n  log.info(graph);\n  layout(graph);\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\n  let diff = 0;\n  const { subGraphTitleTotalMargin } = getSubGraphTitleMargins(siteConfig);\n  sortNodesByHierarchy(graph).forEach(function(v) {\n    const node = graph.node(v);\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n    log.info(\n      \"Position \" + v + \": (\" + node.x,\n      \",\" + node.y,\n      \") width: \",\n      node.width,\n      \" height: \",\n      node.height\n    );\n    if (node && node.clusterNode) {\n      node.y += subGraphTitleTotalMargin;\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        node.height += subGraphTitleTotalMargin;\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        node.y += subGraphTitleTotalMargin / 2;\n        positionNode(node);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    edge.points.forEach((point) => point.y += subGraphTitleTotalMargin / 2);\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramType, graph, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === \"group\") {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\nconst render = async (elem, graph, markers, diagramType, id) => {\n  insertMarkers(elem, markers, diagramType, id);\n  clear$2();\n  clear$3();\n  clear();\n  clear$1();\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after:\", JSON.stringify(graphlibJson.write(graph)));\n  const siteConfig = getConfig();\n  await recursiveRender(elem, graph, diagramType, id, void 0, siteConfig);\n};\nexport {\n  render as r\n};\n"],"names":["write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","graph","value","v","nodeValue","node","parent","e","edgeValue","edge","w","name","clusterDb","descendants","parents","isDescendant","id","ancestorId","l","trace","includes","copy","clusterId","newGraph","rootId","warn","children","push","forEach","length","data","info","setNode","setParent","debug","data2","edgeInCluster","setEdge","error","removeNode","extractDescendants","res","child","findNonClusterChild","_id","getAnchorId","externalConnections","extractor","depth","hasChildren","dir","rankdir","clusterData","clusterGraph","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","labelText","sorter","result","Object","assign","sorted","shapes","rect","siteConfig","shapeSvg","insert","attr","class","rect2","useHtmlLabels","flowchart","htmlLabels","label","text","labelType","style","labelStyle","appendChild","c","bbox","getBBox","div","dv","getBoundingClientRect","width","height","padding","halfPadding","diff","JSON","stringify","rx","ry","x","y","subGraphTitleTopMargin","rectBox","intersect","point","i","roundedWithTitle","classes","innerRect","append","noteGroup","divider","clusterElems","recursiveRender","async","_elem","diagramType","parentCluster","elem","clusters","edgePaths","edgeLabels","Promise","all","map","parse","o","newEl","u","s","subGraphTitleTotalMargin","sortNodesByHierarchy","p","shape","insertCluster","points","paths","n","type","render","markers","keys","nonClusterChild","removeEdge","specialId","domId","edge1","structuredClone","edge2","arrowTypeEnd","fromCluster","toCluster","adjustClustersAndEdges"],"sourceRoot":""}