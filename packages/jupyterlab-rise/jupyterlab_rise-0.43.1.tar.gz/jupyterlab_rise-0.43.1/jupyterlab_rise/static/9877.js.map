{"version":3,"file":"9877.bundle.js","mappings":"gRAkBA,MAAMA,EAMF,WAAAC,CAAYC,GACRC,KAAKC,IAAMF,CACf,CAIA,cAAIG,GACA,OAAQF,KAAKC,GACjB,CAIA,OAAAE,GACI,IAAKH,KAAKC,IACN,OAEJ,IAAIF,EAAKC,KAAKC,IACdD,KAAKC,IAAM,KACXF,GACJ,EAKJ,MAAMK,UAAqCP,EACvC,WAAAC,GACIO,SAASC,WACTN,KAAKO,UAAY,IAAI,EAAAC,OAAOR,KAChC,CAIA,YAAIS,GACA,OAAOT,KAAKO,SAChB,CAIA,OAAAJ,GACQH,KAAKE,aAGTG,MAAMF,UACNH,KAAKO,UAAUG,UAAKC,GACpB,EAAAH,OAAOI,UAAUZ,MACrB,EAKJ,MAAMa,EACF,WAAAf,GACIE,KAAKc,aAAc,EACnBd,KAAKe,OAAS,IAAIC,GACtB,CAIA,cAAId,GACA,OAAOF,KAAKc,WAChB,CAOA,OAAAX,GACQH,KAAKc,cAGTd,KAAKc,aAAc,EACnBd,KAAKe,OAAOE,SAAQC,IAChBA,EAAKf,SAAS,IAElBH,KAAKe,OAAOI,QAChB,CAQA,QAAAC,CAASF,GACL,OAAOlB,KAAKe,OAAOM,IAAIH,EAC3B,CASA,GAAAI,CAAIJ,GACAlB,KAAKe,OAAOO,IAAIJ,EACpB,CASA,MAAAK,CAAOL,GACHlB,KAAKe,OAAOS,OAAON,EACvB,CAIA,KAAAC,GACInB,KAAKe,OAAOI,OAChB,GAKJ,SAAWN,GAePA,EAAcY,KAPd,SAAcC,GACV,IAAIC,EAAM,IAAId,EACd,IAAK,MAAMK,KAAQQ,EACfC,EAAIL,IAAIJ,GAEZ,OAAOS,CACX,CAEH,CAhBD,CAgBGd,IAAkBA,EAAgB,CAAC,IAItC,MAAMe,UAAgCf,EAClC,WAAAf,GACIO,SAASC,WACTN,KAAKO,UAAY,IAAI,EAAAC,OAAOR,KAChC,CAIA,YAAIS,GACA,OAAOT,KAAKO,SAChB,CAOA,OAAAJ,GACQH,KAAKE,aAGTG,MAAMF,UACNH,KAAKO,UAAUG,UAAKC,GACpB,EAAAH,OAAOI,UAAUZ,MACrB,GAKJ,SAAW4B,GAePA,EAAwBH,KAPxB,SAAcC,GACV,IAAIC,EAAM,IAAIC,EACd,IAAK,MAAMV,KAAQQ,EACfC,EAAIL,IAAIJ,GAEZ,OAAOS,CACX,CAEH,CAhBD,CAgBGC,IAA4BA,EAA0B,CAAC,G","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lumino/disposable/dist/index.es6.js"],"sourcesContent":["import { Signal } from '@lumino/signaling';\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module disposable\n */\n/**\n * A disposable object which delegates to a callback function.\n */\nclass DisposableDelegate {\n    /**\n     * Construct a new disposable delegate.\n     *\n     * @param fn - The callback function to invoke on dispose.\n     */\n    constructor(fn) {\n        this._fn = fn;\n    }\n    /**\n     * Test whether the delegate has been disposed.\n     */\n    get isDisposed() {\n        return !this._fn;\n    }\n    /**\n     * Dispose of the delegate and invoke the callback function.\n     */\n    dispose() {\n        if (!this._fn) {\n            return;\n        }\n        let fn = this._fn;\n        this._fn = null;\n        fn();\n    }\n}\n/**\n * An observable disposable object which delegates to a callback function.\n */\nclass ObservableDisposableDelegate extends DisposableDelegate {\n    constructor() {\n        super(...arguments);\n        this._disposed = new Signal(this);\n    }\n    /**\n     * A signal emitted when the delegate is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Dispose of the delegate and invoke the callback function.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this._disposed.emit(undefined);\n        Signal.clearData(this);\n    }\n}\n/**\n * An object which manages a collection of disposable items.\n */\nclass DisposableSet {\n    constructor() {\n        this._isDisposed = false;\n        this._items = new Set();\n    }\n    /**\n     * Test whether the set has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the set and the items it contains.\n     *\n     * #### Notes\n     * Items are disposed in the order they are added to the set.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._items.forEach(item => {\n            item.dispose();\n        });\n        this._items.clear();\n    }\n    /**\n     * Test whether the set contains a specific item.\n     *\n     * @param item - The item of interest.\n     *\n     * @returns `true` if the set contains the item, `false` otherwise.\n     */\n    contains(item) {\n        return this._items.has(item);\n    }\n    /**\n     * Add a disposable item to the set.\n     *\n     * @param item - The item to add to the set.\n     *\n     * #### Notes\n     * If the item is already contained in the set, this is a no-op.\n     */\n    add(item) {\n        this._items.add(item);\n    }\n    /**\n     * Remove a disposable item from the set.\n     *\n     * @param item - The item to remove from the set.\n     *\n     * #### Notes\n     * If the item is not contained in the set, this is a no-op.\n     */\n    remove(item) {\n        this._items.delete(item);\n    }\n    /**\n     * Remove all items from the set.\n     */\n    clear() {\n        this._items.clear();\n    }\n}\n/**\n * The namespace for the `DisposableSet` class statics.\n */\n(function (DisposableSet) {\n    /**\n     * Create a disposable set from an iterable of items.\n     *\n     * @param items - The iterable object of interest.\n     *\n     * @returns A new disposable initialized with the given items.\n     */\n    function from(items) {\n        let set = new DisposableSet();\n        for (const item of items) {\n            set.add(item);\n        }\n        return set;\n    }\n    DisposableSet.from = from;\n})(DisposableSet || (DisposableSet = {}));\n/**\n * An observable object which manages a collection of disposable items.\n */\nclass ObservableDisposableSet extends DisposableSet {\n    constructor() {\n        super(...arguments);\n        this._disposed = new Signal(this);\n    }\n    /**\n     * A signal emitted when the set is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Dispose of the set and the items it contains.\n     *\n     * #### Notes\n     * Items are disposed in the order they are added to the set.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this._disposed.emit(undefined);\n        Signal.clearData(this);\n    }\n}\n/**\n * The namespace for the `ObservableDisposableSet` class statics.\n */\n(function (ObservableDisposableSet) {\n    /**\n     * Create an observable disposable set from an iterable of items.\n     *\n     * @param items - The iterable object of interest.\n     *\n     * @returns A new disposable initialized with the given items.\n     */\n    function from(items) {\n        let set = new ObservableDisposableSet();\n        for (const item of items) {\n            set.add(item);\n        }\n        return set;\n    }\n    ObservableDisposableSet.from = from;\n})(ObservableDisposableSet || (ObservableDisposableSet = {}));\n\nexport { DisposableDelegate, DisposableSet, ObservableDisposableDelegate, ObservableDisposableSet };\n//# sourceMappingURL=index.es6.js.map\n"],"names":["DisposableDelegate","constructor","fn","this","_fn","isDisposed","dispose","ObservableDisposableDelegate","super","arguments","_disposed","Signal","disposed","emit","undefined","clearData","DisposableSet","_isDisposed","_items","Set","forEach","item","clear","contains","has","add","remove","delete","from","items","set","ObservableDisposableSet"],"sourceRoot":""}