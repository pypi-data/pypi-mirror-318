{"version":3,"file":"9271.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/translation-extension/lib/index.js"],"sourcesContent":["/* ----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module translation-extension\n */\nimport { ILabShell, JupyterFrontEnd } from '@jupyterlab/application';\nimport { Dialog, ICommandPalette, showDialog } from '@jupyterlab/apputils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator, requestTranslationsAPI, TranslationManager } from '@jupyterlab/translation';\n/**\n * Translation plugins\n */\nconst PLUGIN_ID = '@jupyterlab/translation-extension:plugin';\nconst translator = {\n    id: '@jupyterlab/translation:translator',\n    description: 'Provides the application translation object.',\n    autoStart: true,\n    requires: [JupyterFrontEnd.IPaths, ISettingRegistry],\n    optional: [ILabShell],\n    provides: ITranslator,\n    activate: async (app, paths, settings, labShell) => {\n        const setting = await settings.load(PLUGIN_ID);\n        const currentLocale = setting.get('locale').composite;\n        let stringsPrefix = setting.get('stringsPrefix')\n            .composite;\n        const displayStringsPrefix = setting.get('displayStringsPrefix')\n            .composite;\n        stringsPrefix = displayStringsPrefix ? stringsPrefix : '';\n        const serverSettings = app.serviceManager.serverSettings;\n        const translationManager = new TranslationManager(paths.urls.translations, stringsPrefix, serverSettings);\n        await translationManager.fetch(currentLocale);\n        // Set translator to UI\n        if (labShell) {\n            labShell.translator = translationManager;\n        }\n        Dialog.translator = translationManager;\n        return translationManager;\n    }\n};\n/**\n * Initialization data for the extension.\n */\nconst langMenu = {\n    id: PLUGIN_ID,\n    description: 'Adds translation commands and settings.',\n    requires: [ISettingRegistry, ITranslator],\n    optional: [IMainMenu, ICommandPalette],\n    autoStart: true,\n    activate: (app, settings, translator, mainMenu, palette) => {\n        const trans = translator.load('jupyterlab');\n        const { commands } = app;\n        let currentLocale;\n        /**\n         * Load the settings for this extension\n         *\n         * @param setting Extension settings\n         */\n        function loadSetting(setting) {\n            // Read the settings and convert to the correct type\n            currentLocale = setting.get('locale').composite;\n        }\n        settings\n            .load(PLUGIN_ID)\n            .then(setting => {\n            var _a;\n            // Read the settings\n            loadSetting(setting);\n            // Ensure currentLocale is not 'default' which is not a valid language code\n            if (currentLocale !== 'default') {\n                document.documentElement.lang = (currentLocale !== null && currentLocale !== void 0 ? currentLocale : '').replace('_', '-');\n            }\n            else {\n                document.documentElement.lang = 'en-US';\n            }\n            // Listen for your plugin setting changes using Signal\n            setting.changed.connect(loadSetting);\n            // Create a languages menu\n            const languagesMenu = mainMenu\n                ? (_a = mainMenu.settingsMenu.items.find(item => {\n                    var _a;\n                    return item.type === 'submenu' &&\n                        ((_a = item.submenu) === null || _a === void 0 ? void 0 : _a.id) === 'jp-mainmenu-settings-language';\n                })) === null || _a === void 0 ? void 0 : _a.submenu\n                : null;\n            let command;\n            const serverSettings = app.serviceManager.serverSettings;\n            // Get list of available locales\n            requestTranslationsAPI('', '', {}, serverSettings)\n                .then(data => {\n                for (const locale in data['data']) {\n                    const value = data['data'][locale];\n                    const displayName = value.displayName;\n                    const nativeName = value.nativeName;\n                    const toggled = (currentLocale === 'default' ? 'en' : currentLocale) === locale;\n                    const label = toggled\n                        ? `${displayName}`\n                        : `${displayName} - ${nativeName}`;\n                    // Add a command per language\n                    command = `jupyterlab-translation:${locale}`;\n                    commands.addCommand(command, {\n                        label: label,\n                        caption: label,\n                        isEnabled: () => !toggled,\n                        isVisible: () => true,\n                        isToggled: () => toggled,\n                        execute: () => {\n                            return showDialog({\n                                title: trans.__('Change interface language?'),\n                                body: trans.__('After changing the interface language to %1, you will need to reload JupyterLab to see the changes.', label),\n                                buttons: [\n                                    Dialog.cancelButton({ label: trans.__('Cancel') }),\n                                    Dialog.okButton({ label: trans.__('Change and reload') })\n                                ]\n                            }).then(result => {\n                                if (result.button.accept) {\n                                    setting\n                                        .set('locale', locale)\n                                        .then(() => {\n                                        window.location.reload();\n                                    })\n                                        .catch(reason => {\n                                        console.error(reason);\n                                    });\n                                }\n                            });\n                        }\n                    });\n                    // Add the language command to the menu\n                    if (languagesMenu) {\n                        languagesMenu.addItem({\n                            command,\n                            args: {}\n                        });\n                    }\n                    if (palette) {\n                        palette.addItem({\n                            category: trans.__('Display Languages'),\n                            command\n                        });\n                    }\n                }\n            })\n                .catch(reason => {\n                console.error(`Available locales errored!\\n${reason}`);\n            });\n        })\n            .catch(reason => {\n            console.error(`The jupyterlab translation extension appears to be missing.\\n${reason}`);\n        });\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [translator, langMenu];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":["PLUGIN_ID","translator","id","description","autoStart","requires","JupyterFrontEnd","IPaths","ISettingRegistry","optional","ILabShell","provides","ITranslator","activate","async","app","paths","settings","labShell","setting","load","currentLocale","get","composite","stringsPrefix","serverSettings","serviceManager","translationManager","TranslationManager","urls","translations","fetch","Dialog","langMenu","IMainMenu","ICommandPalette","mainMenu","palette","trans","commands","loadSetting","then","_a","document","documentElement","lang","replace","changed","connect","languagesMenu","settingsMenu","items","find","item","type","submenu","command","requestTranslationsAPI","data","locale","value","displayName","nativeName","toggled","label","addCommand","caption","isEnabled","isVisible","isToggled","execute","showDialog","title","__","body","buttons","cancelButton","okButton","result","button","accept","set","window","location","reload","catch","reason","console","error","addItem","args","category"],"sourceRoot":""}