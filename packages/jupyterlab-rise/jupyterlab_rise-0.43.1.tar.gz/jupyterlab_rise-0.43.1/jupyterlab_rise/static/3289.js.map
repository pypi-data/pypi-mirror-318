{"version":3,"file":"3289.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/mermaid/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/mermaid/lib/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/mermaid/lib/markdown.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/mermaid/lib/mime.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n// documented upstream constants\nexport const MERMAID_MIME_TYPE = 'text/vnd.mermaid';\nexport const MERMAID_FILE_EXTENSIONS = ['.mmd', '.mermaid'];\n// mermaid themes\nexport const MERMAID_DEFAULT_THEME = 'default';\nexport const MERMAID_DARK_THEME = 'dark';\n// DOM\nexport const MERMAID_CLASS = 'jp-RenderedMermaid';\nexport const MERMAID_CODE_CLASS = 'mermaid';\nexport const WARNING_CLASS = 'jp-mod-warning';\nexport const DETAILS_CLASS = 'jp-RenderedMermaid-Details';\nexport const SUMMARY_CLASS = 'jp-RenderedMermaid-Summary';\n/**\n * The exported token for a mermaid manager\n */\nexport const IMermaidManager = new Token('@jupyterlab/mermaid:IMermaidManager', `a manager for rendering mermaid text-based diagrams`);\n/**\n * The exported token for a mermaid manager\n */\nexport const IMermaidMarkdown = new Token('@jupyterlab/mermaid:IMermaidMarkdown', `a manager for rendering mermaid text-based diagrams in markdown fenced code blocks`);\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { LruCache } from '@jupyterlab/coreutils';\nimport { DETAILS_CLASS, MERMAID_CLASS, MERMAID_CODE_CLASS, MERMAID_DARK_THEME, MERMAID_DEFAULT_THEME, SUMMARY_CLASS, WARNING_CLASS } from './tokens';\n/**\n * A mermaid diagram manager with cache.\n */\nexport class MermaidManager {\n    constructor(options = {}) {\n        this._diagrams = new LruCache({ maxSize: options.maxCacheSize || null });\n        // handle reacting to themes\n        if (options.themes) {\n            Private.initThemes(options.themes || null);\n            options.themes.themeChanged.connect(this.initialize, this);\n        }\n    }\n    /**\n     * Post-process to ensure mermaid diagrams contain only valid SVG and XHTML.\n     */\n    static cleanMermaidSvg(svg) {\n        return svg.replace(Private.RE_VOID_ELEMENT, Private.replaceVoidElement);\n    }\n    /**\n     * Handle (re)-initializing mermaid based on external values.\n     */\n    initialize() {\n        this._diagrams.clear();\n        Private.initMermaid();\n    }\n    /**\n     * Get the underlying, potentially un-initialized mermaid module.\n     */\n    async getMermaid() {\n        return await Private.ensureMermaid();\n    }\n    /**\n     * Get the version of the currently-loaded mermaid module\n     */\n    getMermaidVersion() {\n        return Private.version();\n    }\n    /**\n     * Get a pre-cached mermaid figure.\n     *\n     * This primarily exists for the needs of `marked`, which supports async node\n     * visitors, but not async rendering.\n     */\n    getCachedFigure(text) {\n        return this._diagrams.get(text);\n    }\n    /**\n     * Attempt a raw rendering of mermaid to an SVG string, extracting some metadata.\n     */\n    async renderSvg(text) {\n        const _mermaid = await this.getMermaid();\n        const id = `jp-mermaid-${Private.nextMermaidId()}`;\n        // create temporary element into which to render\n        const el = document.createElement('div');\n        document.body.appendChild(el);\n        try {\n            let { svg } = await _mermaid.render(id, text, el);\n            svg = MermaidManager.cleanMermaidSvg(svg);\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(svg, 'image/svg+xml');\n            const info = { text, svg };\n            const svgEl = doc.querySelector('svg');\n            const { maxWidth } = (svgEl === null || svgEl === void 0 ? void 0 : svgEl.style) || {};\n            info.width = maxWidth ? parseFloat(maxWidth) : null;\n            const firstTitle = doc.querySelector('title');\n            const firstDesc = doc.querySelector('desc');\n            if (firstTitle) {\n                info.accessibleTitle = firstTitle.textContent;\n            }\n            if (firstDesc) {\n                info.accessibleDescription = firstDesc.textContent;\n            }\n            return info;\n        }\n        finally {\n            el.remove();\n        }\n    }\n    /**\n     * Provide and cache a fully-rendered element, checking the cache first.\n     */\n    async renderFigure(text) {\n        // bail if already cached\n        let output = this._diagrams.get(text);\n        if (output != null) {\n            return output;\n        }\n        let className = MERMAID_CLASS;\n        let result = null;\n        // the element that will be returned\n        output = document.createElement('div');\n        output.className = className;\n        try {\n            const response = await this.renderSvg(text);\n            result = this.makeMermaidFigure(response);\n        }\n        catch (err) {\n            output.classList.add(WARNING_CLASS);\n            result = await this.makeMermaidError(text);\n        }\n        let version = this.getMermaidVersion();\n        if (version) {\n            result.dataset.jpMermaidVersion = version;\n        }\n        output.appendChild(result);\n        // update the cache for use when rendering synchronously\n        this._diagrams.set(text, output);\n        return output;\n    }\n    /**\n     * Provide a code block with the mermaid source.\n     */\n    makeMermaidCode(text) {\n        // append the source\n        const pre = document.createElement('pre');\n        const code = document.createElement('code');\n        code.innerText = text;\n        pre.appendChild(code);\n        code.className = MERMAID_CODE_CLASS;\n        code.textContent = text;\n        return pre;\n    }\n    /**\n     * Get the parser message element from a failed parse.\n     *\n     * This doesn't do much of anything if the text is successfully parsed.\n     */\n    async makeMermaidError(text) {\n        const _mermaid = await this.getMermaid();\n        let errorMessage = '';\n        try {\n            await _mermaid.parse(text);\n        }\n        catch (err) {\n            errorMessage = `${err}`;\n        }\n        const result = document.createElement('details');\n        result.className = DETAILS_CLASS;\n        const summary = document.createElement('summary');\n        summary.className = SUMMARY_CLASS;\n        summary.appendChild(this.makeMermaidCode(text));\n        result.appendChild(summary);\n        const warning = document.createElement('pre');\n        warning.innerText = errorMessage;\n        result.appendChild(warning);\n        return result;\n    }\n    /**\n     * Extract extra attributes to add to a generated figure.\n     */\n    makeMermaidFigure(info) {\n        const figure = document.createElement('figure');\n        const img = document.createElement('img');\n        figure.appendChild(img);\n        img.setAttribute('src', `data:image/svg+xml,${encodeURIComponent(info.svg)}`);\n        // add dimension information\n        if (info.width) {\n            img.width = info.width;\n        }\n        // add accessible alt title\n        if (info.accessibleTitle) {\n            img.setAttribute('alt', info.accessibleTitle);\n        }\n        figure.appendChild(this.makeMermaidCode(info.text));\n        // add accessible caption, with fallback to raw mermaid source\n        if (info.accessibleDescription) {\n            const caption = document.createElement('figcaption');\n            caption.className = 'sr-only';\n            caption.textContent = info.accessibleDescription;\n            figure.appendChild(caption);\n        }\n        return figure;\n    }\n}\n/**\n * A namespace for global, private mermaid data.\n */\nvar Private;\n(function (Private) {\n    let _themes = null;\n    let _mermaid = null;\n    let _loading = null;\n    let _nextMermaidId = 0;\n    let _version = null;\n    /**\n     * Cache a reference to the theme manager.\n     */\n    function initThemes(themes) {\n        _themes = themes;\n    }\n    Private.initThemes = initThemes;\n    /**\n     * Get the version of mermaid used for rendering.\n     */\n    function version() {\n        return _version;\n    }\n    Private.version = version;\n    /**\n     * (Re-)initialize mermaid with lab-specific theme information\n     */\n    function initMermaid() {\n        if (!_mermaid) {\n            return false;\n        }\n        let theme = MERMAID_DEFAULT_THEME;\n        if (_themes) {\n            const jpTheme = _themes.theme;\n            theme =\n                jpTheme && _themes.isLight(jpTheme)\n                    ? MERMAID_DEFAULT_THEME\n                    : MERMAID_DARK_THEME;\n        }\n        const fontFamily = window\n            .getComputedStyle(document.body)\n            .getPropertyValue('--jp-ui-font-family');\n        _mermaid.mermaidAPI.globalReset();\n        _mermaid.mermaidAPI.initialize({\n            theme,\n            fontFamily,\n            securityLevel: 'strict',\n            maxTextSize: 100000,\n            maxEdges: 100000,\n            startOnLoad: false\n        });\n        return true;\n    }\n    Private.initMermaid = initMermaid;\n    /**\n     * Determine whether mermaid has been loaded yet.\n     */\n    function getMermaid() {\n        return _mermaid;\n    }\n    Private.getMermaid = getMermaid;\n    /**\n     * Provide a globally-unique, but unstable, ID for disambiguation.\n     */\n    function nextMermaidId() {\n        return _nextMermaidId++;\n    }\n    Private.nextMermaidId = nextMermaidId;\n    /**\n     * Ensure mermaid has been lazily loaded once, initialized, and cached.\n     */\n    async function ensureMermaid() {\n        if (_mermaid != null) {\n            return _mermaid;\n        }\n        if (_loading) {\n            return _loading.promise;\n        }\n        _loading = new PromiseDelegate();\n        _version = (await import('mermaid/package.json')).version;\n        _mermaid = (await import('mermaid')).default;\n        initMermaid();\n        _loading.resolve(_mermaid);\n        return _mermaid;\n    }\n    Private.ensureMermaid = ensureMermaid;\n    /**\n     * A regular expression for all void elements, which may include attributes and\n     * a slash.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Glossary/Void_element\n     *\n     * Of these, only `<br>` is generated by Mermaid in place of `\\n`,\n     * but _any_ \"malformed\" tag will break the SVG rendering entirely.\n     */\n    Private.RE_VOID_ELEMENT = /<\\s*(area|base|br|col|embed|hr|img|input|link|meta|param|source|track|wbr)\\s*([^>]*?)\\s*>/gi;\n    /**\n     * Ensure a void element is closed with a slash, preserving any attributes.\n     */\n    function replaceVoidElement(match, tag, rest) {\n        rest = rest.trim();\n        if (!rest.endsWith('/')) {\n            rest = `${rest} /`;\n        }\n        return `<${tag} ${rest}>`;\n    }\n    Private.replaceVoidElement = replaceVoidElement;\n})(Private || (Private = {}));\n//# sourceMappingURL=manager.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * An implementation of mermaid fenced code blocks in markdown.\n */\nexport class MermaidMarkdown {\n    constructor(options) {\n        this.languages = ['mermaid'];\n        this.rank = 100;\n        this._mermaid = options.mermaid;\n    }\n    /**\n     * Pre-parse and cache the rendered text.\n     */\n    async walk(text) {\n        await this._mermaid.renderFigure(text);\n    }\n    /**\n     * Render the diagram.\n     */\n    render(text) {\n        // handle pre-cached mermaid figures\n        let cachedFigure = this._mermaid.getCachedFigure(text);\n        if (cachedFigure) {\n            return cachedFigure.outerHTML;\n        }\n        return null;\n    }\n}\n//# sourceMappingURL=markdown.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module mermaid-extension\n */\nimport { MERMAID_CLASS, MERMAID_MIME_TYPE, WARNING_CLASS } from './tokens';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { Widget } from '@lumino/widgets';\nconst SVG_MIME = 'image/svg+xml';\n/**\n * A widget for rendering mermaid text-based diagrams, for usage with rendermime.\n */\nexport class RenderedMermaid extends Widget {\n    /**\n     * Create a new widget for rendering Vega/Vega-Lite.\n     */\n    constructor(options) {\n        super();\n        this._lastRendered = null;\n        this._mimeType = options.mimeType;\n        this.addClass(MERMAID_CLASS);\n    }\n    static set manager(manager) {\n        if (RenderedMermaid._manager) {\n            console.warn('Mermaid manager may only be set once, and is already set.');\n            return;\n        }\n        RenderedMermaid._manager = manager;\n        RenderedMermaid._managerReady.resolve(manager);\n    }\n    /**\n     * Render mermaid text-based diagrams into this widget's node.\n     */\n    async renderModel(model) {\n        const manager = await RenderedMermaid._managerReady.promise;\n        const text = model.data[this._mimeType];\n        if (text == null || text === this._lastRendered) {\n            return;\n        }\n        this._lastRendered = text;\n        // get a div containing a figure or parser message\n        const figure = await manager.renderFigure(text);\n        if (figure.classList.contains(WARNING_CLASS)) {\n            this.node.classList.add(WARNING_CLASS);\n        }\n        else {\n            this.node.classList.remove(WARNING_CLASS);\n        }\n        if (!figure.firstChild) {\n            return;\n        }\n        if (this.node.innerHTML !== figure.innerHTML) {\n            this.node.innerHTML = figure.innerHTML;\n        }\n        // capture the version of mermaid used\n        const version = manager.getMermaidVersion();\n        const mermaidMetadata = {\n            ...(model.metadata[MERMAID_MIME_TYPE] || {}),\n            version\n        };\n        const metadata = {\n            ...model.metadata,\n            [MERMAID_MIME_TYPE]: mermaidMetadata\n        };\n        // if available, set the fully-rendered SVG\n        const img = figure.querySelector('img');\n        if (img) {\n            const svg = decodeURIComponent(img.src.split(',')[1]);\n            const oldSvg = model.data[SVG_MIME];\n            if (svg !== oldSvg) {\n                model.setData({\n                    data: { ...model.data, [SVG_MIME]: svg },\n                    metadata\n                });\n            }\n        }\n        else {\n            const dataWithoutSvg = { ...model.data };\n            delete dataWithoutSvg[SVG_MIME];\n            model.setData({ data: dataWithoutSvg, metadata });\n        }\n    }\n}\nRenderedMermaid._manager = null;\nRenderedMermaid._managerReady = new PromiseDelegate();\n/**\n * A mime renderer factory for mermaid text-based diagrams.\n */\nexport const rendererFactory = {\n    safe: true,\n    mimeTypes: [MERMAID_MIME_TYPE],\n    createRenderer: options => new RenderedMermaid(options)\n};\n//# sourceMappingURL=mime.js.map"],"names":["MERMAID_MIME_TYPE","MERMAID_FILE_EXTENSIONS","MERMAID_DEFAULT_THEME","MERMAID_DARK_THEME","MERMAID_CLASS","MERMAID_CODE_CLASS","WARNING_CLASS","DETAILS_CLASS","SUMMARY_CLASS","IMermaidManager","Token","IMermaidMarkdown","MermaidManager","constructor","options","this","_diagrams","LruCache","maxSize","maxCacheSize","themes","Private","initThemes","themeChanged","connect","initialize","cleanMermaidSvg","svg","replace","RE_VOID_ELEMENT","replaceVoidElement","clear","initMermaid","getMermaid","ensureMermaid","getMermaidVersion","version","getCachedFigure","text","get","renderSvg","_mermaid","id","nextMermaidId","el","document","createElement","body","appendChild","render","doc","DOMParser","parseFromString","info","svgEl","querySelector","maxWidth","style","width","parseFloat","firstTitle","firstDesc","accessibleTitle","textContent","accessibleDescription","remove","renderFigure","output","className","result","response","makeMermaidFigure","err","classList","add","makeMermaidError","dataset","jpMermaidVersion","set","makeMermaidCode","pre","code","innerText","errorMessage","parse","summary","warning","figure","img","setAttribute","encodeURIComponent","caption","_themes","_loading","_nextMermaidId","_version","theme","jpTheme","isLight","fontFamily","window","getComputedStyle","getPropertyValue","mermaidAPI","globalReset","securityLevel","maxTextSize","maxEdges","startOnLoad","async","promise","PromiseDelegate","default","resolve","match","tag","rest","trim","endsWith","MermaidMarkdown","languages","rank","mermaid","walk","cachedFigure","outerHTML","SVG_MIME","RenderedMermaid","Widget","super","_lastRendered","_mimeType","mimeType","addClass","manager","_manager","console","warn","_managerReady","renderModel","model","data","contains","node","firstChild","innerHTML","mermaidMetadata","metadata","decodeURIComponent","src","split","setData","dataWithoutSvg","rendererFactory","safe","mimeTypes","createRenderer"],"sourceRoot":""}