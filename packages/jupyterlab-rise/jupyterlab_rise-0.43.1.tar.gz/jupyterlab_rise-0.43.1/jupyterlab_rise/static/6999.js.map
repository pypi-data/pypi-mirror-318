{"version":3,"file":"6999.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror-extension/lib/commands.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror-extension/lib/services.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror-extension/lib/index.js"],"sourcesContent":["/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { deleteLine, toggleBlockComment, toggleComment } from '@codemirror/commands';\nimport { selectNextOccurrence } from '@codemirror/search';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\n/**\n * Identifiers of commands.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.deleteLine = 'codemirror:delete-line';\n    CommandIDs.toggleBlockComment = 'codemirror:toggle-block-comment';\n    CommandIDs.toggleComment = 'codemirror:toggle-comment';\n    CommandIDs.selectNextOccurrence = 'codemirror:select-next-occurrence';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Selector for CodeMirror editor with `cmView` attribute.\n */\nconst CODE_MIRROR_SELECTOR = '.cm-content';\n/**\n * The editor commands.\n */\nexport const commandsPlugin = {\n    id: '@jupyterlab/codemirror-extension:commands',\n    description: 'Registers commands acting on selected/active CodeMirror editor.',\n    autoStart: true,\n    optional: [ITranslator],\n    activate: (app, translator) => {\n        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const isCodeMirror = (node) => node.classList.contains(CODE_MIRROR_SELECTOR);\n        const findEditorView = () => {\n            var _a, _b;\n            const node = (_a = app.contextMenuHitTest(isCodeMirror)) !== null && _a !== void 0 ? _a : (_b = document.activeElement) === null || _b === void 0 ? void 0 : _b.closest(CODE_MIRROR_SELECTOR);\n            if (!node) {\n                return;\n            }\n            if (!('cmView' in node)) {\n                return;\n            }\n            return node.cmView.view;\n        };\n        const isEnabled = () => {\n            return !!findEditorView();\n        };\n        app.commands.addCommand(CommandIDs.deleteLine, {\n            label: trans.__('Delete the current line'),\n            execute: () => {\n                const view = findEditorView();\n                if (!view) {\n                    return;\n                }\n                deleteLine(view);\n            },\n            isEnabled\n        });\n        app.commands.addCommand(CommandIDs.toggleBlockComment, {\n            label: trans.__('Toggle Block Comment'),\n            caption: trans.__('Toggles block comments in languages which support it (e.g. C, JavaScript)'),\n            execute: () => {\n                const view = findEditorView();\n                if (!view) {\n                    return;\n                }\n                toggleBlockComment(view);\n            },\n            isEnabled\n        });\n        app.commands.addCommand(CommandIDs.toggleComment, {\n            label: trans.__('Toggle Comment'),\n            execute: () => {\n                const view = findEditorView();\n                if (!view) {\n                    return;\n                }\n                toggleComment(view);\n            },\n            isEnabled\n        });\n        app.commands.addCommand(CommandIDs.selectNextOccurrence, {\n            label: trans.__('Select Next Occurrence'),\n            execute: () => {\n                const view = findEditorView();\n                if (!view) {\n                    return;\n                }\n                selectNextOccurrence(view);\n            },\n            isEnabled\n        });\n    }\n};\n//# sourceMappingURL=commands.js.map","/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { LanguageSupport, StreamLanguage } from '@codemirror/language';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { CodeMirrorEditorFactory, CodeMirrorMimeTypeService, EditorExtensionRegistry, EditorLanguageRegistry, EditorThemeRegistry, IEditorExtensionRegistry, IEditorLanguageRegistry, IEditorThemeRegistry, parseMathIPython, pythonBuiltin, ybinding } from '@jupyterlab/codemirror';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { FormComponent, IFormRendererRegistry } from '@jupyterlab/ui-components';\nimport { JSONExt } from '@lumino/coreutils';\nimport validatorAjv8 from '@rjsf/validator-ajv8';\nimport React from 'react';\n/**\n * CodeMirror settings plugin ID\n */\nconst SETTINGS_ID = '@jupyterlab/codemirror-extension:plugin';\n/**\n * CodeMirror language registry provider.\n */\nexport const languagePlugin = {\n    id: '@jupyterlab/codemirror-extension:languages',\n    description: 'Provides the CodeMirror languages registry.',\n    provides: IEditorLanguageRegistry,\n    optional: [ITranslator],\n    activate: (app, translator) => {\n        const languages = new EditorLanguageRegistry();\n        // Register default languages\n        for (const language of EditorLanguageRegistry.getDefaultLanguages(translator)) {\n            languages.addLanguage(language);\n        }\n        // Add Jupyter Markdown flavor here to support\n        // code block highlighting.\n        languages.addLanguage({\n            name: 'ipythongfm',\n            mime: 'text/x-ipythongfm',\n            load: async () => {\n                const [m, py, tex] = await Promise.all([\n                    import('@codemirror/lang-markdown'),\n                    import('@codemirror/lang-python'),\n                    import('@codemirror/legacy-modes/mode/stex')\n                ]);\n                const mdlang = m.markdown({\n                    base: m.markdownLanguage,\n                    codeLanguages: (info) => languages.findBest(info),\n                    extensions: [\n                        parseMathIPython(StreamLanguage.define(tex.stexMath).parser)\n                    ]\n                });\n                return new LanguageSupport(mdlang.language, [\n                    mdlang.support,\n                    pythonBuiltin(py.pythonLanguage)\n                ]);\n            }\n        });\n        return languages;\n    }\n};\n/**\n * CodeMirror theme registry provider.\n */\nexport const themePlugin = {\n    id: '@jupyterlab/codemirror-extension:themes',\n    description: 'Provides the CodeMirror theme registry',\n    provides: IEditorThemeRegistry,\n    optional: [ITranslator],\n    activate: (app, translator) => {\n        const themes = new EditorThemeRegistry();\n        // Register default themes\n        for (const theme of EditorThemeRegistry.getDefaultThemes(translator)) {\n            themes.addTheme(theme);\n        }\n        return themes;\n    }\n};\n/**\n * CodeMirror editor extensions registry provider.\n */\nexport const extensionPlugin = {\n    id: '@jupyterlab/codemirror-extension:extensions',\n    description: 'Provides the CodeMirror extension factory registry.',\n    provides: IEditorExtensionRegistry,\n    requires: [IEditorThemeRegistry],\n    optional: [ITranslator, ISettingRegistry, IFormRendererRegistry],\n    activate: (app, themes, translator, settingRegistry, formRegistry) => {\n        const registry = new EditorExtensionRegistry();\n        // Register default extensions\n        for (const extensionFactory of EditorExtensionRegistry.getDefaultExtensions({\n            themes,\n            translator\n        })) {\n            registry.addExtension(extensionFactory);\n        }\n        if (settingRegistry) {\n            const updateSettings = (settings) => {\n                var _a;\n                registry.baseConfiguration =\n                    (_a = settings.get('defaultConfig').composite) !== null && _a !== void 0 ? _a : {};\n            };\n            void Promise.all([\n                settingRegistry.load(SETTINGS_ID),\n                app.restored\n            ]).then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect(updateSettings);\n            });\n            formRegistry === null || formRegistry === void 0 ? void 0 : formRegistry.addRenderer(`${SETTINGS_ID}.defaultConfig`, {\n                fieldRenderer: (props) => {\n                    const properties = React.useMemo(() => registry.settingsSchema, []);\n                    const defaultFormData = {};\n                    // Only provide customizable options\n                    for (const [key, value] of Object.entries(registry.defaultConfiguration)) {\n                        if (typeof properties[key] !== 'undefined') {\n                            defaultFormData[key] = value;\n                        }\n                    }\n                    return (React.createElement(\"div\", { className: \"jp-FormGroup-contentNormal\" },\n                        React.createElement(\"h3\", { className: \"jp-FormGroup-fieldLabel jp-FormGroup-contentItem\" }, props.schema.title),\n                        props.schema.description && (React.createElement(\"div\", { className: \"jp-FormGroup-description\" }, props.schema.description)),\n                        React.createElement(FormComponent, { schema: {\n                                title: props.schema.title,\n                                description: props.schema.description,\n                                type: 'object',\n                                properties,\n                                additionalProperties: false\n                            }, validator: validatorAjv8, formData: { ...defaultFormData, ...props.formData }, formContext: { defaultFormData }, liveValidate: true, onChange: e => {\n                                var _a;\n                                // Only save non-default values\n                                const nonDefault = {};\n                                for (const [property, value] of Object.entries((_a = e.formData) !== null && _a !== void 0 ? _a : {})) {\n                                    const default_ = defaultFormData[property];\n                                    if (default_ === undefined ||\n                                        !JSONExt.deepEqual(value, default_)) {\n                                        nonDefault[property] = value;\n                                    }\n                                }\n                                props.onChange(nonDefault);\n                            }, tagName: \"div\", translator: translator !== null && translator !== void 0 ? translator : nullTranslator })));\n                }\n            });\n        }\n        return registry;\n    }\n};\n/**\n * CodeMirror shared model binding provider.\n */\nexport const bindingPlugin = {\n    id: '@jupyterlab/codemirror-extension:binding',\n    description: 'Register the CodeMirror extension factory binding the editor and the shared model.',\n    autoStart: true,\n    requires: [IEditorExtensionRegistry],\n    activate: (app, extensions) => {\n        extensions.addExtension({\n            name: 'shared-model-binding',\n            factory: options => {\n                var _a;\n                const sharedModel = options.model.sharedModel;\n                return EditorExtensionRegistry.createImmutableExtension(ybinding({\n                    ytext: sharedModel.ysource,\n                    undoManager: (_a = sharedModel.undoManager) !== null && _a !== void 0 ? _a : undefined\n                }));\n            }\n        });\n    }\n};\n/**\n * The editor services.\n */\nexport const servicesPlugin = {\n    id: '@jupyterlab/codemirror-extension:services',\n    description: 'Provides the service to instantiate CodeMirror editors.',\n    provides: IEditorServices,\n    requires: [IEditorLanguageRegistry, IEditorExtensionRegistry],\n    optional: [ITranslator],\n    activate: (app, languages, extensions, translator) => {\n        const factory = new CodeMirrorEditorFactory({\n            extensions,\n            languages,\n            translator: translator !== null && translator !== void 0 ? translator : nullTranslator\n        });\n        return {\n            factoryService: factory,\n            mimeTypeService: new CodeMirrorMimeTypeService(languages)\n        };\n    }\n};\n//# sourceMappingURL=services.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module codemirror-extension\n */\nimport { ILabShell } from '@jupyterlab/application';\nimport { IPositionModel, LineCol } from '@jupyterlab/codeeditor';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { commandsPlugin } from './commands';\nimport { bindingPlugin, extensionPlugin, languagePlugin, servicesPlugin, themePlugin } from './services';\n/**\n * A plugin providing a line/column status item to the application.\n */\nexport const lineColItem = {\n    id: '@jupyterlab/codemirror-extension:line-col-status',\n    description: 'Provides the code editor cursor position model.',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ILabShell, IStatusBar],\n    provides: IPositionModel,\n    activate: (app, translator, labShell, statusBar) => {\n        const item = new LineCol(translator);\n        const providers = new Set();\n        if (statusBar) {\n            // Add the status item to the status bar.\n            statusBar.registerStatusItem(lineColItem.id, {\n                priority: 1,\n                item,\n                align: 'right',\n                rank: 2,\n                isActive: () => !!item.model.editor\n            });\n        }\n        const addEditorProvider = (provider) => {\n            providers.add(provider);\n            if (app.shell.currentWidget) {\n                updateEditor(app.shell, {\n                    newValue: app.shell.currentWidget,\n                    oldValue: null\n                });\n            }\n        };\n        const update = () => {\n            updateEditor(app.shell, {\n                oldValue: app.shell.currentWidget,\n                newValue: app.shell.currentWidget\n            });\n        };\n        function updateEditor(shell, changes) {\n            Promise.all([...providers].map(provider => provider(changes.newValue)))\n                .then(editors => {\n                var _a;\n                item.model.editor =\n                    (_a = editors.filter(editor => editor !== null)[0]) !== null && _a !== void 0 ? _a : null;\n            })\n                .catch(reason => {\n                console.error('Get editors', reason);\n            });\n        }\n        if (labShell) {\n            labShell.currentChanged.connect(updateEditor);\n        }\n        return { addEditorProvider, update };\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    commandsPlugin,\n    languagePlugin,\n    themePlugin,\n    bindingPlugin,\n    extensionPlugin,\n    servicesPlugin,\n    lineColItem\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":["CommandIDs","deleteLine","toggleBlockComment","toggleComment","selectNextOccurrence","CODE_MIRROR_SELECTOR","commandsPlugin","id","description","autoStart","optional","ITranslator","activate","app","translator","trans","nullTranslator","load","isCodeMirror","node","classList","contains","findEditorView","_a","_b","contextMenuHitTest","document","activeElement","closest","cmView","view","isEnabled","commands","addCommand","label","__","execute","caption","SETTINGS_ID","languagePlugin","provides","IEditorLanguageRegistry","languages","EditorLanguageRegistry","language","getDefaultLanguages","addLanguage","name","mime","async","m","py","tex","Promise","all","mdlang","markdown","base","markdownLanguage","codeLanguages","info","findBest","extensions","parseMathIPython","StreamLanguage","define","stexMath","parser","LanguageSupport","support","pythonBuiltin","pythonLanguage","themePlugin","IEditorThemeRegistry","themes","EditorThemeRegistry","theme","getDefaultThemes","addTheme","extensionPlugin","IEditorExtensionRegistry","requires","ISettingRegistry","IFormRendererRegistry","settingRegistry","formRegistry","registry","EditorExtensionRegistry","extensionFactory","getDefaultExtensions","addExtension","updateSettings","settings","baseConfiguration","get","composite","restored","then","changed","connect","addRenderer","fieldRenderer","props","properties","settingsSchema","defaultFormData","key","value","Object","entries","defaultConfiguration","className","schema","title","FormComponent","type","additionalProperties","validator","formData","formContext","liveValidate","onChange","e","nonDefault","property","default_","undefined","JSONExt","deepEqual","tagName","bindingPlugin","factory","options","sharedModel","model","createImmutableExtension","ybinding","ytext","ysource","undoManager","servicesPlugin","IEditorServices","factoryService","CodeMirrorEditorFactory","mimeTypeService","CodeMirrorMimeTypeService","lineColItem","ILabShell","IStatusBar","IPositionModel","labShell","statusBar","item","LineCol","providers","Set","updateEditor","shell","changes","map","provider","newValue","editors","editor","filter","catch","reason","console","error","registerStatusItem","priority","align","rank","isActive","currentChanged","addEditorProvider","add","currentWidget","oldValue","update"],"sourceRoot":""}