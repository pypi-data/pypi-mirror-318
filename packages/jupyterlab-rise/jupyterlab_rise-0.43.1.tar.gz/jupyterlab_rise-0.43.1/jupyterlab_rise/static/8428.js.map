{"version":3,"file":"8428.bundle.js","mappings":"iIAEA,IAAIA,EAAMC,OAAOC,UAAUC,eAU3B,SAASC,EAAOC,GACd,IACE,OAAOC,mBAAmBD,EAAME,QAAQ,MAAO,KACjD,CAAE,MAAOC,GACP,OAAO,IACT,CACF,CASA,SAASC,EAAOJ,GACd,IACE,OAAOK,mBAAmBL,EAC5B,CAAE,MAAOG,GACP,OAAO,IACT,CACF,CAmFAG,EAAQC,UA1CR,SAAwBC,EAAKC,GAC3BA,EAASA,GAAU,GAEnB,IACIC,EACAC,EAFAC,EAAQ,GASZ,IAAKD,IAFD,iBAAoBF,IAAQA,EAAS,KAE7BD,EACV,GAAIb,EAAIkB,KAAKL,EAAKG,GAAM,CAkBtB,IAjBAD,EAAQF,EAAIG,KAMGD,UAAqCI,MAAMJ,KACxDA,EAAQ,IAGVC,EAAMP,EAAOO,GACbD,EAAQN,EAAOM,GAMH,OAARC,GAA0B,OAAVD,EAAgB,SACpCE,EAAMG,KAAKJ,EAAK,IAAKD,EACvB,CAGF,OAAOE,EAAMI,OAASP,EAASG,EAAMK,KAAK,KAAO,EACnD,EAMAX,EAAQY,MA3ER,SAAqBC,GAKnB,IAJA,IAEIC,EAFAC,EAAS,uBACTC,EAAS,CAAC,EAGPF,EAAOC,EAAOE,KAAKJ,IAAQ,CAChC,IAAIR,EAAMZ,EAAOqB,EAAK,IAClBV,EAAQX,EAAOqB,EAAK,IAUZ,OAART,GAA0B,OAAVD,GAAkBC,KAAOW,IAC7CA,EAAOX,GAAOD,EAChB,CAEA,OAAOY,CACT,C,YCrDAE,EAAOlB,QAAU,SAAkBmB,EAAMC,GAIvC,GAHAA,EAAWA,EAASC,MAAM,KAAK,KAC/BF,GAAQA,GAEG,OAAO,EAElB,OAAQC,GACN,IAAK,OACL,IAAK,KACL,OAAgB,KAATD,EAEP,IAAK,QACL,IAAK,MACL,OAAgB,MAATA,EAEP,IAAK,MACL,OAAgB,KAATA,EAEP,IAAK,SACL,OAAgB,KAATA,EAEP,IAAK,OACL,OAAO,EAGT,OAAgB,IAATA,CACT,C,kBCnCA,IAAIG,EAAW,EAAQ,OACnBC,EAAK,EAAQ,OACbC,EAAsB,6EACtBC,EAAS,YACTC,EAAU,gCACVP,EAAO,QACPQ,EAAa,mDACbC,EAAqB,aAUzB,SAASC,EAASC,GAChB,OAAQA,GAAY,IAAIC,WAAWnC,QAAQ4B,EAAqB,GAClE,CAcA,IAAIQ,EAAQ,CACV,CAAC,IAAK,QACN,CAAC,IAAK,SACN,SAAkBC,EAASC,GACzB,OAAOC,EAAUD,EAAId,UAAYa,EAAQrC,QAAQ,MAAO,KAAOqC,CACjE,EACA,CAAC,IAAK,YACN,CAAC,IAAK,OAAQ,GACd,CAACG,IAAK,YAAQC,EAAW,EAAG,GAC5B,CAAC,UAAW,YAAQA,EAAW,GAC/B,CAACD,IAAK,gBAAYC,EAAW,EAAG,IAW9BC,EAAS,CAAEC,KAAM,EAAG1B,MAAO,GAc/B,SAAS2B,EAAUC,GACjB,IAYIpC,EALAqC,GALkB,oBAAXC,OAAoCA,YACpB,IAAX,EAAAC,EAAoC,EAAAA,EAC3B,oBAATC,KAAkCA,KACjC,CAAC,GAEOH,UAAY,CAAC,EAGlCI,EAAmB,CAAC,EACpBC,SAHJN,EAAMA,GAAOC,GAMb,GAAI,UAAYD,EAAIrB,SAClB0B,EAAmB,IAAIE,EAAIC,SAASR,EAAIS,UAAW,CAAC,QAC/C,GAAI,WAAaH,EAEtB,IAAK1C,KADLyC,EAAmB,IAAIE,EAAIP,EAAK,CAAC,GACrBH,SAAeQ,EAAiBzC,QACvC,GAAI,WAAa0C,EAAM,CAC5B,IAAK1C,KAAOoC,EACNpC,KAAOiC,IACXQ,EAAiBzC,GAAOoC,EAAIpC,SAGGgC,IAA7BS,EAAiBpB,UACnBoB,EAAiBpB,QAAUA,EAAQyB,KAAKV,EAAIW,MAEhD,CAEA,OAAON,CACT,CASA,SAASX,EAAUkB,GACjB,MACa,UAAXA,GACW,SAAXA,GACW,UAAXA,GACW,WAAXA,GACW,QAAXA,GACW,SAAXA,CAEJ,CAkBA,SAASC,EAAgBrB,EAASS,GAEhCT,GADAA,EAAUJ,EAASI,IACDrC,QAAQ6B,EAAQ,IAClCiB,EAAWA,GAAY,CAAC,EAExB,IAKIa,EALAC,EAAQ7B,EAAWV,KAAKgB,GACxBb,EAAWoC,EAAM,GAAKA,EAAM,GAAGC,cAAgB,GAC/CC,IAAmBF,EAAM,GACzBG,IAAiBH,EAAM,GACvBI,EAAe,EAkCnB,OA/BIF,EACEC,GACFJ,EAAOC,EAAM,GAAKA,EAAM,GAAKA,EAAM,GACnCI,EAAeJ,EAAM,GAAG9C,OAAS8C,EAAM,GAAG9C,SAE1C6C,EAAOC,EAAM,GAAKA,EAAM,GACxBI,EAAeJ,EAAM,GAAG9C,QAGtBiD,GACFJ,EAAOC,EAAM,GAAKA,EAAM,GACxBI,EAAeJ,EAAM,GAAG9C,QAExB6C,EAAOC,EAAM,GAIA,UAAbpC,EACEwC,GAAgB,IAClBL,EAAOA,EAAKM,MAAM,IAEX1B,EAAUf,GACnBmC,EAAOC,EAAM,GACJpC,EACLsC,IACFH,EAAOA,EAAKM,MAAM,IAEXD,GAAgB,GAAKzB,EAAUO,EAAStB,YACjDmC,EAAOC,EAAM,IAGR,CACLpC,SAAUA,EACVM,QAASgC,GAAkBvB,EAAUf,GACrCwC,aAAcA,EACdL,KAAMA,EAEV,CAoDA,SAASP,EAAIf,EAASS,EAAU3B,GAI9B,GAFAkB,GADAA,EAAUJ,EAASI,IACDrC,QAAQ6B,EAAQ,MAE5BqC,gBAAgBd,GACpB,OAAO,IAAIA,EAAIf,EAASS,EAAU3B,GAGpC,IAAIgD,EAAUC,EAAWpD,EAAOqD,EAAaC,EAAO7D,EAChD8D,EAAenC,EAAM6B,QACrBd,SAAcL,EACdR,EAAM4B,KACNM,EAAI,EA8CR,IAjCI,WAAarB,GAAQ,WAAaA,IACpChC,EAAS2B,EACTA,EAAW,MAGT3B,GAAU,mBAAsBA,IAAQA,EAASQ,EAAGX,OAQxDmD,IADAC,EAAYV,EAAgBrB,GAAW,GALvCS,EAAWF,EAAUE,KAMCtB,WAAa4C,EAAUtC,QAC7CQ,EAAIR,QAAUsC,EAAUtC,SAAWqC,GAAYrB,EAAShB,QACxDQ,EAAId,SAAW4C,EAAU5C,UAAYsB,EAAStB,UAAY,GAC1Da,EAAU+B,EAAUT,MAOK,UAAvBS,EAAU5C,WACmB,IAA3B4C,EAAUJ,cAAsBhC,EAAmBuB,KAAKlB,MACxD+B,EAAUtC,UACTsC,EAAU5C,UACT4C,EAAUJ,aAAe,IACxBzB,EAAUD,EAAId,cAEnB+C,EAAa,GAAK,CAAC,OAAQ,aAGtBC,EAAID,EAAazD,OAAQ0D,IAGH,mBAF3BH,EAAcE,EAAaC,KAO3BxD,EAAQqD,EAAY,GACpB5D,EAAM4D,EAAY,GAEdrD,GAAUA,EACZsB,EAAI7B,GAAO4B,EACF,iBAAoBrB,IAC7BsD,EAAkB,MAAVtD,EACJqB,EAAQoC,YAAYzD,GACpBqB,EAAQqC,QAAQ1D,MAGd,iBAAoBqD,EAAY,IAClC/B,EAAI7B,GAAO4B,EAAQ4B,MAAM,EAAGK,GAC5BjC,EAAUA,EAAQ4B,MAAMK,EAAQD,EAAY,MAE5C/B,EAAI7B,GAAO4B,EAAQ4B,MAAMK,GACzBjC,EAAUA,EAAQ4B,MAAM,EAAGK,MAGrBA,EAAQtD,EAAMK,KAAKgB,MAC7BC,EAAI7B,GAAO6D,EAAM,GACjBjC,EAAUA,EAAQ4B,MAAM,EAAGK,EAAMA,QAGnChC,EAAI7B,GAAO6B,EAAI7B,IACb0D,GAAYE,EAAY,IAAKvB,EAASrC,IAAa,GAOjD4D,EAAY,KAAI/B,EAAI7B,GAAO6B,EAAI7B,GAAKoD,gBApCtCxB,EAAUgC,EAAYhC,EAASC,GA4C/BnB,IAAQmB,EAAIrB,MAAQE,EAAOmB,EAAIrB,QAM/BkD,GACCrB,EAAShB,SACkB,MAA3BQ,EAAIgB,SAASqB,OAAO,KACF,KAAjBrC,EAAIgB,UAAyC,KAAtBR,EAASQ,YAEpChB,EAAIgB,SA/JR,SAAiBa,EAAUS,GACzB,GAAiB,KAAbT,EAAiB,OAAOS,EAQ5B,IANA,IAAIC,GAAQD,GAAQ,KAAKnD,MAAM,KAAKwC,MAAM,GAAI,GAAGa,OAAOX,EAAS1C,MAAM,MACnE+C,EAAIK,EAAK/D,OACTiE,EAAOF,EAAKL,EAAI,GAChBQ,GAAU,EACVC,EAAK,EAEFT,KACW,MAAZK,EAAKL,GACPK,EAAKK,OAAOV,EAAG,GACM,OAAZK,EAAKL,IACdK,EAAKK,OAAOV,EAAG,GACfS,KACSA,IACC,IAANT,IAASQ,GAAU,GACvBH,EAAKK,OAAOV,EAAG,GACfS,KAOJ,OAHID,GAASH,EAAKG,QAAQ,IACb,MAATD,GAAyB,OAATA,GAAeF,EAAKhE,KAAK,IAEtCgE,EAAK9D,KAAK,IACnB,CAqImBoE,CAAQ7C,EAAIgB,SAAUR,EAASQ,WAOjB,MAA3BhB,EAAIgB,SAASqB,OAAO,IAAcpC,EAAUD,EAAId,YAClDc,EAAIgB,SAAW,IAAMhB,EAAIgB,UAQtB5B,EAASY,EAAIf,KAAMe,EAAId,YAC1Bc,EAAI8C,KAAO9C,EAAI+C,SACf/C,EAAIf,KAAO,IAMbe,EAAIgD,SAAWhD,EAAIiD,SAAW,GAE1BjD,EAAIkD,SACNlB,EAAQhC,EAAIkD,KAAKd,QAAQ,OAGvBpC,EAAIgD,SAAWhD,EAAIkD,KAAKvB,MAAM,EAAGK,GACjChC,EAAIgD,SAAWnF,mBAAmBJ,mBAAmBuC,EAAIgD,WAEzDhD,EAAIiD,SAAWjD,EAAIkD,KAAKvB,MAAMK,EAAQ,GACtChC,EAAIiD,SAAWpF,mBAAmBJ,mBAAmBuC,EAAIiD,YAEzDjD,EAAIgD,SAAWnF,mBAAmBJ,mBAAmBuC,EAAIkD,OAG3DlD,EAAIkD,KAAOlD,EAAIiD,SAAWjD,EAAIgD,SAAU,IAAKhD,EAAIiD,SAAWjD,EAAIgD,UAGlEhD,EAAImD,OAA0B,UAAjBnD,EAAId,UAAwBe,EAAUD,EAAId,WAAac,EAAI8C,KACpE9C,EAAId,SAAU,KAAMc,EAAI8C,KACxB,OAKJ9C,EAAIkB,KAAOlB,EAAIH,UACjB,CA2KAiB,EAAIzD,UAAY,CAAE+F,IA5JlB,SAAaxE,EAAMV,EAAOmF,GACxB,IAAIrD,EAAM4B,KAEV,OAAQhD,GACN,IAAK,QACC,iBAAoBV,GAASA,EAAMM,SACrCN,GAASmF,GAAMhE,EAAGX,OAAOR,IAG3B8B,EAAIpB,GAAQV,EACZ,MAEF,IAAK,OACH8B,EAAIpB,GAAQV,EAEPkB,EAASlB,EAAO8B,EAAId,UAGdhB,IACT8B,EAAI8C,KAAO9C,EAAI+C,SAAU,IAAK7E,IAH9B8B,EAAI8C,KAAO9C,EAAI+C,SACf/C,EAAIpB,GAAQ,IAKd,MAEF,IAAK,WACHoB,EAAIpB,GAAQV,EAER8B,EAAIf,OAAMf,GAAS,IAAK8B,EAAIf,MAChCe,EAAI8C,KAAO5E,EACX,MAEF,IAAK,OACH8B,EAAIpB,GAAQV,EAERe,EAAKgC,KAAK/C,IACZA,EAAQA,EAAMiB,MAAM,KACpBa,EAAIf,KAAOf,EAAMoF,MACjBtD,EAAI+C,SAAW7E,EAAMO,KAAK,OAE1BuB,EAAI+C,SAAW7E,EACf8B,EAAIf,KAAO,IAGb,MAEF,IAAK,WACHe,EAAId,SAAWhB,EAAMqD,cACrBvB,EAAIR,SAAW6D,EACf,MAEF,IAAK,WACL,IAAK,OACH,GAAInF,EAAO,CACT,IAAIqF,EAAgB,aAAT3E,EAAsB,IAAM,IACvCoB,EAAIpB,GAAQV,EAAMmE,OAAO,KAAOkB,EAAOA,EAAOrF,EAAQA,CACxD,MACE8B,EAAIpB,GAAQV,EAEd,MAEF,IAAK,WACL,IAAK,WACH8B,EAAIpB,GAAQf,mBAAmBK,GAC/B,MAEF,IAAK,OACH,IAAI8D,EAAQ9D,EAAMkE,QAAQ,MAErBJ,GACHhC,EAAIgD,SAAW9E,EAAMyD,MAAM,EAAGK,GAC9BhC,EAAIgD,SAAWnF,mBAAmBJ,mBAAmBuC,EAAIgD,WAEzDhD,EAAIiD,SAAW/E,EAAMyD,MAAMK,EAAQ,GACnChC,EAAIiD,SAAWpF,mBAAmBJ,mBAAmBuC,EAAIiD,YAEzDjD,EAAIgD,SAAWnF,mBAAmBJ,mBAAmBS,IAI3D,IAAK,IAAIgE,EAAI,EAAGA,EAAIpC,EAAMtB,OAAQ0D,IAAK,CACrC,IAAIsB,EAAM1D,EAAMoC,GAEZsB,EAAI,KAAIxD,EAAIwD,EAAI,IAAMxD,EAAIwD,EAAI,IAAIjC,cACxC,CAUA,OARAvB,EAAIkD,KAAOlD,EAAIiD,SAAWjD,EAAIgD,SAAU,IAAKhD,EAAIiD,SAAWjD,EAAIgD,SAEhEhD,EAAImD,OAA0B,UAAjBnD,EAAId,UAAwBe,EAAUD,EAAId,WAAac,EAAI8C,KACpE9C,EAAId,SAAU,KAAMc,EAAI8C,KACxB,OAEJ9C,EAAIkB,KAAOlB,EAAIH,WAERG,CACT,EA8D4BH,SArD5B,SAAkB9B,GACXA,GAAa,mBAAsBA,IAAWA,EAAYsB,EAAGtB,WAElE,IAAIY,EACAqB,EAAM4B,KACNkB,EAAO9C,EAAI8C,KACX5D,EAAWc,EAAId,SAEfA,GAAqD,MAAzCA,EAASmD,OAAOnD,EAASV,OAAS,KAAYU,GAAY,KAE1E,IAAIJ,EACFI,GACEc,EAAId,UAAYc,EAAIR,SAAYS,EAAUD,EAAId,UAAY,KAAO,IAsCrE,OApCIc,EAAIgD,UACNlE,GAAUkB,EAAIgD,SACVhD,EAAIiD,WAAUnE,GAAU,IAAKkB,EAAIiD,UACrCnE,GAAU,KACDkB,EAAIiD,UACbnE,GAAU,IAAKkB,EAAIiD,SACnBnE,GAAU,KAEO,UAAjBkB,EAAId,UACJe,EAAUD,EAAId,YACb4D,GACgB,MAAjB9C,EAAIgB,WAMJlC,GAAU,MAQkB,MAA1BgE,EAAKA,EAAKtE,OAAS,IAAeS,EAAKgC,KAAKjB,EAAI+C,YAAc/C,EAAIf,QACpE6D,GAAQ,KAGVhE,GAAUgE,EAAO9C,EAAIgB,UAErBrC,EAAQ,iBAAoBqB,EAAIrB,MAAQZ,EAAUiC,EAAIrB,OAASqB,EAAIrB,SACxDG,GAAU,MAAQH,EAAM0D,OAAO,GAAK,IAAK1D,EAAQA,GAExDqB,EAAIK,OAAMvB,GAAUkB,EAAIK,MAErBvB,CACT,GAQAgC,EAAIM,gBAAkBA,EACtBN,EAAIN,SAAWF,EACfQ,EAAInB,SAAWA,EACfmB,EAAIzB,GAAKA,EAETL,EAAOlB,QAAUgD,C","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/querystringify/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/requires-port/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/url-parse/index.js"],"sourcesContent":["'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , undef;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String|Null} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  try {\n    return decodeURIComponent(input.replace(/\\+/g, ' '));\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Attempts to encode a given input.\n *\n * @param {String} input The string that needs to be encoded.\n * @returns {String|Null} The encoded string.\n * @api private\n */\nfunction encode(input) {\n  try {\n    return encodeURIComponent(input);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?#&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1])\n      , value = decode(part[2]);\n\n    //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n    // In the case if failed decoding, we want to omit the key/value pairs\n    // from the result.\n    //\n    if (key === null || value === null || key in result) continue;\n    result[key] = value;\n  }\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = []\n    , value\n    , key;\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (key in obj) {\n    if (has.call(obj, key)) {\n      value = obj[key];\n\n      //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n      if (!value && (value === null || value === undef || isNaN(value))) {\n        value = '';\n      }\n\n      key = encode(key);\n      value = encode(value);\n\n      //\n      // If we failed to encode the strings, we should bail out as we don't\n      // want to add invalid strings to the query.\n      //\n      if (key === null || value === null) continue;\n      pairs.push(key +'='+ value);\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n","'use strict';\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nmodule.exports = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n","'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , controlOrWhitespace = /^[\\x00-\\x20\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]+/\n  , CRHTLF = /[\\n\\r\\t]/g\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//\n  , port = /:\\d+$/\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\\\/]+)?([\\S\\s]*)/i\n  , windowsDriveLetter = /^[a-zA-Z]:/;\n\n/**\n * Remove control characters and whitespace from the beginning of a string.\n *\n * @param {Object|String} str String to trim.\n * @returns {String} A new string representing `str` stripped of control\n *     characters and whitespace from its beginning.\n * @public\n */\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(controlOrWhitespace, '');\n}\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address, url) {     // Sanitize what is left of the address\n    return isSpecial(url.protocol) ? address.replace(/\\\\/g, '/') : address;\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d*)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof global !== 'undefined') globalVar = global;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * Check whether a protocol scheme is special.\n *\n * @param {String} The protocol scheme of the URL\n * @return {Boolean} `true` if the protocol scheme is special, else `false`\n * @private\n */\nfunction isSpecial(scheme) {\n  return (\n    scheme === 'file:' ||\n    scheme === 'ftp:' ||\n    scheme === 'http:' ||\n    scheme === 'https:' ||\n    scheme === 'ws:' ||\n    scheme === 'wss:'\n  );\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @param {Object} location\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address, location) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n  location = location || {};\n\n  var match = protocolre.exec(address);\n  var protocol = match[1] ? match[1].toLowerCase() : '';\n  var forwardSlashes = !!match[2];\n  var otherSlashes = !!match[3];\n  var slashesCount = 0;\n  var rest;\n\n  if (forwardSlashes) {\n    if (otherSlashes) {\n      rest = match[2] + match[3] + match[4];\n      slashesCount = match[2].length + match[3].length;\n    } else {\n      rest = match[2] + match[4];\n      slashesCount = match[2].length;\n    }\n  } else {\n    if (otherSlashes) {\n      rest = match[3] + match[4];\n      slashesCount = match[3].length;\n    } else {\n      rest = match[4]\n    }\n  }\n\n  if (protocol === 'file:') {\n    if (slashesCount >= 2) {\n      rest = rest.slice(2);\n    }\n  } else if (isSpecial(protocol)) {\n    rest = match[4];\n  } else if (protocol) {\n    if (forwardSlashes) {\n      rest = rest.slice(2);\n    }\n  } else if (slashesCount >= 2 && isSpecial(location.protocol)) {\n    rest = match[4];\n  }\n\n  return {\n    protocol: protocol,\n    slashes: forwardSlashes || isSpecial(protocol),\n    slashesCount: slashesCount,\n    rest: rest\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '', location);\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (\n    extracted.protocol === 'file:' && (\n      extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) ||\n    (!extracted.slashes &&\n      (extracted.protocol ||\n        extracted.slashesCount < 2 ||\n        !isSpecial(url.protocol)))\n  ) {\n    instructions[3] = [/(.*)/, 'pathname'];\n  }\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address, url);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      index = parse === '@'\n        ? address.lastIndexOf(parse)\n        : address.indexOf(parse);\n\n      if (~index) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // Default to a / for pathname if none exists. This normalizes the URL\n  // to always have a /\n  //\n  if (url.pathname.charAt(0) !== '/' && isSpecial(url.protocol)) {\n    url.pathname = '/' + url.pathname;\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n\n  if (url.auth) {\n    index = url.auth.indexOf(':');\n\n    if (~index) {\n      url.username = url.auth.slice(0, index);\n      url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n      url.password = url.auth.slice(index + 1);\n      url.password = encodeURIComponent(decodeURIComponent(url.password))\n    } else {\n      url.username = encodeURIComponent(decodeURIComponent(url.auth));\n    }\n\n    url.auth = url.password ? url.username +':'+ url.password : url.username;\n  }\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (port.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    case 'username':\n    case 'password':\n      url[part] = encodeURIComponent(value);\n      break;\n\n    case 'auth':\n      var index = value.indexOf(':');\n\n      if (~index) {\n        url.username = value.slice(0, index);\n        url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n        url.password = value.slice(index + 1);\n        url.password = encodeURIComponent(decodeURIComponent(url.password));\n      } else {\n        url.username = encodeURIComponent(decodeURIComponent(value));\n      }\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.auth = url.password ? url.username +':'+ url.password : url.username;\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , host = url.host\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result =\n    protocol +\n    ((url.protocol && url.slashes) || isSpecial(url.protocol) ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  } else if (url.password) {\n    result += ':'+ url.password;\n    result += '@';\n  } else if (\n    url.protocol !== 'file:' &&\n    isSpecial(url.protocol) &&\n    !host &&\n    url.pathname !== '/'\n  ) {\n    //\n    // Add back the empty userinfo, otherwise the original invalid URL\n    // might be transformed into a valid one with `url.pathname` as host.\n    //\n    result += '@';\n  }\n\n  //\n  // Trailing colon is removed from `url.host` when it is parsed. If it still\n  // ends with a colon, then add back the trailing colon that was removed. This\n  // prevents an invalid URL from being transformed into a valid one.\n  //\n  if (host[host.length - 1] === ':' || (port.test(url.hostname) && !url.port)) {\n    host += ':';\n  }\n\n  result += host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\n\nmodule.exports = Url;\n"],"names":["has","Object","prototype","hasOwnProperty","decode","input","decodeURIComponent","replace","e","encode","encodeURIComponent","exports","stringify","obj","prefix","value","key","pairs","call","isNaN","push","length","join","parse","query","part","parser","result","exec","module","port","protocol","split","required","qs","controlOrWhitespace","CRHTLF","slashes","protocolre","windowsDriveLetter","trimLeft","str","toString","rules","address","url","isSpecial","NaN","undefined","ignore","hash","lolcation","loc","location","window","g","self","finaldestination","type","Url","unescape","pathname","test","href","scheme","extractProtocol","rest","match","toLowerCase","forwardSlashes","otherSlashes","slashesCount","slice","this","relative","extracted","instruction","index","instructions","i","lastIndexOf","indexOf","charAt","base","path","concat","last","unshift","up","splice","resolve","host","hostname","username","password","auth","origin","set","fn","pop","char","ins"],"sourceRoot":""}