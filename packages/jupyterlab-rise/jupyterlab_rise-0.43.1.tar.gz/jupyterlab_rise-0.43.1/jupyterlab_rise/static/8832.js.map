{"version":3,"file":"8832.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole/lib/logger.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole/lib/registry.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole/lib/widget.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { OutputAreaModel } from '@jupyterlab/outputarea';\nimport { OutputModel } from '@jupyterlab/rendermime';\nimport { Signal } from '@lumino/signaling';\n/**\n * Log Output Model with timestamp which provides\n * item information for Output Area Model.\n */\nexport class LogOutputModel extends OutputModel {\n    /**\n     * Construct a LogOutputModel.\n     *\n     * @param options - The model initialization options.\n     */\n    constructor(options) {\n        super(options);\n        this.timestamp = new Date(options.value.timestamp);\n        this.level = options.value.level;\n    }\n}\n/**\n * Implementation of `IContentFactory` for Output Area Model\n * which creates LogOutputModel instances.\n */\nclass LogConsoleModelContentFactory extends OutputAreaModel.ContentFactory {\n    /**\n     * Create a rendermime output model from notebook output.\n     */\n    createOutputModel(options) {\n        return new LogOutputModel(options);\n    }\n}\n/**\n * Output Area Model implementation which is able to\n * limit number of outputs stored.\n */\nexport class LoggerOutputAreaModel extends OutputAreaModel {\n    constructor({ maxLength, ...options }) {\n        super(options);\n        this.maxLength = maxLength;\n    }\n    /**\n     * Add an output, which may be combined with previous output.\n     *\n     * @returns The total number of outputs.\n     *\n     * #### Notes\n     * The output bundle is copied. Contiguous stream outputs of the same `name`\n     * are combined. The oldest outputs are possibly removed to ensure the total\n     * number of outputs is at most `.maxLength`.\n     */\n    add(output) {\n        super.add(output);\n        this._applyMaxLength();\n        return this.length;\n    }\n    /**\n     * Whether an output should combine with the previous output.\n     *\n     * We combine if the two outputs are in the same second, which is the\n     * resolution for our time display.\n     */\n    shouldCombine(options) {\n        const { value, lastModel } = options;\n        const oldSeconds = Math.trunc(lastModel.timestamp.getTime() / 1000);\n        const newSeconds = Math.trunc(value.timestamp / 1000);\n        return oldSeconds === newSeconds;\n    }\n    /**\n     * Get an item at the specified index.\n     */\n    get(index) {\n        return super.get(index);\n    }\n    /**\n     * Maximum number of outputs to store in the model.\n     */\n    get maxLength() {\n        return this._maxLength;\n    }\n    set maxLength(value) {\n        this._maxLength = value;\n        this._applyMaxLength();\n    }\n    /**\n     * Manually apply length limit.\n     */\n    _applyMaxLength() {\n        if (this.list.length > this._maxLength) {\n            this.list.removeRange(0, this.list.length - this._maxLength);\n        }\n    }\n}\n/**\n * A concrete implementation of ILogger.\n */\nexport class Logger {\n    /**\n     * Construct a Logger.\n     *\n     * @param options Constructor options\n     */\n    constructor(options) {\n        this._isDisposed = false;\n        this._contentChanged = new Signal(this);\n        this._stateChanged = new Signal(this);\n        this._rendermime = null;\n        this._version = 0;\n        this._level = 'warning';\n        this.source = options.source;\n        this.outputAreaModel = new LoggerOutputAreaModel({\n            contentFactory: new LogConsoleModelContentFactory(),\n            maxLength: options.maxLength\n        });\n    }\n    /**\n     * The maximum number of outputs stored.\n     *\n     * #### Notes\n     * Oldest entries will be trimmed to ensure the length is at most\n     * `.maxLength`.\n     */\n    get maxLength() {\n        return this.outputAreaModel.maxLength;\n    }\n    set maxLength(value) {\n        this.outputAreaModel.maxLength = value;\n    }\n    /**\n     * The level of outputs logged\n     */\n    get level() {\n        return this._level;\n    }\n    set level(newValue) {\n        const oldValue = this._level;\n        if (oldValue === newValue) {\n            return;\n        }\n        this._level = newValue;\n        this._log({\n            output: {\n                output_type: 'display_data',\n                data: {\n                    'text/plain': `Log level set to ${newValue}`\n                }\n            },\n            level: 'metadata'\n        });\n        this._stateChanged.emit({ name: 'level', oldValue, newValue });\n    }\n    /**\n     * Number of outputs logged.\n     */\n    get length() {\n        return this.outputAreaModel.length;\n    }\n    /**\n     * A signal emitted when the list of log messages changes.\n     */\n    get contentChanged() {\n        return this._contentChanged;\n    }\n    /**\n     * A signal emitted when the log state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * Rendermime to use when rendering outputs logged.\n     */\n    get rendermime() {\n        return this._rendermime;\n    }\n    set rendermime(value) {\n        if (value !== this._rendermime) {\n            const oldValue = this._rendermime;\n            const newValue = (this._rendermime = value);\n            this._stateChanged.emit({ name: 'rendermime', oldValue, newValue });\n        }\n    }\n    /**\n     * The number of messages that have ever been stored.\n     */\n    get version() {\n        return this._version;\n    }\n    /**\n     * Log an output to logger.\n     *\n     * @param log - The output to be logged.\n     */\n    log(log) {\n        // Filter by our current log level\n        if (Private.LogLevel[log.level] <\n            Private.LogLevel[this._level]) {\n            return;\n        }\n        let output = null;\n        switch (log.type) {\n            case 'text':\n                output = {\n                    output_type: 'display_data',\n                    data: {\n                        'text/plain': log.data\n                    }\n                };\n                break;\n            case 'html':\n                output = {\n                    output_type: 'display_data',\n                    data: {\n                        'text/html': log.data\n                    }\n                };\n                break;\n            case 'output':\n                output = log.data;\n                break;\n            default:\n                break;\n        }\n        if (output) {\n            this._log({\n                output,\n                level: log.level\n            });\n        }\n    }\n    /**\n     * Clear all outputs logged.\n     */\n    clear() {\n        this.outputAreaModel.clear(false);\n        this._contentChanged.emit('clear');\n    }\n    /**\n     * Add a checkpoint to the log.\n     */\n    checkpoint() {\n        this._log({\n            output: {\n                output_type: 'display_data',\n                data: {\n                    'text/html': '<hr/>'\n                }\n            },\n            level: 'metadata'\n        });\n    }\n    /**\n     * Whether the logger is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose the logger.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.clear();\n        this._rendermime = null;\n        Signal.clearData(this);\n    }\n    _log(options) {\n        // First, make sure our version reflects the new message so things\n        // triggering from the signals below have the correct version.\n        this._version++;\n        // Next, trigger any displays of the message\n        this.outputAreaModel.add({\n            ...options.output,\n            timestamp: Date.now(),\n            level: options.level\n        });\n        // Finally, tell people that the message was appended (and possibly\n        // already displayed).\n        this._contentChanged.emit('append');\n    }\n}\nvar Private;\n(function (Private) {\n    let LogLevel;\n    (function (LogLevel) {\n        LogLevel[LogLevel[\"debug\"] = 0] = \"debug\";\n        LogLevel[LogLevel[\"info\"] = 1] = \"info\";\n        LogLevel[LogLevel[\"warning\"] = 2] = \"warning\";\n        LogLevel[LogLevel[\"error\"] = 3] = \"error\";\n        LogLevel[LogLevel[\"critical\"] = 4] = \"critical\";\n        LogLevel[LogLevel[\"metadata\"] = 5] = \"metadata\";\n    })(LogLevel = Private.LogLevel || (Private.LogLevel = {}));\n})(Private || (Private = {}));\n//# sourceMappingURL=logger.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\nimport { Logger } from './logger';\n/**\n * A concrete implementation of ILoggerRegistry.\n */\nexport class LoggerRegistry {\n    /**\n     * Construct a LoggerRegistry.\n     *\n     * @param defaultRendermime - Default rendermime to render outputs\n     * with when logger is not supplied with one.\n     */\n    constructor(options) {\n        this._loggers = new Map();\n        this._registryChanged = new Signal(this);\n        this._isDisposed = false;\n        this._defaultRendermime = options.defaultRendermime;\n        this._maxLength = options.maxLength;\n    }\n    /**\n     * Get the logger for the specified source.\n     *\n     * @param source - The name of the log source.\n     *\n     * @returns The logger for the specified source.\n     */\n    getLogger(source) {\n        const loggers = this._loggers;\n        let logger = loggers.get(source);\n        if (logger) {\n            return logger;\n        }\n        logger = new Logger({ source, maxLength: this.maxLength });\n        logger.rendermime = this._defaultRendermime;\n        loggers.set(source, logger);\n        this._registryChanged.emit('append');\n        return logger;\n    }\n    /**\n     * Get all loggers registered.\n     *\n     * @returns The array containing all registered loggers.\n     */\n    getLoggers() {\n        return Array.from(this._loggers.values());\n    }\n    /**\n     * A signal emitted when the logger registry changes.\n     */\n    get registryChanged() {\n        return this._registryChanged;\n    }\n    /**\n     * The max length for loggers.\n     */\n    get maxLength() {\n        return this._maxLength;\n    }\n    set maxLength(value) {\n        this._maxLength = value;\n        this._loggers.forEach(logger => {\n            logger.maxLength = value;\n        });\n    }\n    /**\n     * Whether the register is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose the registry and all loggers.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._loggers.forEach(x => x.dispose());\n        Signal.clearData(this);\n    }\n}\n//# sourceMappingURL=registry.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The Logger Registry token.\n */\nexport const ILoggerRegistry = new Token('@jupyterlab/logconsole:ILoggerRegistry', 'A service providing a logger infrastructure.');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { OutputArea } from '@jupyterlab/outputarea';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Signal } from '@lumino/signaling';\nimport { PanelLayout, StackedPanel, Widget } from '@lumino/widgets';\nfunction toTitleCase(value) {\n    return value.length === 0 ? value : value[0].toUpperCase() + value.slice(1);\n}\n/**\n * Log console output prompt implementation\n */\nclass LogConsoleOutputPrompt extends Widget {\n    constructor() {\n        super();\n        this._timestampNode = document.createElement('div');\n        this.node.append(this._timestampNode);\n    }\n    /**\n     * Date & time when output is logged.\n     */\n    set timestamp(value) {\n        this._timestamp = value;\n        this._timestampNode.innerHTML = this._timestamp.toLocaleTimeString();\n        this.update();\n    }\n    /**\n     * Log level\n     */\n    set level(value) {\n        this._level = value;\n        this.node.dataset.logLevel = value;\n        this.update();\n    }\n    update() {\n        if (this._level !== undefined && this._timestamp !== undefined) {\n            this.node.title = `${this._timestamp.toLocaleString()}; ${toTitleCase(this._level)} level`;\n        }\n    }\n}\n/**\n * Output Area implementation displaying log outputs\n * with prompts showing log timestamps.\n */\nclass LogConsoleOutputArea extends OutputArea {\n    /**\n     * Create an output item with a prompt and actual output\n     */\n    createOutputItem(model) {\n        const panel = super.createOutputItem(model);\n        if (panel === null) {\n            // Could not render model\n            return null;\n        }\n        // first widget in panel is prompt of type LoggerOutputPrompt\n        const prompt = panel.widgets[0];\n        prompt.timestamp = model.timestamp;\n        prompt.level = model.level;\n        return panel;\n    }\n    /**\n     * Handle an input request from a kernel by doing nothing.\n     */\n    onInputRequest(msg, future) {\n        return;\n    }\n}\n/**\n * Implementation of `IContentFactory` for Output Area\n * which creates custom output prompts.\n */\nclass LogConsoleContentFactory extends OutputArea.ContentFactory {\n    /**\n     * Create the output prompt for the widget.\n     */\n    createOutputPrompt() {\n        return new LogConsoleOutputPrompt();\n    }\n}\n/**\n * Implements a panel which supports pinning the position to the end if it is\n * scrolled to the end.\n *\n * #### Notes\n * This is useful for log viewing components or chat components that append\n * elements at the end. We would like to automatically scroll when the user\n * has scrolled to the bottom, but not change the scrolling when the user has\n * changed the scroll position.\n */\nexport class ScrollingWidget extends Widget {\n    constructor({ content, ...options }) {\n        super(options);\n        this._observer = null;\n        this.addClass('jp-Scrolling');\n        const layout = (this.layout = new PanelLayout());\n        layout.addWidget(content);\n        this._content = content;\n        this._sentinel = document.createElement('div');\n        this.node.appendChild(this._sentinel);\n    }\n    /**\n     * The content widget.\n     */\n    get content() {\n        return this._content;\n    }\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        // defer so content gets a chance to attach first\n        requestAnimationFrame(() => {\n            this._sentinel.scrollIntoView();\n            this._scrollHeight = this.node.scrollHeight;\n        });\n        // Set up intersection observer for the sentinel\n        if (typeof IntersectionObserver !== 'undefined') {\n            this._observer = new IntersectionObserver(args => {\n                this._handleScroll(args);\n            }, { root: this.node, threshold: 1 });\n            this._observer.observe(this._sentinel);\n        }\n    }\n    onBeforeDetach(msg) {\n        if (this._observer) {\n            this._observer.disconnect();\n        }\n    }\n    onAfterShow(msg) {\n        if (this._tracking) {\n            this._sentinel.scrollIntoView();\n        }\n    }\n    _handleScroll([entry]) {\n        if (entry.isIntersecting) {\n            this._tracking = true;\n        }\n        else if (this.isVisible) {\n            const currentHeight = this.node.scrollHeight;\n            if (currentHeight === this._scrollHeight) {\n                // Likely the user scrolled manually\n                this._tracking = false;\n            }\n            else {\n                // We assume we scrolled because our size changed, so scroll to the end.\n                this._sentinel.scrollIntoView();\n                this._scrollHeight = currentHeight;\n                this._tracking = true;\n            }\n        }\n    }\n}\n/**\n * A StackedPanel implementation that creates Output Areas\n * for each log source and activates as source is switched.\n */\nexport class LogConsolePanel extends StackedPanel {\n    /**\n     * Construct a LogConsolePanel instance.\n     *\n     * @param loggerRegistry - The logger registry that provides\n     * logs to be displayed.\n     */\n    constructor(loggerRegistry, translator) {\n        super();\n        this._outputAreas = new Map();\n        this._source = null;\n        this._sourceChanged = new Signal(this);\n        this._sourceDisplayed = new Signal(this);\n        this._loggersWatched = new Set();\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._loggerRegistry = loggerRegistry;\n        this.addClass('jp-LogConsolePanel');\n        loggerRegistry.registryChanged.connect((sender, args) => {\n            this._bindLoggerSignals();\n        }, this);\n        this._bindLoggerSignals();\n        this._placeholder = new Widget();\n        this._placeholder.addClass('jp-LogConsoleListPlaceholder');\n        this.addWidget(this._placeholder);\n    }\n    /**\n     * The logger registry providing the logs.\n     */\n    get loggerRegistry() {\n        return this._loggerRegistry;\n    }\n    /**\n     * The current logger.\n     */\n    get logger() {\n        if (this.source === null) {\n            return null;\n        }\n        return this.loggerRegistry.getLogger(this.source);\n    }\n    /**\n     * The log source displayed\n     */\n    get source() {\n        return this._source;\n    }\n    set source(name) {\n        if (name === this._source) {\n            return;\n        }\n        const oldValue = this._source;\n        const newValue = (this._source = name);\n        this._showOutputFromSource(newValue);\n        this._handlePlaceholder();\n        this._sourceChanged.emit({ oldValue, newValue, name: 'source' });\n    }\n    /**\n     * The source version displayed.\n     */\n    get sourceVersion() {\n        const source = this.source;\n        return source !== null\n            ? this._loggerRegistry.getLogger(source).version\n            : null;\n    }\n    /**\n     * Signal for source changes\n     */\n    get sourceChanged() {\n        return this._sourceChanged;\n    }\n    /**\n     * Signal for source changes\n     */\n    get sourceDisplayed() {\n        return this._sourceDisplayed;\n    }\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        this._updateOutputAreas();\n        this._showOutputFromSource(this._source);\n        this._handlePlaceholder();\n    }\n    onAfterShow(msg) {\n        super.onAfterShow(msg);\n        if (this.source !== null) {\n            this._sourceDisplayed.emit({\n                source: this.source,\n                version: this.sourceVersion\n            });\n        }\n    }\n    _bindLoggerSignals() {\n        const loggers = this._loggerRegistry.getLoggers();\n        for (const logger of loggers) {\n            if (this._loggersWatched.has(logger.source)) {\n                continue;\n            }\n            logger.contentChanged.connect((sender, args) => {\n                this._updateOutputAreas();\n                this._handlePlaceholder();\n            }, this);\n            logger.stateChanged.connect((sender, change) => {\n                if (change.name !== 'rendermime') {\n                    return;\n                }\n                const viewId = `source:${sender.source}`;\n                const outputArea = this._outputAreas.get(viewId);\n                if (outputArea) {\n                    if (change.newValue) {\n                        // cast away readonly\n                        outputArea.rendermime = change.newValue;\n                    }\n                    else {\n                        outputArea.dispose();\n                    }\n                }\n            }, this);\n            this._loggersWatched.add(logger.source);\n        }\n    }\n    _showOutputFromSource(source) {\n        // If the source is null, pick a unique name so all output areas hide.\n        const viewId = source === null ? 'null source' : `source:${source}`;\n        this._outputAreas.forEach((outputArea, name) => {\n            var _a, _b;\n            // Show/hide the output area parents, the scrolling windows.\n            if (outputArea.id === viewId) {\n                (_a = outputArea.parent) === null || _a === void 0 ? void 0 : _a.show();\n                if (outputArea.isVisible) {\n                    this._sourceDisplayed.emit({\n                        source: this.source,\n                        version: this.sourceVersion\n                    });\n                }\n            }\n            else {\n                (_b = outputArea.parent) === null || _b === void 0 ? void 0 : _b.hide();\n            }\n        });\n        const title = source === null\n            ? this._trans.__('Log Console')\n            : this._trans.__('Log: %1', source);\n        this.title.label = title;\n        this.title.caption = title;\n    }\n    _handlePlaceholder() {\n        if (this.source === null) {\n            this._placeholder.node.textContent = this._trans.__('No source selected.');\n            this._placeholder.show();\n        }\n        else if (this._loggerRegistry.getLogger(this.source).length === 0) {\n            this._placeholder.node.textContent = this._trans.__('No log messages.');\n            this._placeholder.show();\n        }\n        else {\n            this._placeholder.hide();\n            this._placeholder.node.textContent = '';\n        }\n    }\n    _updateOutputAreas() {\n        const loggerIds = new Set();\n        const loggers = this._loggerRegistry.getLoggers();\n        for (const logger of loggers) {\n            const source = logger.source;\n            const viewId = `source:${source}`;\n            loggerIds.add(viewId);\n            // add view for logger if not exist\n            if (!this._outputAreas.has(viewId)) {\n                const outputArea = new LogConsoleOutputArea({\n                    rendermime: logger.rendermime,\n                    contentFactory: new LogConsoleContentFactory(),\n                    model: logger.outputAreaModel\n                });\n                outputArea.id = viewId;\n                // Attach the output area so it is visible, so the accounting\n                // functions below record the outputs actually displayed.\n                const w = new ScrollingWidget({\n                    content: outputArea\n                });\n                this.addWidget(w);\n                this._outputAreas.set(viewId, outputArea);\n                // This is where the source object is associated with the output area.\n                // We capture the source from this environment in the closure.\n                const outputUpdate = (sender) => {\n                    // If the current log console panel source is the source associated\n                    // with this output area, and the output area is visible, then emit\n                    // the logConsolePanel source displayed signal.\n                    if (this.source === source && sender.isVisible) {\n                        // We assume that the output area has been updated to the current\n                        // version of the source.\n                        this._sourceDisplayed.emit({\n                            source: this.source,\n                            version: this.sourceVersion\n                        });\n                    }\n                };\n                // Notify messages were displayed any time the output area is updated\n                // and update for any outputs rendered on construction.\n                outputArea.outputLengthChanged.connect(outputUpdate, this);\n                // Since the output area was attached above, we can rely on its\n                // visibility to account for the messages displayed.\n                outputUpdate(outputArea);\n            }\n        }\n        // remove output areas that do not have corresponding loggers anymore\n        const viewIds = this._outputAreas.keys();\n        for (const viewId of viewIds) {\n            if (!loggerIds.has(viewId)) {\n                const outputArea = this._outputAreas.get(viewId);\n                outputArea === null || outputArea === void 0 ? void 0 : outputArea.dispose();\n                this._outputAreas.delete(viewId);\n            }\n        }\n    }\n}\n//# sourceMappingURL=widget.js.map"],"names":["Private","LogOutputModel","OutputModel","constructor","options","super","this","timestamp","Date","value","level","LogConsoleModelContentFactory","OutputAreaModel","ContentFactory","createOutputModel","LoggerOutputAreaModel","maxLength","add","output","_applyMaxLength","length","shouldCombine","lastModel","Math","trunc","getTime","get","index","_maxLength","list","removeRange","Logger","_isDisposed","_contentChanged","Signal","_stateChanged","_rendermime","_version","_level","source","outputAreaModel","contentFactory","newValue","oldValue","_log","output_type","data","emit","name","contentChanged","stateChanged","rendermime","version","log","LogLevel","type","clear","checkpoint","isDisposed","dispose","clearData","now","LoggerRegistry","_loggers","Map","_registryChanged","_defaultRendermime","defaultRendermime","getLogger","loggers","logger","set","getLoggers","Array","from","values","registryChanged","forEach","x","ILoggerRegistry","Token","LogConsoleOutputPrompt","Widget","_timestampNode","document","createElement","node","append","_timestamp","innerHTML","toLocaleTimeString","update","dataset","logLevel","undefined","title","toLocaleString","toUpperCase","slice","LogConsoleOutputArea","OutputArea","createOutputItem","model","panel","prompt","widgets","onInputRequest","msg","future","LogConsoleContentFactory","createOutputPrompt","ScrollingWidget","content","_observer","addClass","layout","PanelLayout","addWidget","_content","_sentinel","appendChild","onAfterAttach","requestAnimationFrame","scrollIntoView","_scrollHeight","scrollHeight","IntersectionObserver","args","_handleScroll","root","threshold","observe","onBeforeDetach","disconnect","onAfterShow","_tracking","entry","isIntersecting","isVisible","currentHeight","LogConsolePanel","StackedPanel","loggerRegistry","translator","_outputAreas","_source","_sourceChanged","_sourceDisplayed","_loggersWatched","Set","nullTranslator","_trans","load","_loggerRegistry","connect","sender","_bindLoggerSignals","_placeholder","_showOutputFromSource","_handlePlaceholder","sourceVersion","sourceChanged","sourceDisplayed","_updateOutputAreas","has","change","viewId","outputArea","_a","_b","id","parent","show","hide","__","label","caption","textContent","loggerIds","w","outputUpdate","outputLengthChanged","viewIds","keys","delete"],"sourceRoot":""}