{"version":3,"file":"5434.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/factory.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/panel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/tocitem.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/toctree.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/treeview.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/registry.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/tracker.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/common.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/markdown.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ActivityMonitor, PathExt } from '@jupyterlab/coreutils';\n/**\n * Timeout for throttling ToC rendering following model changes.\n *\n * @private\n */\nconst RENDER_TIMEOUT = 1000;\n/**\n * Abstract table of contents model factory for IDocumentWidget.\n */\nexport class TableOfContentsFactory {\n    /**\n     * Constructor\n     *\n     * @param tracker Widget tracker\n     */\n    constructor(tracker) {\n        this.tracker = tracker;\n    }\n    /**\n     * Whether the factory can handle the widget or not.\n     *\n     * @param widget - widget\n     * @returns boolean indicating a ToC can be generated\n     */\n    isApplicable(widget) {\n        if (!this.tracker.has(widget)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Create a new table of contents model for the widget\n     *\n     * @param widget - widget\n     * @param configuration - Table of contents configuration\n     * @returns The table of contents model\n     */\n    createNew(widget, configuration) {\n        const model = this._createNew(widget, configuration);\n        const context = widget.context;\n        const updateHeadings = () => {\n            model.refresh().catch(reason => {\n                console.error('Failed to update the table of contents.', reason);\n            });\n        };\n        const monitor = new ActivityMonitor({\n            signal: context.model.contentChanged,\n            timeout: RENDER_TIMEOUT\n        });\n        monitor.activityStopped.connect(updateHeadings);\n        const updateTitle = () => {\n            model.title = PathExt.basename(context.localPath);\n        };\n        context.pathChanged.connect(updateTitle);\n        context.ready\n            .then(() => {\n            updateTitle();\n            updateHeadings();\n        })\n            .catch(reason => {\n            console.error(`Failed to initiate headings for ${context.localPath}.`);\n        });\n        widget.disposed.connect(() => {\n            monitor.activityStopped.disconnect(updateHeadings);\n            context.pathChanged.disconnect(updateTitle);\n        });\n        return model;\n    }\n}\n//# sourceMappingURL=factory.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * Table of contents registry token.\n */\nexport const ITableOfContentsRegistry = new Token('@jupyterlab/toc:ITableOfContentsRegistry', 'A service to register table of content factory.');\n/**\n * Table of contents tracker token.\n */\nexport const ITableOfContentsTracker = new Token('@jupyterlab/toc:ITableOfContentsTracker', 'A widget tracker for table of contents.');\n/**\n * Namespace for table of contents interface\n */\nexport var TableOfContents;\n(function (TableOfContents) {\n    /**\n     * Default table of content configuration\n     */\n    TableOfContents.defaultConfig = {\n        baseNumbering: 1,\n        maximalDepth: 4,\n        numberingH1: true,\n        numberHeaders: false,\n        includeOutput: true,\n        syncCollapseState: false\n    };\n})(TableOfContents || (TableOfContents = {}));\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { VDomModel } from '@jupyterlab/ui-components';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { TableOfContents } from './tokens';\n/**\n * Abstract table of contents model.\n */\nexport class TableOfContentsModel extends VDomModel {\n    /**\n     * Constructor\n     *\n     * @param widget The widget to search in\n     * @param configuration Default model configuration\n     */\n    constructor(widget, configuration) {\n        super();\n        this.widget = widget;\n        this._activeHeading = null;\n        this._activeHeadingChanged = new Signal(this);\n        this._collapseChanged = new Signal(this);\n        this._configuration = configuration !== null && configuration !== void 0 ? configuration : { ...TableOfContents.defaultConfig };\n        this._headings = new Array();\n        this._headingsChanged = new Signal(this);\n        this._isActive = false;\n        this._isRefreshing = false;\n        this._needsRefreshing = false;\n    }\n    /**\n     * Current active entry.\n     *\n     * @returns table of contents active entry\n     */\n    get activeHeading() {\n        return this._activeHeading;\n    }\n    /**\n     * Signal emitted when the active heading changes.\n     */\n    get activeHeadingChanged() {\n        return this._activeHeadingChanged;\n    }\n    /**\n     * Signal emitted when a table of content section collapse state changes.\n     */\n    get collapseChanged() {\n        return this._collapseChanged;\n    }\n    /**\n     * Model configuration\n     */\n    get configuration() {\n        return this._configuration;\n    }\n    /**\n     * List of headings.\n     *\n     * @returns table of contents list of headings\n     */\n    get headings() {\n        return this._headings;\n    }\n    /**\n     * Signal emitted when the headings changes.\n     */\n    get headingsChanged() {\n        return this._headingsChanged;\n    }\n    /**\n     * Whether the model is active or not.\n     *\n     * #### Notes\n     * An active model means it is displayed in the table of contents.\n     * This can be used by subclass to limit updating the headings.\n     */\n    get isActive() {\n        return this._isActive;\n    }\n    set isActive(v) {\n        this._isActive = v;\n        // Refresh on activation expect if it is always active\n        //  => a ToC model is always active e.g. when displaying numbering in the document\n        if (this._isActive && !this.isAlwaysActive) {\n            this.refresh().catch(reason => {\n                console.error('Failed to refresh ToC model.', reason);\n            });\n        }\n    }\n    /**\n     * Whether the model gets updated even if the table of contents panel\n     * is hidden or not.\n     *\n     * #### Notes\n     * For example, ToC models use to add title numbering will\n     * set this to true.\n     */\n    get isAlwaysActive() {\n        return false;\n    }\n    /**\n     * List of configuration options supported by the model.\n     */\n    get supportedOptions() {\n        return ['maximalDepth'];\n    }\n    /**\n     * Document title\n     */\n    get title() {\n        return this._title;\n    }\n    set title(v) {\n        if (v !== this._title) {\n            this._title = v;\n            this.stateChanged.emit();\n        }\n    }\n    /**\n     * Refresh the headings list.\n     */\n    async refresh() {\n        if (this._isRefreshing) {\n            // Schedule a refresh if one is in progress\n            this._needsRefreshing = true;\n            return Promise.resolve();\n        }\n        this._isRefreshing = true;\n        try {\n            const newHeadings = await this.getHeadings();\n            if (this._needsRefreshing) {\n                this._needsRefreshing = false;\n                this._isRefreshing = false;\n                return this.refresh();\n            }\n            if (newHeadings && !this._areHeadingsEqual(newHeadings, this._headings)) {\n                this._headings = newHeadings;\n                this.stateChanged.emit();\n                this._headingsChanged.emit();\n            }\n        }\n        finally {\n            this._isRefreshing = false;\n        }\n    }\n    /**\n     * Set a new active heading.\n     *\n     * @param heading The new active heading\n     * @param emitSignal Whether to emit the activeHeadingChanged signal or not.\n     */\n    setActiveHeading(heading, emitSignal = true) {\n        if (this._activeHeading !== heading) {\n            this._activeHeading = heading;\n            this.stateChanged.emit();\n        }\n        if (emitSignal) {\n            // Always emit the signal to trigger a scroll even if the value did not change\n            this._activeHeadingChanged.emit(this._activeHeading);\n        }\n    }\n    /**\n     * Model configuration setter.\n     *\n     * @param c New configuration\n     */\n    setConfiguration(c) {\n        const newConfiguration = { ...this._configuration, ...c };\n        if (!JSONExt.deepEqual(this._configuration, newConfiguration)) {\n            this._configuration = newConfiguration;\n            this.refresh().catch(reason => {\n                console.error('Failed to update the table of contents.', reason);\n            });\n        }\n    }\n    /**\n     * Callback on heading collapse.\n     *\n     * @param options.heading The heading to change state (all headings if not provided)\n     * @param options.collapsed The new collapsed status (toggle existing status if not provided)\n     */\n    toggleCollapse(options) {\n        var _a, _b;\n        if (options.heading) {\n            options.heading.collapsed =\n                (_a = options.collapsed) !== null && _a !== void 0 ? _a : !options.heading.collapsed;\n            this.stateChanged.emit();\n            this._collapseChanged.emit(options.heading);\n        }\n        else {\n            // Use the provided state or collapsed all except if all are collapsed\n            const newState = (_b = options.collapsed) !== null && _b !== void 0 ? _b : !this.headings.some(h => { var _a; return !((_a = h.collapsed) !== null && _a !== void 0 ? _a : false); });\n            this.headings.forEach(h => (h.collapsed = newState));\n            this.stateChanged.emit();\n            this._collapseChanged.emit(null);\n        }\n    }\n    /**\n     * Test if two headings are equal or not.\n     *\n     * @param heading1 First heading\n     * @param heading2 Second heading\n     * @returns Whether the headings are equal.\n     */\n    isHeadingEqual(heading1, heading2) {\n        return (heading1.level === heading2.level &&\n            heading1.text === heading2.text &&\n            heading1.prefix === heading2.prefix);\n    }\n    /**\n     * Test if two list of headings are equal or not.\n     *\n     * @param headings1 First list of headings\n     * @param headings2 Second list of headings\n     * @returns Whether the array are equal.\n     */\n    _areHeadingsEqual(headings1, headings2) {\n        if (headings1.length === headings2.length) {\n            for (let i = 0; i < headings1.length; i++) {\n                if (!this.isHeadingEqual(headings1[i], headings2[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=model.js.map","/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { SidePanel } from '@jupyterlab/ui-components';\nimport { Panel, Widget } from '@lumino/widgets';\nimport { TableOfContentsWidget } from './treeview';\n/**\n * Table of contents sidebar panel.\n */\nexport class TableOfContentsPanel extends SidePanel {\n    /**\n     * Constructor\n     *\n     * @param translator - Translator tool\n     */\n    constructor(translator) {\n        super({ content: new Panel(), translator });\n        this._model = null;\n        this.addClass('jp-TableOfContents');\n        this._title = new Private.Header(this._trans.__('Table of Contents'));\n        this.header.addWidget(this._title);\n        this._treeview = new TableOfContentsWidget({\n            placeholderHeadline: this._trans.__('No Headings'),\n            placeholderText: this._trans.__('The table of contents shows headings in notebooks and supported files.')\n        });\n        this._treeview.addClass('jp-TableOfContents-tree');\n        this.content.addWidget(this._treeview);\n    }\n    /**\n     * Get the current model.\n     */\n    get model() {\n        return this._model;\n    }\n    set model(newValue) {\n        var _a, _b;\n        if (this._model !== newValue) {\n            (_a = this._model) === null || _a === void 0 ? void 0 : _a.stateChanged.disconnect(this._onTitleChanged, this);\n            this._model = newValue;\n            if (this._model) {\n                this._model.isActive = this.isVisible;\n            }\n            (_b = this._model) === null || _b === void 0 ? void 0 : _b.stateChanged.connect(this._onTitleChanged, this);\n            this._onTitleChanged();\n            this._treeview.model = this._model;\n        }\n    }\n    onAfterHide(msg) {\n        super.onAfterHide(msg);\n        if (this._model) {\n            this._model.isActive = false;\n        }\n    }\n    onBeforeShow(msg) {\n        super.onBeforeShow(msg);\n        if (this._model) {\n            this._model.isActive = true;\n        }\n    }\n    _onTitleChanged() {\n        var _a, _b;\n        this._title.setTitle((_b = (_a = this._model) === null || _a === void 0 ? void 0 : _a.title) !== null && _b !== void 0 ? _b : this._trans.__('Table of Contents'));\n    }\n}\n/**\n * Private helpers namespace\n */\nvar Private;\n(function (Private) {\n    /**\n     * Panel header\n     */\n    class Header extends Widget {\n        /**\n         * Constructor\n         *\n         * @param title - Title text\n         */\n        constructor(title) {\n            const node = document.createElement('h2');\n            node.textContent = title;\n            node.classList.add('jp-text-truncated');\n            super({ node });\n            this._title = node;\n        }\n        /**\n         * Set the header title.\n         */\n        setTitle(title) {\n            this._title.textContent = title;\n        }\n    }\n    Private.Header = Header;\n})(Private || (Private = {}));\n//# sourceMappingURL=panel.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { TreeItem } from '@jupyter/react-components';\n/**\n * React component for a table of contents entry.\n */\nexport class TableOfContentsItem extends React.PureComponent {\n    /**\n     * Renders a table of contents entry.\n     *\n     * @returns rendered entry\n     */\n    render() {\n        const { children, isActive, heading, onCollapse, onMouseDown } = this.props;\n        // Handling toggle of collapse and expand\n        const handleToggle = (event) => {\n            // This will toggle the state and call the appropriate collapse or expand function\n            if (!event.defaultPrevented &&\n                event.target.expanded !== !heading.collapsed) {\n                event.preventDefault();\n                onCollapse(heading);\n            }\n        };\n        return (React.createElement(TreeItem, { className: 'jp-tocItem jp-TreeItem nested', selected: isActive, expanded: !heading.collapsed, onExpand: handleToggle, onMouseDown: (event) => {\n                // React only on deepest item\n                if (!event.defaultPrevented) {\n                    event.preventDefault();\n                    onMouseDown(heading);\n                }\n            }, onKeyUp: event => {\n                // React on key up because key down is used for tree view navigation\n                // and therefore key-down on Enter is default prevented to change the\n                // selection state\n                if (!event.defaultPrevented && event.key === 'Enter' && !isActive) {\n                    event.preventDefault();\n                    onMouseDown(heading);\n                }\n            } },\n            React.createElement(\"div\", { className: \"jp-tocItem-heading\" },\n                React.createElement(\"span\", { className: \"jp-tocItem-content\", title: heading.text, ...heading.dataset },\n                    heading.prefix,\n                    heading.text)),\n            children));\n    }\n}\n//# sourceMappingURL=tocitem.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { TreeView } from '@jupyter/react-components';\nimport * as React from 'react';\nimport { TableOfContentsItem } from './tocitem';\n/**\n * React component for a table of contents tree.\n */\nexport class TableOfContentsTree extends React.PureComponent {\n    /**\n     * Renders a table of contents tree.\n     */\n    render() {\n        const { documentType } = this.props;\n        return (React.createElement(TreeView, { className: 'jp-TableOfContents-content jp-TreeView', 'data-document-type': documentType }, this.buildTree()));\n    }\n    /**\n     * Convert the flat headings list to a nested tree list\n     */\n    buildTree() {\n        if (this.props.headings.length === 0) {\n            return [];\n        }\n        const buildOneTree = (currentIndex) => {\n            const items = this.props.headings;\n            const children = new Array();\n            const current = items[currentIndex];\n            let nextCandidateIndex = currentIndex + 1;\n            while (nextCandidateIndex < items.length) {\n                const candidateItem = items[nextCandidateIndex];\n                if (candidateItem.level <= current.level) {\n                    break;\n                }\n                const [child, nextIndex] = buildOneTree(nextCandidateIndex);\n                children.push(child);\n                nextCandidateIndex = nextIndex;\n            }\n            const currentTree = (React.createElement(TableOfContentsItem, { key: `${current.level}-${currentIndex}-${current.text}`, isActive: !!this.props.activeHeading && current === this.props.activeHeading, heading: current, onMouseDown: this.props.setActiveHeading, onCollapse: this.props.onCollapseChange }, children.length ? children : null));\n            return [currentTree, nextCandidateIndex];\n        };\n        const trees = new Array();\n        let currentIndex = 0;\n        while (currentIndex < this.props.headings.length) {\n            const [tree, nextIndex] = buildOneTree(currentIndex);\n            trees.push(tree);\n            currentIndex = nextIndex;\n        }\n        return trees;\n    }\n}\n//# sourceMappingURL=toctree.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { VDomRenderer } from '@jupyterlab/ui-components';\nimport * as React from 'react';\nimport { TableOfContentsTree } from './toctree';\n/**\n * Table of contents widget.\n */\nexport class TableOfContentsWidget extends VDomRenderer {\n    /**\n     * Constructor\n     *\n     * @param options Widget options\n     */\n    constructor(options) {\n        super(options.model);\n        this._placeholderHeadline = options.placeholderHeadline;\n        this._placeholderText = options.placeholderText;\n    }\n    /**\n     * Render the content of this widget using the virtual DOM.\n     *\n     * This method will be called anytime the widget needs to be rendered, which\n     * includes layout triggered rendering.\n     */\n    render() {\n        if (!this.model || this.model.headings.length === 0) {\n            return (React.createElement(\"div\", { className: \"jp-TableOfContents-placeholder\" },\n                React.createElement(\"div\", { className: \"jp-TableOfContents-placeholderContent\" },\n                    React.createElement(\"h3\", null, this._placeholderHeadline),\n                    React.createElement(\"p\", null, this._placeholderText))));\n        }\n        return (React.createElement(TableOfContentsTree, { activeHeading: this.model.activeHeading, documentType: this.model.documentType, headings: this.model.headings, onCollapseChange: (heading) => {\n                this.model.toggleCollapse({ heading });\n            }, setActiveHeading: (heading) => {\n                this.model.setActiveHeading(heading);\n            } }));\n    }\n}\n//# sourceMappingURL=treeview.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DisposableDelegate } from '@lumino/disposable';\n/**\n * Class for registering table of contents generators.\n */\nexport class TableOfContentsRegistry {\n    constructor() {\n        this._generators = new Map();\n        this._idCounter = 0;\n    }\n    /**\n     * Finds a table of contents model for a widget.\n     *\n     * ## Notes\n     *\n     * -   If unable to find a table of contents model, the method return `undefined`.\n     *\n     * @param widget - widget\n     * @param configuration - Default model configuration\n     * @returns Table of contents model\n     */\n    getModel(widget, configuration) {\n        for (const generator of this._generators.values()) {\n            if (generator.isApplicable(widget)) {\n                return generator.createNew(widget, configuration);\n            }\n        }\n    }\n    /**\n     * Adds a table of contents generator to the registry.\n     *\n     * @param generator - table of contents generator\n     */\n    add(generator) {\n        const id = this._idCounter++;\n        this._generators.set(id, generator);\n        return new DisposableDelegate(() => {\n            this._generators.delete(id);\n        });\n    }\n}\n//# sourceMappingURL=registry.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Table of contents tracker\n */\nexport class TableOfContentsTracker {\n    /**\n     * Constructor\n     */\n    constructor() {\n        this.modelMapping = new WeakMap();\n    }\n    /**\n     * Track a given model.\n     *\n     * @param widget Widget\n     * @param model Table of contents model\n     */\n    add(widget, model) {\n        this.modelMapping.set(widget, model);\n    }\n    /**\n     * Get the table of contents model associated with a given widget.\n     *\n     * @param widget Widget\n     * @returns The table of contents model\n     */\n    get(widget) {\n        const model = this.modelMapping.get(widget);\n        return !model || model.isDisposed ? null : model;\n    }\n}\n//# sourceMappingURL=tracker.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { TableOfContents } from '../tokens';\n/**\n * Class used to mark numbering prefix for headings in a document.\n */\nexport const NUMBERING_CLASS = 'numbering-entry';\n/**\n * Filter headings for table of contents and compute associated prefix\n *\n * @param headings Headings to process\n * @param options Options\n * @param initialLevels Initial levels for prefix computation\n * @returns Extracted headings\n */\nexport function filterHeadings(headings, options, initialLevels = []) {\n    const config = {\n        ...TableOfContents.defaultConfig,\n        ...options\n    };\n    const levels = initialLevels;\n    let previousLevel = levels.length;\n    const filteredHeadings = new Array();\n    for (const heading of headings) {\n        if (heading.skip) {\n            continue;\n        }\n        const level = heading.level;\n        if (level > 0 && level <= config.maximalDepth) {\n            const prefix = getPrefix(level, previousLevel, levels, config);\n            previousLevel = level;\n            filteredHeadings.push({\n                ...heading,\n                prefix\n            });\n        }\n    }\n    return filteredHeadings;\n}\n/**\n * Returns whether a MIME type corresponds to either HTML.\n *\n * @param mime - MIME type string\n * @returns boolean indicating whether a provided MIME type corresponds to either HTML\n *\n * @example\n * const bool = isHTML('text/html');\n * // returns true\n *\n * @example\n * const bool = isHTML('text/plain');\n * // returns false\n */\nexport function isHTML(mime) {\n    return mime === 'text/html';\n}\n/**\n * Parse a HTML string for headings.\n *\n * ### Notes\n * The html string is not sanitized - use with caution\n *\n * @param html HTML string to parse\n * @param force Whether to ignore HTML headings with class jp-toc-ignore and tocSkip or not\n * @returns Extracted headings\n */\nexport function getHTMLHeadings(html, force = true) {\n    var _a;\n    const container = document.createElement('div');\n    container.innerHTML = html;\n    const headings = new Array();\n    const headers = container.querySelectorAll('h1, h2, h3, h4, h5, h6');\n    for (const h of headers) {\n        const level = parseInt(h.tagName[1], 10);\n        headings.push({\n            text: (_a = h.textContent) !== null && _a !== void 0 ? _a : '',\n            level,\n            id: h === null || h === void 0 ? void 0 : h.getAttribute('id'),\n            skip: h.classList.contains('jp-toc-ignore') || h.classList.contains('tocSkip')\n        });\n    }\n    return headings;\n}\n/**\n * Add an heading prefix to a HTML node.\n *\n * @param container HTML node containing the heading\n * @param selector Heading selector\n * @param prefix Title prefix to add\n * @returns The modified HTML element\n */\nexport function addPrefix(container, selector, prefix) {\n    let element = container.querySelector(selector);\n    if (!element) {\n        return null;\n    }\n    if (!element.querySelector(`span.${NUMBERING_CLASS}`)) {\n        addNumbering(element, prefix);\n    }\n    else {\n        // There are likely multiple elements with the same selector\n        //  => use the first one without prefix\n        const allElements = container.querySelectorAll(selector);\n        for (const el of allElements) {\n            if (!el.querySelector(`span.${NUMBERING_CLASS}`)) {\n                element = el;\n                addNumbering(el, prefix);\n                break;\n            }\n        }\n    }\n    return element;\n}\n/**\n * Update the levels and create the numbering prefix\n *\n * @param level Current level\n * @param previousLevel Previous level\n * @param levels Levels list\n * @param options Options\n * @returns The numbering prefix\n */\nexport function getPrefix(level, previousLevel, levels, options) {\n    const { baseNumbering, numberingH1, numberHeaders } = options;\n    let prefix = '';\n    if (numberHeaders) {\n        const highestLevel = numberingH1 ? 1 : 2;\n        if (level > previousLevel) {\n            // Initialize the new levels\n            for (let l = previousLevel; l < level - 1; l++) {\n                levels[l] = 0;\n            }\n            levels[level - 1] = level === highestLevel ? baseNumbering : 1;\n        }\n        else {\n            // Increment the current level\n            levels[level - 1] += 1;\n            // Drop higher levels\n            if (level < previousLevel) {\n                levels.splice(level);\n            }\n        }\n        // If the header list skips some level, replace missing elements by 0\n        if (numberingH1) {\n            prefix = levels.map(level => level !== null && level !== void 0 ? level : 0).join('.') + '. ';\n        }\n        else {\n            if (levels.length > 1) {\n                prefix =\n                    levels\n                        .slice(1)\n                        .map(level => level !== null && level !== void 0 ? level : 0)\n                        .join('.') + '. ';\n            }\n        }\n    }\n    return prefix;\n}\n/**\n * Add a numbering prefix to a HTML element.\n *\n * @param el HTML element\n * @param numbering Numbering prefix to add\n */\nfunction addNumbering(el, numbering) {\n    el.insertAdjacentHTML('afterbegin', `<span class=\"${NUMBERING_CLASS}\">${numbering}</span>`);\n}\n/**\n * Remove all numbering nodes from element\n * @param element Node to clear\n */\nexport function clearNumbering(element) {\n    element === null || element === void 0 ? void 0 : element.querySelectorAll(`span.${NUMBERING_CLASS}`).forEach(el => {\n        el.remove();\n    });\n}\n//# sourceMappingURL=common.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Sanitizer } from '@jupyterlab/apputils';\nimport { renderMarkdown } from '@jupyterlab/rendermime';\n/**\n * Build the heading html id.\n *\n * @param raw Raw markdown heading\n * @param level Heading level\n * @param sanitizer HTML sanitizer\n */\nexport async function getHeadingId(markdownParser, raw, level, sanitizer) {\n    try {\n        const host = document.createElement('div');\n        await renderMarkdown({\n            markdownParser,\n            host,\n            source: raw,\n            trusted: false,\n            sanitizer: sanitizer !== null && sanitizer !== void 0 ? sanitizer : new Sanitizer(),\n            shouldTypeset: false,\n            resolver: null,\n            linkHandler: null,\n            latexTypesetter: null\n        });\n        const header = host.querySelector(`h${level}`);\n        if (!header) {\n            return null;\n        }\n        return header.id;\n    }\n    catch (reason) {\n        console.error('Failed to parse a heading.', reason);\n    }\n    return null;\n}\n/**\n * Parses the provided string and returns a list of headings.\n *\n * @param text - Input text\n * @returns List of headings\n */\nexport function getHeadings(text) {\n    // Split the text into lines:\n    const lines = text.split('\\n');\n    // Iterate over the lines to get the header level and text for each line:\n    const headings = new Array();\n    let isCodeBlock;\n    let openingFence = 0;\n    let fenceType;\n    let lineIdx = 0;\n    // Don't check for Markdown headings if in a YAML frontmatter block.\n    // We can only start a frontmatter block on the first line of the file.\n    // At other positions in a markdown file, '---' represents a horizontal rule.\n    if (lines[lineIdx] === '---') {\n        // Search for another '---' and treat that as the end of the frontmatter.\n        // If we don't find one, treat the file as containing no frontmatter.\n        for (let frontmatterEndLineIdx = lineIdx + 1; frontmatterEndLineIdx < lines.length; frontmatterEndLineIdx++) {\n            if (lines[frontmatterEndLineIdx] === '---') {\n                lineIdx = frontmatterEndLineIdx + 1;\n                break;\n            }\n        }\n    }\n    for (; lineIdx < lines.length; lineIdx++) {\n        const line = lines[lineIdx];\n        if (line === '') {\n            // Bail early\n            continue;\n        }\n        // Don't check for Markdown headings if in a code block\n        if (line.startsWith('```') || line.startsWith('~~~')) {\n            const closingFence = extractLeadingFences(line);\n            if (closingFence === 0)\n                continue;\n            if (openingFence === 0) {\n                fenceType = line.charAt(0);\n                isCodeBlock = !isCodeBlock;\n                openingFence = closingFence;\n                continue;\n            }\n            else if (fenceType === line.charAt(0) && closingFence >= openingFence) {\n                isCodeBlock = !isCodeBlock;\n                openingFence = 0;\n                fenceType = '';\n            }\n        }\n        if (isCodeBlock) {\n            continue;\n        }\n        const heading = parseHeading(line, lines[lineIdx + 1]); // append the next line to capture alternative style Markdown headings\n        if (heading) {\n            headings.push({\n                ...heading,\n                line: lineIdx\n            });\n        }\n    }\n    return headings;\n}\n// Returns the length of ``` or ~~~ fences.\nfunction extractLeadingFences(line) {\n    let match;\n    if (line.startsWith('`'))\n        match = line.match(/^(`{3,})/);\n    else\n        match = line.match(/^(~{3,})/);\n    return match ? match[0].length : 0;\n}\nconst MARKDOWN_MIME_TYPE = [\n    'text/x-ipythongfm',\n    'text/x-markdown',\n    'text/x-gfm',\n    'text/markdown'\n];\n/**\n * Returns whether a MIME type corresponds to a Markdown flavor.\n *\n * @param mime - MIME type string\n * @returns boolean indicating whether a provided MIME type corresponds to a Markdown flavor\n *\n * @example\n * const bool = isMarkdown('text/markdown');\n * // returns true\n *\n * @example\n * const bool = isMarkdown('text/plain');\n * // returns false\n */\nexport function isMarkdown(mime) {\n    return MARKDOWN_MIME_TYPE.includes(mime);\n}\n/**\n * Parses a heading, if one exists, from a provided string.\n *\n * ## Notes\n *\n * -   Heading examples:\n *\n *     -   Markdown heading:\n *\n *         ```\n *         # Foo\n *         ```\n *\n *     -   Markdown heading (alternative style):\n *\n *         ```\n *         Foo\n *         ===\n *         ```\n *\n *         ```\n *         Foo\n *         ---\n *         ```\n *\n *     -   HTML heading:\n *\n *         ```\n *         <h3>Foo</h3>\n *         ```\n *\n * @private\n * @param line - Line to parse\n * @param nextLine - The line after the one to parse\n * @returns heading info\n *\n * @example\n * const out = parseHeading('### Foo\\n');\n * // returns {'text': 'Foo', 'level': 3}\n *\n * @example\n * const out = parseHeading('Foo\\n===\\n');\n * // returns {'text': 'Foo', 'level': 1}\n *\n * @example\n * const out = parseHeading('<h4>Foo</h4>\\n');\n * // returns {'text': 'Foo', 'level': 4}\n *\n * @example\n * const out = parseHeading('Foo');\n * // returns null\n */\nfunction parseHeading(line, nextLine) {\n    // Case: Markdown heading\n    let match = line.match(/^([#]{1,6}) (.*)/);\n    if (match) {\n        return {\n            text: cleanTitle(match[2]),\n            level: match[1].length,\n            raw: line,\n            skip: skipHeading.test(match[0])\n        };\n    }\n    // Case: Markdown heading (alternative style)\n    if (nextLine) {\n        match = nextLine.match(/^ {0,3}([=]{2,}|[-]{2,})\\s*$/);\n        if (match) {\n            return {\n                text: cleanTitle(line),\n                level: match[1][0] === '=' ? 1 : 2,\n                raw: [line, nextLine].join('\\n'),\n                skip: skipHeading.test(line)\n            };\n        }\n    }\n    // Case: HTML heading (WARNING: this is not particularly robust, as HTML headings can span multiple lines)\n    match = line.match(/<h([1-6]).*>(.*)<\\/h\\1>/i);\n    if (match) {\n        return {\n            text: match[2],\n            level: parseInt(match[1], 10),\n            skip: skipHeading.test(match[0]),\n            raw: line\n        };\n    }\n    return null;\n}\nfunction cleanTitle(heading) {\n    // take special care to parse Markdown links into raw text\n    return heading.replace(/\\[(.+)\\]\\(.+\\)/g, '$1');\n}\n/**\n * Ignore title with html tag with a class name equal to `jp-toc-ignore` or `tocSkip`\n */\nconst skipHeading = /<\\w+\\s(.*?\\s)?class=\"(.*?\\s)?(jp-toc-ignore|tocSkip)(\\s.*?)?\"(\\s.*?)?>/;\n//# sourceMappingURL=markdown.js.map"],"names":["TableOfContentsFactory","constructor","tracker","this","isApplicable","widget","has","createNew","configuration","model","_createNew","context","updateHeadings","refresh","catch","reason","console","error","monitor","ActivityMonitor","signal","contentChanged","timeout","activityStopped","connect","updateTitle","title","PathExt","basename","localPath","pathChanged","ready","then","disposed","disconnect","ITableOfContentsRegistry","Token","ITableOfContentsTracker","TableOfContents","defaultConfig","baseNumbering","maximalDepth","numberingH1","numberHeaders","includeOutput","syncCollapseState","TableOfContentsModel","VDomModel","super","_activeHeading","_activeHeadingChanged","Signal","_collapseChanged","_configuration","_headings","Array","_headingsChanged","_isActive","_isRefreshing","_needsRefreshing","activeHeading","activeHeadingChanged","collapseChanged","headings","headingsChanged","isActive","v","isAlwaysActive","supportedOptions","_title","stateChanged","emit","Promise","resolve","newHeadings","getHeadings","_areHeadingsEqual","setActiveHeading","heading","emitSignal","setConfiguration","c","newConfiguration","JSONExt","deepEqual","toggleCollapse","options","_a","_b","collapsed","newState","some","h","forEach","isHeadingEqual","heading1","heading2","level","text","prefix","headings1","headings2","length","i","Private","TableOfContentsItem","render","children","onCollapse","onMouseDown","props","TreeItem","className","selected","expanded","onExpand","event","defaultPrevented","target","preventDefault","onKeyUp","key","dataset","TableOfContentsTree","documentType","TreeView","buildTree","buildOneTree","currentIndex","items","current","nextCandidateIndex","child","nextIndex","push","onCollapseChange","trees","tree","TableOfContentsWidget","VDomRenderer","_placeholderHeadline","placeholderHeadline","_placeholderText","placeholderText","TableOfContentsPanel","SidePanel","translator","content","Panel","_model","addClass","Header","_trans","__","header","addWidget","_treeview","newValue","_onTitleChanged","isVisible","onAfterHide","msg","onBeforeShow","setTitle","Widget","node","document","createElement","textContent","classList","add","TableOfContentsRegistry","_generators","Map","_idCounter","getModel","generator","values","id","set","DisposableDelegate","delete","TableOfContentsTracker","modelMapping","WeakMap","get","isDisposed","NUMBERING_CLASS","filterHeadings","initialLevels","config","levels","previousLevel","filteredHeadings","skip","getPrefix","isHTML","mime","getHTMLHeadings","html","force","container","innerHTML","headers","querySelectorAll","parseInt","tagName","getAttribute","contains","addPrefix","selector","element","querySelector","allElements","el","addNumbering","highestLevel","l","splice","map","join","slice","numbering","insertAdjacentHTML","clearNumbering","remove","async","getHeadingId","markdownParser","raw","sanitizer","host","renderMarkdown","source","trusted","Sanitizer","shouldTypeset","resolver","linkHandler","latexTypesetter","lines","split","isCodeBlock","fenceType","openingFence","lineIdx","frontmatterEndLineIdx","line","startsWith","closingFence","extractLeadingFences","charAt","parseHeading","match","MARKDOWN_MIME_TYPE","isMarkdown","includes","nextLine","cleanTitle","skipHeading","test","replace"],"sourceRoot":""}