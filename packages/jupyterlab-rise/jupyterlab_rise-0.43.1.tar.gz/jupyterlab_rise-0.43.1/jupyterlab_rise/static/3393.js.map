{"version":3,"file":"3393.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/mimetype.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/editor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/jsoneditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/lineCol.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/viewer.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * A namespace for `IEditorMimeTypeService`.\n */\nexport var IEditorMimeTypeService;\n(function (IEditorMimeTypeService) {\n    /**\n     * The default mime type.\n     */\n    IEditorMimeTypeService.defaultMimeType = 'text/plain';\n})(IEditorMimeTypeService || (IEditorMimeTypeService = {}));\n//# sourceMappingURL=mimetype.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { YFile } from '@jupyter/ydoc';\nimport { ObservableMap } from '@jupyterlab/observables';\nimport { Signal } from '@lumino/signaling';\nimport { IEditorMimeTypeService } from './mimetype';\n/**\n * A namespace for code editors.\n *\n * #### Notes\n * - A code editor is a set of common assumptions which hold for all concrete editors.\n * - Changes in implementations of the code editor should only be caused by changes in concrete editors.\n * - Common JLab services which are based on the code editor should belong to `IEditorServices`.\n */\nexport var CodeEditor;\n(function (CodeEditor) {\n    /**\n     * The default implementation of the editor model.\n     */\n    class Model {\n        /**\n         * Construct a new Model.\n         */\n        constructor(options = {}) {\n            var _a, _b;\n            /**\n             * Whether the model should disposed the shared model on disposal or not.\n             */\n            this.standaloneModel = false;\n            this._isDisposed = false;\n            this._selections = new ObservableMap();\n            this._mimeType = IEditorMimeTypeService.defaultMimeType;\n            this._mimeTypeChanged = new Signal(this);\n            // Track if we need to dispose the model or not.\n            this.standaloneModel = typeof options.sharedModel === 'undefined';\n            this.sharedModel = (_a = options.sharedModel) !== null && _a !== void 0 ? _a : new YFile();\n            this._mimeType =\n                (_b = options.mimeType) !== null && _b !== void 0 ? _b : IEditorMimeTypeService.defaultMimeType;\n        }\n        /**\n         * A signal emitted when a mimetype changes.\n         */\n        get mimeTypeChanged() {\n            return this._mimeTypeChanged;\n        }\n        /**\n         * Get the selections for the model.\n         */\n        get selections() {\n            return this._selections;\n        }\n        /**\n         * A mime type of the model.\n         */\n        get mimeType() {\n            return this._mimeType;\n        }\n        set mimeType(newValue) {\n            const oldValue = this.mimeType;\n            if (oldValue === newValue) {\n                return;\n            }\n            this._mimeType = newValue;\n            this._mimeTypeChanged.emit({\n                name: 'mimeType',\n                oldValue: oldValue,\n                newValue: newValue\n            });\n        }\n        /**\n         * Whether the model is disposed.\n         */\n        get isDisposed() {\n            return this._isDisposed;\n        }\n        /**\n         * Dispose of the resources used by the model.\n         */\n        dispose() {\n            if (this._isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            this._selections.dispose();\n            if (this.standaloneModel) {\n                this.sharedModel.dispose();\n            }\n            Signal.clearData(this);\n        }\n    }\n    CodeEditor.Model = Model;\n})(CodeEditor || (CodeEditor = {}));\n//# sourceMappingURL=editor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { checkIcon, undoIcon } from '@jupyterlab/ui-components';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Widget } from '@lumino/widgets';\nimport { CodeEditor } from './editor';\n/**\n * The class name added to a JSONEditor instance.\n */\nconst JSONEDITOR_CLASS = 'jp-JSONEditor';\n/**\n * The class name added when the Metadata editor contains invalid JSON.\n */\nconst ERROR_CLASS = 'jp-mod-error';\n/**\n * The class name added to the editor host node.\n */\nconst HOST_CLASS = 'jp-JSONEditor-host';\n/**\n * The class name added to the header area.\n */\nconst HEADER_CLASS = 'jp-JSONEditor-header';\n/**\n * A widget for editing observable JSON.\n */\nexport class JSONEditor extends Widget {\n    /**\n     * Construct a new JSON editor.\n     */\n    constructor(options) {\n        super();\n        this._dataDirty = false;\n        this._inputDirty = false;\n        this._source = null;\n        this._originalValue = JSONExt.emptyObject;\n        this._changeGuard = false;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.addClass(JSONEDITOR_CLASS);\n        this.headerNode = document.createElement('div');\n        this.headerNode.className = HEADER_CLASS;\n        this.revertButtonNode = undoIcon.element({\n            tag: 'span',\n            title: this._trans.__('Revert changes to data')\n        });\n        this.commitButtonNode = checkIcon.element({\n            tag: 'span',\n            title: this._trans.__('Commit changes to data'),\n            marginLeft: '8px'\n        });\n        this.editorHostNode = document.createElement('div');\n        this.editorHostNode.className = HOST_CLASS;\n        this.headerNode.appendChild(this.revertButtonNode);\n        this.headerNode.appendChild(this.commitButtonNode);\n        this.node.appendChild(this.headerNode);\n        this.node.appendChild(this.editorHostNode);\n        const model = new CodeEditor.Model({ mimeType: 'application/json' });\n        model.sharedModel.changed.connect(this._onModelChanged, this);\n        this.model = model;\n        this.editor = options.editorFactory({\n            host: this.editorHostNode,\n            model,\n            config: {\n                readOnly: true\n            }\n        });\n    }\n    /**\n     * The observable source.\n     */\n    get source() {\n        return this._source;\n    }\n    set source(value) {\n        if (this._source === value) {\n            return;\n        }\n        if (this._source) {\n            this._source.changed.disconnect(this._onSourceChanged, this);\n        }\n        this._source = value;\n        this.editor.setOption('readOnly', value === null);\n        if (value) {\n            value.changed.connect(this._onSourceChanged, this);\n        }\n        this._setValue();\n    }\n    /**\n     * Get whether the editor is dirty.\n     */\n    get isDirty() {\n        return this._dataDirty || this._inputDirty;\n    }\n    /**\n     * Dispose of the editor.\n     */\n    dispose() {\n        var _a;\n        if (this.isDisposed) {\n            return;\n        }\n        (_a = this.source) === null || _a === void 0 ? void 0 : _a.dispose();\n        this.model.dispose();\n        this.editor.dispose();\n        super.dispose();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'blur':\n                this._evtBlur(event);\n                break;\n            case 'click':\n                this._evtClick(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        const node = this.editorHostNode;\n        node.addEventListener('blur', this, true);\n        node.addEventListener('click', this, true);\n        this.revertButtonNode.hidden = true;\n        this.commitButtonNode.hidden = true;\n        this.headerNode.addEventListener('click', this);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.editorHostNode;\n        node.removeEventListener('blur', this, true);\n        node.removeEventListener('click', this, true);\n        this.headerNode.removeEventListener('click', this);\n    }\n    /**\n     * Handle a change to the metadata of the source.\n     */\n    _onSourceChanged(sender, args) {\n        if (this._changeGuard) {\n            return;\n        }\n        if (this._inputDirty || this.editor.hasFocus()) {\n            this._dataDirty = true;\n            return;\n        }\n        this._setValue();\n    }\n    /**\n     * Handle change events.\n     */\n    _onModelChanged(model, change) {\n        if (change.sourceChange) {\n            let valid = true;\n            try {\n                const value = JSON.parse(this.editor.model.sharedModel.getSource());\n                this.removeClass(ERROR_CLASS);\n                this._inputDirty =\n                    !this._changeGuard && !JSONExt.deepEqual(value, this._originalValue);\n            }\n            catch (err) {\n                this.addClass(ERROR_CLASS);\n                this._inputDirty = true;\n                valid = false;\n            }\n            this.revertButtonNode.hidden = !this._inputDirty;\n            this.commitButtonNode.hidden = !valid || !this._inputDirty;\n        }\n    }\n    /**\n     * Handle blur events for the text area.\n     */\n    _evtBlur(event) {\n        // Update the metadata if necessary.\n        if (!this._inputDirty && this._dataDirty) {\n            this._setValue();\n        }\n    }\n    /**\n     * Handle click events for the buttons.\n     */\n    _evtClick(event) {\n        const target = event.target;\n        if (this.revertButtonNode.contains(target)) {\n            this._setValue();\n        }\n        else if (this.commitButtonNode.contains(target)) {\n            if (!this.commitButtonNode.hidden && !this.hasClass(ERROR_CLASS)) {\n                this._changeGuard = true;\n                this._mergeContent();\n                this._changeGuard = false;\n                this._setValue();\n            }\n        }\n        else if (this.editorHostNode.contains(target)) {\n            this.editor.focus();\n        }\n    }\n    /**\n     * Merge the user content.\n     */\n    _mergeContent() {\n        const model = this.editor.model;\n        const old = this._originalValue;\n        const user = JSON.parse(model.sharedModel.getSource());\n        const source = this.source;\n        if (!source) {\n            return;\n        }\n        // If it is in user and has changed from old, set in new.\n        for (const key in user) {\n            if (!JSONExt.deepEqual(user[key], old[key] || null)) {\n                source.set(key, user[key]);\n            }\n        }\n        // If it was in old and is not in user, remove from source.\n        for (const key in old) {\n            if (!(key in user)) {\n                source.delete(key);\n            }\n        }\n    }\n    /**\n     * Set the value given the owner contents.\n     */\n    _setValue() {\n        this._dataDirty = false;\n        this._inputDirty = false;\n        this.revertButtonNode.hidden = true;\n        this.commitButtonNode.hidden = true;\n        this.removeClass(ERROR_CLASS);\n        const model = this.editor.model;\n        const content = this._source ? this._source.toJSON() : {};\n        this._changeGuard = true;\n        if (content === void 0) {\n            model.sharedModel.setSource(this._trans.__('No data!'));\n            this._originalValue = JSONExt.emptyObject;\n        }\n        else {\n            const value = JSON.stringify(content, null, 4);\n            model.sharedModel.setSource(value);\n            this._originalValue = content;\n            // Move the cursor to within the brace.\n            if (value.length > 1 && value[0] === '{') {\n                this.editor.setCursorPosition({ line: 0, column: 1 });\n            }\n        }\n        this._changeGuard = false;\n        this.commitButtonNode.hidden = true;\n        this.revertButtonNode.hidden = true;\n    }\n}\n//# sourceMappingURL=jsoneditor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showPopup, TextItem } from '@jupyterlab/statusbar';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { classes, lineFormIcon, ReactWidget, VDomModel, VDomRenderer } from '@jupyterlab/ui-components';\nimport React from 'react';\nimport { DOMUtils } from '@jupyterlab/apputils';\n/**\n * A component for rendering a \"go-to-line\" form.\n */\nclass LineFormComponent extends React.Component {\n    /**\n     * Construct a new LineFormComponent.\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Handle a change to the value in the input field.\n         */\n        this._handleChange = (event) => {\n            this.setState({ value: event.currentTarget.value });\n        };\n        /**\n         * Handle submission of the input field.\n         */\n        this._handleSubmit = (event) => {\n            event.preventDefault();\n            const value = parseInt(this._textInput.value, 10);\n            if (!isNaN(value) &&\n                isFinite(value) &&\n                1 <= value &&\n                value <= this.props.maxLine) {\n                this.props.handleSubmit(value);\n            }\n            return false;\n        };\n        /**\n         * Handle focusing of the input field.\n         */\n        this._handleFocus = () => {\n            this.setState({ hasFocus: true });\n        };\n        /**\n         * Handle blurring of the input field.\n         */\n        this._handleBlur = () => {\n            this.setState({ hasFocus: false });\n        };\n        this._textInput = null;\n        this.translator = props.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.state = {\n            value: '',\n            hasFocus: false,\n            textInputId: DOMUtils.createDomID() + '-line-number-input'\n        };\n    }\n    /**\n     * Focus the element on mount.\n     */\n    componentDidMount() {\n        this._textInput.focus();\n    }\n    /**\n     * Render the LineFormComponent.\n     */\n    render() {\n        return (React.createElement(\"div\", { className: \"jp-lineFormSearch\" },\n            React.createElement(\"form\", { name: \"lineColumnForm\", onSubmit: this._handleSubmit, noValidate: true },\n                React.createElement(\"div\", { className: classes('jp-lineFormWrapper', 'lm-lineForm-wrapper', this.state.hasFocus ? 'jp-lineFormWrapperFocusWithin' : undefined) },\n                    React.createElement(\"input\", { type: \"text\", id: this.state.textInputId, className: \"jp-lineFormInput\", onChange: this._handleChange, onFocus: this._handleFocus, onBlur: this._handleBlur, value: this.state.value, ref: input => {\n                            this._textInput = input;\n                        } }),\n                    React.createElement(\"div\", { className: \"jp-baseLineForm jp-lineFormButtonContainer\" },\n                        React.createElement(lineFormIcon.react, { className: \"jp-baseLineForm jp-lineFormButtonIcon\", elementPosition: \"center\" }),\n                        React.createElement(\"input\", { type: \"submit\", className: \"jp-baseLineForm jp-lineFormButton\", value: \"\" }))),\n                React.createElement(\"label\", { className: \"jp-lineFormCaption\", htmlFor: this.state.textInputId }, this._trans.__('Go to line number between 1 and %1', this.props.maxLine)))));\n    }\n}\n/**\n * A pure functional component for rendering a line/column\n * status item.\n */\nfunction LineColComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const keydownHandler = (event) => {\n        if (event.key === 'Enter' ||\n            event.key === 'Spacebar' ||\n            event.key === ' ') {\n            event.preventDefault();\n            event.stopPropagation();\n            props.handleClick();\n        }\n        else {\n            return;\n        }\n    };\n    return (React.createElement(TextItem, { onClick: props.handleClick, source: trans.__('Ln %1, Col %2', props.line, props.column), title: trans.__('Go to line number…'), tabIndex: 0, onKeyDown: keydownHandler }));\n}\n/**\n * A widget implementing a line/column status item.\n */\nexport class LineCol extends VDomRenderer {\n    /**\n     * Construct a new LineCol status item.\n     */\n    constructor(translator) {\n        super(new LineCol.Model());\n        this._popup = null;\n        this.addClass('jp-mod-highlighted');\n        this.translator = translator || nullTranslator;\n    }\n    /**\n     * Render the status item.\n     */\n    render() {\n        if (this.model === null) {\n            return null;\n        }\n        else {\n            return (React.createElement(LineColComponent, { line: this.model.line, column: this.model.column, translator: this.translator, handleClick: () => this._handleClick() }));\n        }\n    }\n    /**\n     * A click handler for the widget.\n     */\n    _handleClick() {\n        if (this._popup) {\n            this._popup.dispose();\n        }\n        const body = ReactWidget.create(React.createElement(LineFormComponent, { handleSubmit: val => this._handleSubmit(val), currentLine: this.model.line, maxLine: this.model.editor.lineCount, translator: this.translator }));\n        this._popup = showPopup({\n            body: body,\n            anchor: this,\n            align: 'right'\n        });\n    }\n    /**\n     * Handle submission for the widget.\n     */\n    _handleSubmit(value) {\n        this.model.editor.setCursorPosition({ line: value - 1, column: 0 });\n        this._popup.dispose();\n        this.model.editor.focus();\n    }\n}\n/**\n * A namespace for LineCol statics.\n */\n(function (LineCol) {\n    /**\n     * A VDom model for a status item tracking the line/column of an editor.\n     */\n    class Model extends VDomModel {\n        constructor() {\n            super(...arguments);\n            /**\n             * React to a change in the cursors of the current editor.\n             */\n            this._onSelectionChanged = () => {\n                const oldState = this._getAllState();\n                const pos = this.editor.getCursorPosition();\n                this._line = pos.line + 1;\n                this._column = pos.column + 1;\n                this._triggerChange(oldState, this._getAllState());\n            };\n            this._line = 1;\n            this._column = 1;\n            this._editor = null;\n        }\n        /**\n         * The current editor of the model.\n         */\n        get editor() {\n            return this._editor;\n        }\n        set editor(editor) {\n            var _a;\n            const oldEditor = this._editor;\n            if ((_a = oldEditor === null || oldEditor === void 0 ? void 0 : oldEditor.model) === null || _a === void 0 ? void 0 : _a.selections) {\n                oldEditor.model.selections.changed.disconnect(this._onSelectionChanged);\n            }\n            const oldState = this._getAllState();\n            this._editor = editor;\n            if (!this._editor) {\n                this._column = 1;\n                this._line = 1;\n            }\n            else {\n                this._editor.model.selections.changed.connect(this._onSelectionChanged);\n                const pos = this._editor.getCursorPosition();\n                this._column = pos.column + 1;\n                this._line = pos.line + 1;\n            }\n            this._triggerChange(oldState, this._getAllState());\n        }\n        /**\n         * The current line of the model.\n         */\n        get line() {\n            return this._line;\n        }\n        /**\n         * The current column of the model.\n         */\n        get column() {\n            return this._column;\n        }\n        _getAllState() {\n            return [this._line, this._column];\n        }\n        _triggerChange(oldState, newState) {\n            if (oldState[0] !== newState[0] || oldState[1] !== newState[1]) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    LineCol.Model = Model;\n})(LineCol || (LineCol = {}));\n//# sourceMappingURL=lineCol.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * A class added to editors that can host a completer.\n */\nexport const COMPLETER_ENABLED_CLASS = 'jp-mod-completer-enabled';\n/**\n * A class added to editors that have an active completer.\n */\nexport const COMPLETER_ACTIVE_CLASS = 'jp-mod-completer-active';\n/**\n * A class added to editors that have a cursor at the beginning of the line.\n */\nexport const COMPLETER_LINE_BEGINNING_CLASS = 'jp-mod-at-line-beginning';\n/**\n * Code editor services token.\n */\nexport const IEditorServices = new Token('@jupyterlab/codeeditor:IEditorServices', `A service for the text editor provider\n  for the application. Use this to create new text editors and host them in your\n  UI elements.`);\n/**\n * Code editor cursor position token.\n */\nexport const IPositionModel = new Token('@jupyterlab/codeeditor:IPositionModel', `A service to handle an code editor cursor position.`);\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to an editor widget that has a primary selection.\n */\nconst HAS_SELECTION_CLASS = 'jp-mod-has-primary-selection';\n/**\n * The class name added to an editor widget that has a cursor/selection\n * within the whitespace at the beginning of a line\n */\nconst HAS_IN_LEADING_WHITESPACE_CLASS = 'jp-mod-in-leading-whitespace';\n/**\n * A class used to indicate a drop target.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * RegExp to test for leading whitespace\n */\nconst leadingWhitespaceRe = /^\\s+$/;\n/**\n * A widget which hosts a code editor.\n */\nexport class CodeEditorWrapper extends Widget {\n    /**\n     * Construct a new code editor widget.\n     */\n    constructor(options) {\n        super();\n        const { factory, model, editorOptions } = options;\n        const editor = (this.editor = factory({\n            host: this.node,\n            model,\n            ...editorOptions\n        }));\n        editor.model.selections.changed.connect(this._onSelectionsChanged, this);\n    }\n    /**\n     * Get the model used by the widget.\n     */\n    get model() {\n        return this.editor.model;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this.editor.dispose();\n        super.dispose();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.editor.focus();\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('lm-dragenter', this);\n        node.addEventListener('lm-dragleave', this);\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('lm-dragenter', this);\n        node.removeEventListener('lm-dragleave', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    /**\n     * Handle a change in model selections.\n     */\n    _onSelectionsChanged() {\n        const { start, end } = this.editor.getSelection();\n        if (start.column !== end.column || start.line !== end.line) {\n            // a selection was made\n            this.addClass(HAS_SELECTION_CLASS);\n            this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n        }\n        else {\n            // the cursor was placed\n            this.removeClass(HAS_SELECTION_CLASS);\n            if (this.editor\n                .getLine(end.line)\n                .slice(0, end.column)\n                .match(leadingWhitespaceRe)) {\n                this.addClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n            }\n            else {\n                this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n            }\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        this.addClass('jp-mod-dropTarget');\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        this.removeClass(DROP_TARGET_CLASS);\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        this.removeClass(DROP_TARGET_CLASS);\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = 'copy';\n        this.addClass(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        const coordinate = {\n            top: event.y,\n            bottom: event.y,\n            left: event.x,\n            right: event.x\n        };\n        const position = this.editor.getPositionForCoordinate(coordinate);\n        if (position === null) {\n            return;\n        }\n        this.removeClass(DROP_TARGET_CLASS);\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        const offset = this.editor.getOffsetAt(position);\n        this.model.sharedModel.updateSource(offset, offset, data);\n    }\n}\n/**\n * A namespace for private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Given a MimeData instance, extract the first text data, if any.\n     */\n    function findTextData(mime) {\n        const types = mime.types();\n        const textType = types.find(t => t.indexOf('text') === 0);\n        if (textType === undefined) {\n            return undefined;\n        }\n        return mime.getData(textType);\n    }\n    Private.findTextData = findTextData;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { StackedLayout, Widget } from '@lumino/widgets';\nimport { CodeEditor } from './editor';\nimport { CodeEditorWrapper } from './widget';\nexport class CodeViewerWidget extends Widget {\n    /**\n     * Construct a new code viewer widget.\n     */\n    constructor(options) {\n        var _a;\n        super();\n        this.model = options.model;\n        const editorWidget = new CodeEditorWrapper({\n            factory: options.factory,\n            model: this.model,\n            editorOptions: {\n                ...options.editorOptions,\n                config: { ...(_a = options.editorOptions) === null || _a === void 0 ? void 0 : _a.config, readOnly: true }\n            }\n        });\n        this.editor = editorWidget.editor;\n        const layout = (this.layout = new StackedLayout());\n        layout.addWidget(editorWidget);\n    }\n    static createCodeViewer(options) {\n        const { content, mimeType, ...others } = options;\n        const model = new CodeEditor.Model({\n            mimeType\n        });\n        model.sharedModel.setSource(content);\n        const widget = new CodeViewerWidget({ ...others, model });\n        widget.disposed.connect(() => {\n            model.dispose();\n        });\n        return widget;\n    }\n    get content() {\n        return this.model.sharedModel.getSource();\n    }\n    get mimeType() {\n        return this.model.mimeType;\n    }\n}\n//# sourceMappingURL=viewer.js.map"],"names":["IEditorMimeTypeService","CodeEditor","defaultMimeType","Model","constructor","options","_a","_b","this","standaloneModel","_isDisposed","_selections","ObservableMap","_mimeType","_mimeTypeChanged","Signal","sharedModel","YFile","mimeType","mimeTypeChanged","selections","newValue","oldValue","emit","name","isDisposed","dispose","clearData","ERROR_CLASS","JSONEditor","Widget","super","_dataDirty","_inputDirty","_source","_originalValue","JSONExt","emptyObject","_changeGuard","translator","nullTranslator","_trans","load","addClass","headerNode","document","createElement","className","revertButtonNode","undoIcon","element","tag","title","__","commitButtonNode","checkIcon","marginLeft","editorHostNode","appendChild","node","model","changed","connect","_onModelChanged","editor","editorFactory","host","config","readOnly","source","value","disconnect","_onSourceChanged","setOption","_setValue","isDirty","handleEvent","event","type","_evtBlur","_evtClick","onAfterAttach","msg","addEventListener","hidden","onBeforeDetach","removeEventListener","sender","args","hasFocus","change","sourceChange","valid","JSON","parse","getSource","removeClass","deepEqual","err","target","contains","hasClass","_mergeContent","focus","old","user","key","set","delete","content","toJSON","setSource","stringify","length","setCursorPosition","line","column","LineFormComponent","props","_handleChange","setState","currentTarget","_handleSubmit","preventDefault","parseInt","_textInput","isNaN","isFinite","maxLine","handleSubmit","_handleFocus","_handleBlur","state","textInputId","DOMUtils","createDomID","componentDidMount","render","onSubmit","noValidate","classes","undefined","id","onChange","onFocus","onBlur","ref","input","lineFormIcon","react","elementPosition","htmlFor","LineColComponent","trans","TextItem","onClick","handleClick","tabIndex","onKeyDown","stopPropagation","LineCol","VDomRenderer","_popup","_handleClick","body","ReactWidget","create","val","currentLine","lineCount","showPopup","anchor","align","VDomModel","arguments","_onSelectionChanged","oldState","_getAllState","pos","getCursorPosition","_line","_column","_triggerChange","_editor","oldEditor","newState","stateChanged","COMPLETER_ENABLED_CLASS","COMPLETER_ACTIVE_CLASS","COMPLETER_LINE_BEGINNING_CLASS","IEditorServices","Token","IPositionModel","HAS_SELECTION_CLASS","HAS_IN_LEADING_WHITESPACE_CLASS","DROP_TARGET_CLASS","leadingWhitespaceRe","CodeEditorWrapper","factory","editorOptions","_onSelectionsChanged","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","onActivateRequest","start","end","getSelection","getLine","slice","match","getOption","Private","findTextData","mimeData","dropAction","data","coordinate","top","y","bottom","left","x","right","position","getPositionForCoordinate","proposedAction","offset","getOffsetAt","updateSource","mime","textType","types","find","t","indexOf","getData","CodeViewerWidget","editorWidget","layout","StackedLayout","addWidget","createCodeViewer","others","widget","disposed"],"sourceRoot":""}