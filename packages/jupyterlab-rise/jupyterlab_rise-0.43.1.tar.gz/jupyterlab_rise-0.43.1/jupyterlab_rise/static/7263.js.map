{"version":3,"file":"7263.bundle.js","mappings":"wPAaO,MAAMA,EACT,WAAAC,CAAYC,GACR,IAAIC,EACJC,KAAKC,WAAa,IAAI,EAAAC,OAAOF,MAC7BA,KAAKG,aAAc,EACnBH,KAAKI,eAAiB,CAClBC,IAAK,GACLC,OAAQ,IAEZN,KAAKO,SAAWT,EAAQU,QACxB,MAAMC,EAAkBX,EAAQW,iBAdP,IAezBT,KAAKU,MAAQ,IAAI,EAAAC,KAAK,CAClBC,KAA8B,QAAvBb,EAAKD,EAAQc,YAAyB,IAAPb,GAAgBA,EACtDc,KAAM,+BACNC,QAAS,IAAMd,KAAKe,aACpBC,UAAW,CACPC,SAAUR,EACVS,SAAS,EACTC,IAAK,KAETC,QAAStB,EAAQuB,gBAAkB,eAE3C,CAIA,cAAIC,GACA,OAAOtB,KAAKI,eAAeE,MAC/B,CAIA,eAAIiB,GACA,OAAOvB,KAAKI,eAAeC,GAC/B,CAIA,YAAMmB,CAAOC,SACHzB,KAAKO,SAASmB,KAAKD,EAAa,CAClCE,SAAU,CAAEC,GAAIH,GAChBI,KAAM,CAAC,UAEL7B,KAAK8B,SACf,CAIA,aAAIC,GACA,OAAO/B,KAAKC,UAChB,CAIA,aAAM6B,SACI9B,KAAKU,MAAMoB,gBACX9B,KAAKU,MAAMsB,IACrB,CAIA,YAAMC,CAAOR,EAAaS,GACtB,MAAMC,QAAkBnC,KAAKO,SAAS6B,MAAMX,GAC5CU,EAAUR,SAASC,GAAKM,QAClBlC,KAAKO,SAASmB,KAAKQ,EAASC,SAC5BnC,KAAKO,SAAS8B,OAAOZ,SACrBzB,KAAK8B,SACf,CAIA,WAAMQ,CAAMb,GACR,MAAMU,QAAkBnC,KAAKO,SAAS6B,MAAMX,GAC5CU,EAAUN,KAAO,CAAC,QACZ7B,KAAKO,SAASmB,KAAKD,EAAaU,SAChCnC,KAAK8B,SACf,CAIA,YAAMO,CAAOZ,SACHzB,KAAKO,SAAS8B,OAAOZ,SACrBzB,KAAK8B,SACf,CAIA,YAAMS,CAAOd,EAAaS,GACtB,MAAML,QAAa7B,KAAKO,SAAS6B,MAAMX,GACvCI,EAAKF,SAASC,GAAKM,QACblC,KAAKO,SAASmB,KAAKQ,EAASL,SAC5B7B,KAAK8B,SACf,CAIA,cAAIU,GACA,OAAOxC,KAAKG,WAChB,CAIA,OAAAsC,GACQzC,KAAKwC,aAGTxC,KAAKG,aAAc,EACnBH,KAAKU,MAAM+B,UACX,EAAAvC,OAAOwC,UAAU1C,MACrB,CACA,gBAAMe,GACFf,KAAKI,qBAAuBJ,KAAKO,SAASoC,OAC1C3C,KAAKC,WAAW2C,UAAK,EACzB,E,eCxHG,MAAMC,EAAqB,IAAI,EAAAC,MAAM,4CAA6C,+CAI5EC,EAAmB,IAAI,EAAAD,MAAM,0CAA2C,6C","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/workspaces/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/workspaces/lib/tokens.js"],"sourcesContent":["/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { Poll } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default duration of the auto-refresh in ms\n */\nconst DEFAULT_REFRESH_INTERVAL = 10000;\n/**\n * An implementation of a workspaces model.\n */\nexport class WorkspacesModel {\n    constructor(options) {\n        var _a;\n        this._refreshed = new Signal(this);\n        this._isDisposed = false;\n        this._workspaceData = {\n            ids: [],\n            values: []\n        };\n        this._manager = options.manager;\n        const refreshInterval = options.refreshInterval || DEFAULT_REFRESH_INTERVAL;\n        this._poll = new Poll({\n            auto: (_a = options.auto) !== null && _a !== void 0 ? _a : true,\n            name: '@jupyterlab/workspaces:Model',\n            factory: () => this._fetchList(),\n            frequency: {\n                interval: refreshInterval,\n                backoff: true,\n                max: 300 * 1000\n            },\n            standby: options.refreshStandby || 'when-hidden'\n        });\n    }\n    /**\n     * The list of available workspaces.\n     */\n    get workspaces() {\n        return this._workspaceData.values;\n    }\n    /**\n     * The list of workspace identifiers.\n     */\n    get identifiers() {\n        return this._workspaceData.ids;\n    }\n    /**\n     * Create an empty workspace.\n     */\n    async create(workspaceId) {\n        await this._manager.save(workspaceId, {\n            metadata: { id: workspaceId },\n            data: {}\n        });\n        await this.refresh();\n    }\n    /**\n     * A signal emitted when the workspaces list is refreshed.\n     */\n    get refreshed() {\n        return this._refreshed;\n    }\n    /**\n     * Force a refresh of the workspaces list.\n     */\n    async refresh() {\n        await this._poll.refresh();\n        await this._poll.tick;\n    }\n    /**\n     * Rename a workspace.\n     */\n    async rename(workspaceId, newName) {\n        const workspace = await this._manager.fetch(workspaceId);\n        workspace.metadata.id = newName;\n        await this._manager.save(newName, workspace);\n        await this._manager.remove(workspaceId);\n        await this.refresh();\n    }\n    /**\n     * Reset a workspace.\n     */\n    async reset(workspaceId) {\n        const workspace = await this._manager.fetch(workspaceId);\n        workspace.data = {};\n        await this._manager.save(workspaceId, workspace);\n        await this.refresh();\n    }\n    /**\n     * Remove a workspace.\n     */\n    async remove(workspaceId) {\n        await this._manager.remove(workspaceId);\n        await this.refresh();\n    }\n    /**\n     * Save workspace under a different name.\n     */\n    async saveAs(workspaceId, newName) {\n        const data = await this._manager.fetch(workspaceId);\n        data.metadata.id = newName;\n        await this._manager.save(newName, data);\n        await this.refresh();\n    }\n    /**\n     * Get whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._poll.dispose();\n        Signal.clearData(this);\n    }\n    async _fetchList() {\n        this._workspaceData = await this._manager.list();\n        this._refreshed.emit(void 0);\n    }\n}\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The token that provides the identifiers of workspace commands for reuse.\n */\nexport const IWorkspaceCommands = new Token('@jupyterlab/workspaces:IWorkspaceCommands', 'Provides identifiers of workspace commands.');\n/**\n * The token that provides the identifiers of workspace commands for reuse.\n */\nexport const IWorkspacesModel = new Token('@jupyterlab/workspaces:IWorkspacesModel', 'Provides a model for available workspaces.');\n//# sourceMappingURL=tokens.js.map"],"names":["WorkspacesModel","constructor","options","_a","this","_refreshed","Signal","_isDisposed","_workspaceData","ids","values","_manager","manager","refreshInterval","_poll","Poll","auto","name","factory","_fetchList","frequency","interval","backoff","max","standby","refreshStandby","workspaces","identifiers","create","workspaceId","save","metadata","id","data","refresh","refreshed","tick","rename","newName","workspace","fetch","remove","reset","saveAs","isDisposed","dispose","clearData","list","emit","IWorkspaceCommands","Token","IWorkspacesModel"],"sourceRoot":""}