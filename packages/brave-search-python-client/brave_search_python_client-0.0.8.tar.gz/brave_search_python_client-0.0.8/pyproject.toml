[project]
name = "brave-search-python-client"
version = "0.0.8"
description = "ü¶Å Brave Search Python Client supporting Web, Image, News and Video search."
readme = "README.md"
authors = [
    { name = "Helmut Hoffer von Ankershoffen", email = "helmuthva@googlemail.com" },
]
license = { file = "LICENSE" }

keywords = [
    "api",
    "async",
    "brave",
    "bravesearch",
    "bravesearchapi",
    "codecov",
    "docker",
    "pydantic",
    "python",
    "ruff",
    "search",
    "sonarqube",
    "typer",
    "uv",
]

classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Framework :: AsyncIO",
    "Framework :: Pydantic",
    "Framework :: Pytest",
    "Typing :: Typed",
    "Natural Language :: English",
]

requires-python = ">=3.11,<4.0"

dependencies = [
    "httpx >= 0.28.1",

    "pydantic >= 2.5.2",
    "python-dotenv>=1.0.1",
    "tenacity >= 9.0.0",
    "typer>=0.15.1",
]

[project.scripts]
brave-search-python-client = "brave_search_python_client.cli:cli"

[project.urls]
Homepage = "https://helmuthva.gitbook.io/brave-search-api-client"
Source = "https://github.com/helmut-hoffer-von-ankershoffen/brave-search-python-client"
Changelog = "https://github.com/helmut-hoffer-von-ankershoffen/brave-search-python-client/releases"
Documentation = "https://helmuthva.gitbook.io/brave-search-python-client"
Issues = "https://github.com/helmut-hoffer-von-ankershoffen/brave-search-python-client/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "bump-my-version>=0.29.0",
    "cyclonedx-py>=1.0.1",
    "detect-secrets>=1.5.0",
    "git-cliff>=2.7.0",
    "pip-audit>=2.7.3",
    "pip-licenses>=5.0.0",
    "pre-commit>=4.0.1",
    "pyright>=1.1.391",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.0",
    "pytest-cov>=6.0.0",
    "pytest-docker>=3.1.1",
    "pytest-env>=1.1.5",
    "pytest-xdist[psutil]>=3.6.1",
    "nox>=2024.10.9",
    "ruff>=0.8.4",
    "tomli>=2.1.0",
]


[project.optional-dependencies]
examples = ["streamlit>=1.41.1", "jupyter>=1.1.1"]

# used by uv pip install -e ".[dev]", as used within nox (uv run nox)
dev = [
    "bump-my-version>=0.29.0",
    "cyclonedx-py>=1.0.1",
    "detect-secrets>=1.5.0",
    "git-cliff>=2.7.0",
    "pip-audit>=2.7.3",
    "pip-licenses>=5.0.0",
    "pre-commit>=4.0.1",
    "pyright>=1.1.391",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.0",
    "pytest-cov>=6.0.0",
    "pytest-docker>=3.1.1",
    "pytest-env>=1.1.5",
    "pytest-xdist[psutil]>=3.6.1",
    "nox>=2024.10.9",
    "ruff>=0.8.4",
    "tomli>=2.1.0",
]

[tool.ruff]
target-version = "py311"
preview = true
fix = true

[tool.ruff.lint]
ignore = ["B008", "E501"]
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
]

[tool.ruff.format]
docstring-code-format = true


[tool.pytest.ini_options]
addopts = "-v --cov=brave_search_python_client --cov-report=term-missing --cov-report=xml:coverage.xml --cov-report=html:coverage_html"
testpaths = ["tests"]
python_files = ["*_test.py"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
env = ["COVERAGE_FILE=.coverage", "COVERAGE_PROCESS_START=pyproject.toml"]
markers = [
    "sequential: exclude from parallel test execution",
    "no_extras: tests that do require no extras installed",
]

[tool.coverage.run]
sigterm = true
relative_files = true
source = ["src"]
omit = ["src/starbridge/instrumentation/*"]
branch = true
parallel = true
concurrency = ["thread", "multiprocessing"]

[tool.coverage.paths]
source = ["src/"]


[tool.bumpversion]
current_version = "0.0.8"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} ‚Üí {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} ‚Üí {new_version}"
commit_args = "--no-verify"
setup_hooks = []
pre_commit_hooks = [
    "uv sync",
    "git add uv.lock",
    "git-cliff",
    "git add CHANGELOG.md",
]
post_commit_hooks = []

[[tool.bumpversion.files]]
filename = "pyproject.toml"

[[tool.bumpversion.files]]
filename = "VERSION"

[[tool.bumpversion.files]]
filename = "sonar-project.properties"

[tool.git-cliff.remote.github]
owner = "helmut-hoffer-von-ankershoffen"
repo = "brave-search-python-client"

[tool.git-cliff.changelog]
output = "CHANGELOG.md"
render = true
# template for the changelog header
header = """
[ü¶Å Brave Search Python Client](https://helmuthva.gitbook.io/brave-search-api-client)\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | upper_first }} - \
        ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]\
          ({{ self::remote_url() }}/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | unique(attribute="message")
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor %}
    {% for commit in commits
    | unique(attribute="message") %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor -%}
{%- if github -%}
{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors ‚ù§Ô∏è
{% endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor -%}
{%- endif %}


"""
# template for the changelog footer
footer = """
<!-- built with love in Berlin by Helmut Hoffer von Ankershoffen -->
"""
# remove the leading and trailing whitespace from the templates
trim = true
# postprocessors
postprocessors = [
    { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->‚õ∞Ô∏è  Features" },
    { message = "^fix", group = "<!-- 1 -->üêõ Bug Fixes" },
    { message = "^doc", group = "<!-- 3 -->üìö Documentation" },
    { message = "^perf", group = "<!-- 4 -->‚ö° Performance" },
    { message = "^refactor\\(clippy\\)", skip = true },
    { message = "^refactor", group = "<!-- 2 -->üöú Refactor" },
    { message = "^style", group = "<!-- 5 -->üé® Styling" },
    { message = "^test", group = "<!-- 6 -->üß™ Testing" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore\\(npm\\).*yarn\\.lock", skip = true },
    { message = "^chore|^ci", group = "<!-- 7 -->‚öôÔ∏è Miscellaneous Tasks" },
    { body = ".*security", group = "<!-- 8 -->üõ°Ô∏è Security" },
    { message = "^revert", group = "<!-- 9 -->‚óÄÔ∏è Revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "beta|alpha"
# regex for ignoring tags
ignore_tags = "rc"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
