#compdef autotools-language-server

# AUTOMATICALLY GENERATED by `shtab`


_shtab_autotools_language_server_commands() {
  local _commands=(
    
  )
  _describe 'autotools-language-server commands' _commands
}

_shtab_autotools_language_server_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "(- : *)--print-completion[print shell completion script]:print_completion:(bash zsh tcsh)"
  "(- : *)--version[show program\'s version number and exit]"
  "--generate-schema[generate schema in an output format]:generate_schema:(make)"
  "--output-format[output format\: json]:output_format:(json yaml toml)"
  "--indent[generated json, yaml\'s indent, ignored by toml\: 2]:indent:"
  "--color[when to display color, default\: auto]:color:(auto always never)"
  "--check[check file\'s errors and warnings]:check:_files"
)


_shtab_autotools_language_server() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_autotools_language_server_options[(I)${(q)one_or_more}*]} + ${_shtab_autotools_language_server_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_autotools_language_server_options+=(': :_shtab_autotools_language_server_commands' '*::: :->autotools-language-server')
  fi
  _arguments -C -s $_shtab_autotools_language_server_options

  case $state in
    autotools-language-server)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_autotools_language_server-$line[1]:"
      case $line[1] in
        
      esac
  esac
}



typeset -A opt_args

if [[ $zsh_eval_context[-1] == eval ]]; then
  # eval/source/. command, register function for later
  compdef _shtab_autotools_language_server -N autotools-language-server
else
  # autoload from fpath, call function directly
  _shtab_autotools_language_server "$@"
fi

