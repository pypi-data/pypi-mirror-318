[project]
name = "mtmaisdk"
version = "0.5.8"
description = "A web scraping library based on LangChain which uses LLM and direct graph logic to create scraping pipelines."
authors = [
    { name = "Marco Vinciguerra", email = "mvincig11@gmail.com" },
    { name = "Marco Perini", email = "perinim.98@gmail.com" },
    { name = "Lorenzo Padoan", email = "lorenzo.padoan977@gmail.com" }
]
dependencies = [
    "langchain>=0.3.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# [tool.poetry]
# name = "mtmaisdk"
# version = "0.5.8"
# description = ""
# authors = ["Alexander Belanger <alexander@hatchet.run>"]
# readme = "README.md"
# packages = [{ include = "mtmaisdk" }]

# [tool.poetry.dependencies]
# python = "^3.10"
# grpcio = "^1.68.1"
# python-dotenv = "^1.0.0"
# protobuf = "^5.29.1"
# pyyaml = "^6.0.1"
# grpcio-tools = "1.68.1"
# loguru = "^0.7.2"
# pydantic = "^2.6.3"
# python-dateutil = "^2.9.0.post0"
# urllib3 = ">=1.26.20"
# aiostream = "^0.5.2"
# nest-asyncio = "^1.6.0"
# aiohttp = "^3.10.5"
# aiohttp-retry = "^2.8.3"
# tenacity = ">=8.4.1"

# [tool.poetry.group.dev.dependencies]
# pytest = "^8.2.2"
# pytest-asyncio = "^0.23.8"
# psutil = "^6.0.0"

# [build-system]
# requires = ["poetry-core"]
# build-backend = "poetry.core.masonry.api"

# [build-system]
# requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
# build-backend = "poetry_dynamic_versioning.backend"

[tool.pytest.ini_options]
log_cli = true

[tool.isort]
profile = "black"
known_third_party = [
  "grpcio",
  "grpcio_tools",
  "loguru",
  "protobuf",
  "pydantic",
  "python_dotenv",
  "python_dateutil",
  "pyyaml",
  "urllib3",
]

# [tool.poetry.scripts]
# api = "examples.api.api:main"
# async = "examples.async.worker:main"
# fanout = "examples.fanout.worker:main"
# cancellation = "examples.cancellation.worker:main"
# concurrency_limit = "examples.concurrency_limit.worker:main"
# concurrency_limit_rr = "examples.concurrency_limit_rr.worker:main"
# dag = "examples.dag.worker:main"
# delayed = "examples.delayed.worker:main"
# events = "examples.events.worker:main"
# logger = "examples.logger.worker:main"
# manual_trigger = "examples.manual_trigger.worker:main"
# on_failure = "examples.on_failure.worker:main"
# programatic_replay = "examples.programatic_replay.worker:main"
# rate_limit = "examples.rate_limit.worker:main"
# simple = "examples.simple.worker:main"
# timeout = "examples.timeout.worker:main"
# blocked = "examples.blocked_async.worker:main"
# existing_loop = "examples.worker_existing_loop.worker:main"
# bulk_fanout = "examples.bulk_fanout.worker:main"
