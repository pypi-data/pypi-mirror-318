Metadata-Version: 2.1
Name: dssatsim
Version: 0.1.3
Summary: Simple saptiotemporal DSSAT simulator
Author: JK
Author-email: kpodojos@msu.edu
Requires-Python: >=3.10,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Dist: dssattools (==2.1.4)
Requires-Dist: fastparquet (==2024.5.0)
Requires-Dist: geopandas (==0.14.4)
Requires-Dist: pandas (==2.2.2)
Requires-Dist: pygeohash (==1.2.0)
Requires-Dist: pyproj (==3.6.1)
Requires-Dist: python-dotenv (==1.0.1)
Requires-Dist: shapely (==2.0.5)
Description-Content-Type: text/markdown

# Simple DSSAT simulator


## Install
```
pipx install dssatsim
```

## Goal
Takes a small set of inputs in JSON and returns DSSAT's Summary.OUT as a JSON file.

### Required Set of Inputs:
```
{
    "farm_name": "farm_farm",
    "latitude": 42.4241716982,
    "longitude": -85.7411854356,
    "elevation": 200,
    "planting_date": "2023-05-15",
    "crop_name": "maize",
    "crop_variety": "Unknown",
    "is_irrigation_applied": "yes",
    "irrigation_application": [
        [
            "2023-05-15",
            80
        ],
        [
            "2023-05-20",
            100
        ]
    ]
}
```


## How to use it
```
from dssatsim import run_dssat_exp_cli
import json

input_file = "./sample_2024-09-30.json"
output_file = "./example_output.json"

with open(input_file, 'r', encoding='utf-8') as f:
    input_data = json.load(f)

_, explanations = run_dssat_exp_cli.exec(input_data, output_file)

```


## Limitations
* The geographic coverage is limited to Kalamazoo County, MI, USA
* Year of interest: only 2023
* Crops covered: Corn and Soybeans


## Acknowledgments

* [DSSAT Team](https://github.com/DSSAT/dssat-csm-os)
* [Py_DSSATTools](https://github.com/daquinterop/Py_DSSATTools)


