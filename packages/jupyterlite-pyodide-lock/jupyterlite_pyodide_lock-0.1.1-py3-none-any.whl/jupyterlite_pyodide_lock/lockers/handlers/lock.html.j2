{% autoescape None %}
<html>
  <script type="module">
    import { loadPyodide } from "./static/pyodide/pyodide.mjs";

    async function post(url, body) {
      return await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body,
      });
    }

    function tee(pipe, message) {
      (pipe == "stderr" ? console.warn : console.log)(message);
      void post(`/log/${pipe}`, JSON.stringify({ message }, null, 2));
      const pre = document.createElement("pre");
      pre.textContent = message;
      document.body.appendChild(pre);
    }

    async function main() {
      const pyodide = await loadPyodide({
        stdout: tee.bind(this, "stdout"),
        stderr: tee.bind(this, "stderr"),
        packages: ["micropip"],
      });

      await pyodide.runPythonAsync(`
            try:
                import json, js, micropip, traceback

                await micropip.install(
                    **json.loads(
                        '''
                        {{ micropip_args_json }}
                        '''
                    )
                )
                lock = None
                if micropip.__version__ == "0.8.0":
                    # from https://github.com/pyodide/micropip/pull/172
                    from micropip.freeze import load_pip_packages

                    PM = micropip._package_manager_singleton
                    packages = dict(load_pip_packages())
                    packages.update(
                        {
                            name: info
                            for name, info in PM.repodata_packages.items()
                            if name not in packages
                        }
                    )
                    lock = json.dumps(
                        {"info": PM.repodata_info, "packages": packages},
                        indent=2,
                        sort_keys=True
                    )
                else:
                    lock = micropip.freeze()

                js.window.PYODIDE_LOCK = lock
            except Exception as err:
                js.window.PYODIDE_ERROR = f"""
                    {traceback.format_exc()}
                    {str(err)}
                """
        `);

      await post(
        "./pyodide-lock.json",
        window.PYODIDE_LOCK || JSON.stringify({ error: window.PYODIDE_ERROR })
      );
    }

    main().then(window.close).catch(window.close);
  </script>
</html>
