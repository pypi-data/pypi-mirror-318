Metadata-Version: 2.1
Name: hg_cpp
Version: 0.0.5
Summary: A C++ performance runtime engine for HGraph
Keywords: reactive,graph,fpg,forward propogating graph,time series,functional reactive programming
Author-Email: Howard Henson <howard@henson.me.uk>
License: MIT License
        
        Copyright (c) 2024 Howard Henson
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Classifier: Development Status :: 3 - Alpha
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: C++
Project-URL: Homepage, https://github.com/hhenson/hg_cpp
Project-URL: Repository, https://github.com/hhenson/hg_cpp.git
Requires-Python: >=3.12
Requires-Dist: hgraph>=0.3.37
Description-Content-Type: text/markdown

# hg_cpp

A high performance implementation of the HGraph runtime.


## Development

The project is currently configured to make use of [uv](https://github.com/astral-sh/uv) for dependency management. 
Take a look at the website to see how best to install the tool.
Once you have checked out the project, you can install the project for development using the following command:

```bash
uv venv --python 3.12
```

This should be installed in the ```.venv``` folder within the project.

For users of CLion / PyCharm, you can then add the environment by selecting an existing virtual environment using
the location above.

To install the dependencies run below:

```bash
uv sync
```
