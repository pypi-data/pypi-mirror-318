		Keyboard shortcuts:
		
		
		Cmd-p	Toggle bookmark
		Cmd-b	Goto next bookmark
		Cmd-B	Goto prev bookmark

		Cmd-g	Goto definition ( when cursor is at or in between:
									self.<INS>walk_scop<INS>e )
		
		Cmd-l  Gotoline:	-1 and empty goes to file-end.
							-20 goes to 20 lines before file-end etc.
		
		
		Cmd-n			Open new tab
		Cmd-Return		Open file to current tab
		
		Ctrl-d  Close current tab and save it
		Ctrl-Q  Close current tab without saving it
		Cmd-q   Close editor and save files and configuration.
		
		Cmd-right  Walk tabs forward
		Cmd-left   Walk tabs backwards
		
		
		Cmd-e  Move cursor to lineend
		Cmd-a  Move cursor to linestart
		
		
		Cmd-f  Search
		Cmd-r  Replace
		Cmd-R  Replace all
		
		
		Esc		Toggle fullscreen, clear search-tags, clear selection,
				close help, close show errors, exit goto_def, exit gotoline,
				exit search, exit replace etc.
		
		Shift-Return	Comment
		Shift-BackSpace	Uncomment
		
		
		Shift-Tab  Unindent
		Tab        Indent or walk complete-word expansions
		Ctrl-Tab   Insert Tab
		
		Cmd-BackSpace	Delete backwards from cursor until dot

		
		Cmd-c  Copy
		Cmd-v  Paste
		Cmd-x  Cut
		Cmd-y  Copy current line without newline, (yank line)
		Cmd-z  Undo
		Cmd-Z  Redo
		
		
		Ctrl-l   Toggle linenumbers
		Ctrl-x   Toggle syntax highlight
		
		
		Alt-f   Font setting
		Alt-s   Color setting
		Alt-t   Toggle color setting
		
		
		Cmd-shift-right  Select from cursor to lineend
		Cmd-shift-left   Select from cursor to linestart
		
		Ctrl-j  Scroll down without moving cursor
		Ctrl-u  Scroll up without moving cursor
		
		Shift-up		Select one more line up
		Shift-down		Select one more line down
		Cmd-Shift-up	Select 10 more line up
		Cmd-Shift-down	Select 10 more line down
		Cmd-up			Move 10 more line up
		Cmd-down		Move 10 more line down
		
		Alt-left  		Move cursor one word left
		Alt-right 		Move cursor one word right
		Alt-shift-left 	Select one more word to left
		Alt-shift-right	Select one more word to right
		
		left/right		If cursor is not visible, goto cursor
						If have selection, clear selection
		
		
		# Not often needed:
		Cmd-89
			walk scopes (with rising tendency)
			8 goto next(up) defline
			9 goto next(down) defline

		Cmd-Shift-()
			walk scopes (with diving tendency)
		 	( goto absolutely next(up) defline
			) goto absolutely next(down) defline

		
		Cmd-Shift-E		toggle, elide scope, if cursor is on defline
		Cmd-Shift-F		select scope, where cursor is in
		
		Ctrl-t	Change indentation of selected lines to current setting
		
		------------------------------------------------------
		
		
		While searching:
			Ctrl-n  Next match
			Ctrl-p  Prev match
			-	Copying text to clipboard is possible with yank-line etc.
			-	Add bookmark is possible so is goto_def. Ctrl-np -> back to matches
			-	Changing the replacement string is possible while replacing.
			-	1: Press Space to exit search to focus.
				2: Double-click to exit to cursor.
				3: Press Esc to exit to cursor position at the start of the search.
				Press arrow-key to refresh view back to cursor, if necessary.
		
		Also, after searching, show and select next/prev occurence of last search
		(if no selection, else uses selection)
			Ctrl-n  Next match
			Ctrl-p  Prev match

		While replacing:
			Return does what is expected.
		
		Default bindings: https://tcl.tk/man/tcl9.0/TkCmd/text.html#M192
	
	
	------------------------------------------------------
	
	Below this, it is expected one started editor with:
	
		import henxel
		e=henxel.Editor()
		
	This is then referenced like:
		e.print_bookmarks()	
	------------------------------------------------------
	
	
	When is my file Saved to Disk?
	
		All tabs are saved to disk when:
		  - closing program, also configurations
		  - running file
		
		Current tab is saved to disk when:
		  - closing tab, if it had filename.
			New tabs get filename by pressing save.
		  
		  - opening file from disk when there already was another file opened
			in tab.
		
		Otherwise, changes are saved in memory
		
		This means that if you want to cancel all changes:
		  - do not run file
		  - do not close editor
		  - do not close tab with a filename
		  - do not open file in a tab which has already a file opened
		  
		  - instead close python-console with ctrl-d
		
	
	Editor
	  - Editor configuration is related to python-environment (sys.prefix)
		in which python console was launched. So if you have say two
		different envs in the same directory, they will have separate confs.
		
	  - Configuration is not saved if editor was not launched from
		virtual environment.
		
	  - If editor was launched inside a directory what is being
		version-controlled with git, the current git-branch will be shown
		in top-left corner.
		
	  - If you do something in python-console that waits for user input,
		Editor will be freezed during that time, like when viewing help
		of some function.
	
	
	Save-button
	  - To create a new file, add filename to entry and press save.
	  	This creates an empty file like 'touch'. This is done to
		ensure filepath is ok. Contents will be saved to disk in
		above mentioned situations.
	  
	  - If a file was already open and user changed filename in entry,
		old file is first saved (but not to disk) and then new file with
		same content is created in a new tab (its contents are not yet in disk).
	  
	  - Pressing save in tab which exists in disk does not do anything.
	  - Contents of tabs without filename are not saved when closing tab,
		or program, but tabs are still kept as placeholders.
			
		
	Open-button
	  - When in tab without filename, files can be opened from entry
		or by pressing button.
	  
	  - If tab had filename and user changed filename in entry and
		user presses enter: old file is first saved to disk and closed,
		then filepath in entry is opened in the same tab.
		
	  - If entered filename in entry and pressed open, entry is ignored.
	
	  - Files from disk are always opened into current tab,
	  	old file is saved and closed but bookmarks are gone
	  	--> When planning opening new file from disk,
			check is current tab something one wants to keep open,
			or does it have important bookmarks.
			If is, then open new tab first, and then open file to it.
			
	  - It is good practise to always: open newtab, open file

	
	Bookmarks
	  - Are very useful, more than for example, syntax-highlighting
	  - Create/remove bookmark with Cmd/Alt-p
	  - Walk bookmarks with Cmd/Alt-bB
	  - Can be created when searching
	  - Are saved in configuration
	  - There is no shortcut for:
		e.remove_bookmarks(all_tabs=True) note: all_tabs is True by default
		e.print_bookmarks() of current tab

	
	Goto definition
	  - Of function in current tab with Cmd/Alt-g
		when cursor is at or in between: self.<INS>walk_scop<INS>e
		(or if there is selection, uses it)
		
	  - Can be done also when searching,
		just press Control-np to get back to matches, because esc will exit search
		
	
	Selection
	  - Long selection: if cursor is not visible,
		to show wanted side of selection, toggle left/right -keys


	How to: expand word
	  - When starting to write object-name that has already been used
		somewhere in contents like:
		
			self.at
		
		then when hitting TAB, editor searches all matches in contents which
		starts with self.at and shows them one by one when pressing again TAB
		until all matches have been showed.
			
			self.attribute1
			
		If expansion got too long, one can delete to previous dot with:
			self.attribute1.extra<INS>
			--> Cmd/Control-BackSpace
			--> self.attribute1.
			
	  - Only single 's' is needed to expand to: self. 

	
	Inspecting objects
	  - Just write the name of the module, like tkinter.font in the editor,
		select it and choose inspect from popup-menu. Then search.
				
	
	Elide
	  - Eliding is work-in-progress, it works but is not fully implemented:
		For example, searching, gotoing is not done. Nested eliding, not done.
		And is not preserved.
	
	
	Search and Replace
		
		Resources:
			e.print_search_help()
			e.print_search_setting()
			e.reset_search_setting()
			help(e.edit_search_setting)
			e.edit_search_setting()
			https://www.tcl.tk/man/tcl9.0/TkCmd/text.html#M147
			https://www.tcl.tk/man/tcl9.0/TclCmd/re_syntax.html
			https://www.tcl.tk/man/tcl9.0/TclCmd/regexp.html
		
		
	  - Good news is, most of the time one does not need these.
	  - When does, it most likely is:
			
			e.edit_search_setting('-start insert')
		
		This changes searching to start from insertion cursor
		
		If that wont help, below is couple more examples
	
	
	SUBSTITUTION WITH REGEXP
		
	  - Example 1 Begin
		If contents of tab is
		
		Example: 121 212
		
		Example: 121 212
		
		Example: 121 212
		
		
		And there is "-regexp" in search_setting, and doing replace
		
		Then if search_word(old_word) would be
		"(\d+) (\d+)"
		And if substitution(new_word) would be
		"\2 \1"
		
		Result after replacing would then be
		Example: 212 121
		
		Example: 212 121
		
		Example: 212 121
		
		Example 1 End


		Example 2 Begin
		Adding space to end of substitution

		search_word + () ==empty string
		If search_word is "A", then using search_word
			A()
		
		And if want to add for example: " BB " after search_word,
		Then use as substitution(new_word): 
			\0 BB \1
			
		where \0 is whole matched string and \1 is the empty string
		"&" can be used inplace of "\0"
		
		Result
		--> "A BB "
		
		Example 2 End

		
		Some more info
			Adding to linestart: "^"
			Adding to lineend: "$"
			Concatenate lines: "\n+"

	
	How to: set scrollbar width
	  - e.set_scrollbar_widths(width, elementborderwidth)
	
	
	How to: Execute part of the code from editor in Python-console
	  - Remember to put import-lines before the desired code-blocks. Then
		just select whole thing, copy and paste to console. You may have
		to press Return before last block executes. This is very useful,
		compared to writing all that in console is much more difficult.
		You might need to reduce indentation.
	
	
	How to: change indent-depth
		For all files:
	  - If you started editor with: import henxel and e=henxel.Editor(),
		then to change indent-depth in python-console:
		e.change_indentation_width(8)
		
		For code-snippet:
	  - If you copied something to your editor that has different indentation
		than rest of the file:
		(Note that you don't have to do anything if it is indented with normal
		4 spaces and you have indent-depth the normal 4 )
		1: Make sure you copied the block starting with one empty line.
		2: Click cursor to start of empty line and paste.
		
		Then select that code and press Control-t, and
		it should then be indented as you wanted and you can then continue
		indenting the pasted code to the right place.
		
		(Note that you don't have to do anything if you open a file that has
		different indentation than your setting, it is changed automatically
		and saved with tabbed indentation after you for example close it.)
	
	
	Running file
	  - input from stdin does not work, so use test-data for that.
	  
	  - Editor freezes when running a program. So if you are testing
		for possible runtime-errors, keep that in mind. You should
		be able to terminate your program with ctrl-c from python-console.
	
	  - If you know where in your code that runtime-error occurs, put
		breakpoint() there, exit editor and python-console and run
		from terminal:
		
		python program_with_error.py
		
		and it will exit to python debugger after your breakpoint.
		

	Developing
	  - To automate exit editor, check syntax, reopen python and editor
		start editor with: e=henxel.Editor(debug=True)
		
		Then Cmd-q will do syntax checking on all python-files in package
		and test-launch. This can also be done from popup-menu: test
	  
	  - If wanting to start editor using new code, from popup-menu: restart
		Test-launch is then not done.
		
	  - Editor can be closed by pressing close button
	
	  - If editor did not launch, error message and info about recovering is printed
		See: help(henxel.stash_pop)
	
	  - Currently there is restart-script only for MacOS
	
	  - More info is in function: e.build_launch_test
	
	
	Homepage: https://github.com/SamuelKos/henxel
	
	