"use strict";(self.webpackChunktrame_jupyter_extension=self.webpackChunktrame_jupyter_extension||[]).push([[612],{612:(e,t,s)=>{s.r(t),s.d(t,{WidgetExtension:()=>u,default:()=>p});class n{constructor(){this._listeners={}}addEventListener(e,t){let s=this._listeners[e];s||(s=new Set,this._listeners[e]=s),s.add(t)}removeEventListener(e,t){const s=this._listeners[e];s&&s.delete(t)}emit(e,t){const s=this._listeners[e];s&&s.forEach((e=>{e(t)}))}removeListeners(e){const t=this._listeners[e];t&&t.clear()}}class i extends n{constructor(e){super(),this.kernel=e,this.comm=null,this.kernel.disposed.connect(this.onClose.bind(this)),this.kernel.statusChanged.connect(((e,t)=>{"restarting"!==t&&"autorestarting"!==t&&"terminating"!==t&&"dead"!==t||this.onClose()}))}open(){if(this.kernel.isDisposed)throw new Error(`Can't open a comm for disposed kernel ${this.kernel.id}`);this.comm&&!this.comm.isDisposed||this.kernel.isDisposed||(this.comm=this.kernel.createComm("wslink_comm"),this.comm.open(),this.comm.onMsg=this.onMessage.bind(this),this.comm.onClose=this.onClose.bind(this))}send(e){this.isUseable()?this.comm.send(e.data,void 0,e.buffers):console.error("trame::jupyter-comm::send -- NO COMM")}onMessage(e){this.emit("message",{data:e.content.data,buffers:e.buffers})}onClose(...e){console.error("trame::jupyter-comm::close -- NO COMM"),this.comm=null,this.emit("close",void 0)}isUseable(){return!this.kernel.isDisposed&&this.comm&&!this.comm.isDisposed}}function r(e){if(e.buffer){if(e.buffer.byteLength!==e.length){console.warn("toBuffer: deep copy");const t=new Uint8Array(e.length);return t.set(e),t.buffer}return e.buffer}return e}const o=function(){let e=0;return function(){const t=e;return e+=1,t.toString()}}();class l extends n{constructor(e,t){super(),this.serverName="trame",this.clientId=o(),this.readyState=0;const s=new URLSearchParams(e.location.search);if(s.has("server")&&(this.serverName=s.get("server")||"trame"),this.window=e,this.comm=t,this.commMessageListener=e=>{const{data:t,buffers:s}=e,{server:n,client:i,payload:r}=t;if(i===this.clientId&&n===this.serverName)if(s&&s.length>0){const e=new Blob(s);e.constructor=this.window.Blob,e.__proto__=this.window.Blob.prototype,this.emit("message",{data:e})}else this.emit("message",{data:r})},this.commCloseListener=()=>this.close(),!t.isUseable())return console.error("Can't create a TrameJupyterWebSocket using a closed kernel connection"),void(this.readyState=3);this.comm.addEventListener("message",this.commMessageListener),this.comm.addEventListener("close",this.commCloseListener),this.window.addEventListener("unload",this.commCloseListener),setTimeout((()=>{this.readyState=1,this.emit("open",{data:""})}),0)}close(){this.comm.removeEventListener("message",this.commMessageListener),this.comm.removeEventListener("close",this.commCloseListener),this.readyState=3,console.log("trame::jupyter-comm::close","FIXME"),this.emit("close",{data:""})}send(e){const t="string"!=typeof e,s={data:{server:this.serverName,client:this.clientId},buffers:[]};t?s.buffers=[r(e)]:s.data.payload=e,this.comm.send(s)}set onopen(e){this.removeListeners("open"),this.addEventListener("open",e)}set onmessage(e){this.removeListeners("message"),this.addEventListener("message",e)}set onclose(e){this.removeListeners("close"),this.addEventListener("close",e)}set onerror(e){this.removeListeners("error"),this.addEventListener("error",e)}}class a{constructor(e,t,s){this._context=e,this._endpoint=t,this._www=s,this._kernel=null,this._kernelsRegistry=window.trameJupyter.kernelsRegistry,e.sessionContext.kernelChanged.connect(this.onKernelChanged,this)}get context(){return this._context}onKernelChanged(e,t){null!==this._kernel&&this._kernel.id&&this._kernelsRegistry.setItem(this._kernel.id,null),this._kernel=t.newValue,null!==this._kernel&&this._kernel.id&&(this._kernelsRegistry.setItem(this._kernel.id,this._kernel),this._kernel.requestExecute({silent:!0,code:this.getKernelCode()}))}get isDisposed(){return null===this._context}dispose(){this.isDisposed||(this._context&&this._context.sessionContext.kernelChanged.disconnect(this.onKernelChanged,this),this._kernel=null,this._context=null)}getKernelCode(){return`\n      import os\n      os.environ["TRAME_DISABLE_V3_WARNING"] = "1"\n      os.environ["TRAME_IFRAME_BUILDER"] = "jupyter-extension"\n      os.environ["TRAME_BACKEND"] = "jupyter"\n      os.environ["TRAME_JUPYTER_WWW"] = "${this._www}"\n      os.environ["TRAME_JUPYTER_ENDPOINT"] = "${this._endpoint}"\n    `}}class c{constructor(){this._items={}}getItem(e){return this._items[e]||null}setItem(e,t){null===t?delete this._items[e]:this._items[e]=t}}var h=s(597),m=s(358);function d(){var e;const t=document.querySelectorAll(".jp-LinkedOutputView iframe[id*=trame__template]"),s=document.querySelectorAll("iframe[id*=trame__template]"),n={},i=[];for(let e=0;e<t.length;e++){const s=t[e];n[s.id]=!0,i.push(s)}for(let e=0;e<s.length;e++){const t=s[e];i.includes(t)||(n[t.id]?t.style.display="none":t.style.display="block")}for(let t=0;t<i.length;t++){const s=i[t];s.style.width="100%",s.style.height="100%",(null==s?void 0:s.parentElement)&&(s.parentElement.style.padding="0"),(null===(e=null==s?void 0:s.parentElement)||void 0===e?void 0:e.parentElement)&&(s.parentElement.parentElement.style.height="100%")}}class u{constructor(e,t){this._endpoint=e,this._www=t}createNew(e,t){return new a(t,this._endpoint,this._www)}}const p={id:"trame-jupyter-extension:plugin",description:"A JupyterLab extension for trame communication layer",autoStart:!0,activate:async e=>{const t=new c,s=new c,n={app:e,kernelsRegistry:t,commsRegistry:s,init:function(e){const n=e.frameElement.dataset.kernelId,r=t.getItem(n);let o=s.getItem(n);if(!r)throw new Error(`trame: Could not get kernel connection to ${n}`);return o&&o.isUseable()||(o=new i(r),o.open(),s.setItem(n,o),o.addEventListener("close",(()=>{s.setItem(n,null)}))),d(),{createWebSocket:()=>new l(e,o)}},updateOutputs:d};window.trameJupyter=n;const{endpoint:r,www:o}=await async function(){let e="",t="";const s=m.ServerConnection.makeSettings();t=h.URLExt.join(s.baseUrl,"trame-jupyter-server");const n=h.URLExt.join(s.baseUrl,"trame-jupyter-server","location");let i;try{i=await m.ServerConnection.makeRequest(n,{},s)}catch(e){throw new m.ServerConnection.NetworkError(e)}const r=await i.text();if(r.length>0)try{e=JSON.parse(r).www}catch(e){console.log("Not a JSON response body.",i)}if(!i.ok)throw new m.ServerConnection.ResponseError(i,r.message||r);return{endpoint:t,www:e}}();e.docRegistry.addWidgetExtension("Notebook",new u(r,o))}}}}]);