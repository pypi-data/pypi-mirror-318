from collections.abc import Mapping, Sequence
from typing import overload


class AxilM32:
    def __init__(self, clk: Signal8, rst: Signal8, m_axil_awaddr: Signal32, m_axil_awvalid: Signal8, m_axil_awready: Signal8, m_axil_wdata: Signal32, m_axil_wvalid: Signal8, m_axil_wready: Signal8, m_axil_bresp: Signal8, m_axil_bvalid: Signal8, m_axil_bready: Signal8, m_axil_araddr: Signal32, m_axil_arvalid: Signal8, m_axil_arready: Signal8, m_axil_rdata: Signal32, m_axil_rresp: Signal8, m_axil_rvalid: Signal8, m_axil_rready: Signal8) -> None: ...

    @property
    def bready(self) -> int: ...

    @bready.setter
    def bready(self, arg: int, /) -> None: ...

    @property
    def rready(self) -> int: ...

    @rready.setter
    def rready(self, arg: int, /) -> None: ...

    @overload
    def write_command(self, address: int, data: int) -> None: ...

    @overload
    def write_command(self, start_address: int, data: Sequence[int]) -> None: ...

    @overload
    def write_command(self, data: Mapping[int, int]) -> None: ...

    def read_bresp_buf(self, amount: int = -1) -> list[int]: ...

    @overload
    def read_command(self, address: int) -> None: ...

    @overload
    def read_command(self, addresses: Sequence[int]) -> None: ...

    def read_rdata_buf(self, amount: int = -1) -> list[int]: ...

    def read_rresp_buf(self, amount: int = -1) -> list[int]: ...

    @overload
    def write(self, address: int, data: int, timeout: int = -1) -> int: ...

    @overload
    def write(self, start_address: int, data: Sequence[int], timeout: int = -1) -> list[int]: ...

    @overload
    def write(self, data: Mapping[int, int], timeout: int = -1) -> list[int]: ...

    @overload
    def read(self, address: int, timeout: int = -1) -> tuple[int, int]: ...

    @overload
    def read(self, addresses: Sequence[int], timeout: int = -1) -> tuple[list[int], list[int]]: ...

    def __getitem__(self, arg: int, /) -> int: ...

    def __setitem__(self, arg0: int, arg1: int, /) -> None: ...

class AxisRx16:
    def __init__(self, clk: Signal8, rst: Signal8, s_axis_tdata: Signal16, s_axis_tvalid: Signal8, s_axis_tready: Signal8, s_axis_tid: Signal8 | None = None, s_axis_tlast: Signal8 | None = None) -> None: ...

    @property
    def width(self) -> int: ...

    @width.setter
    def width(self, width: int = 16) -> None: ...

    @property
    def tready(self) -> int: ...

    @tready.setter
    def tready(self, value: int) -> None: ...

    def read_rx_buf(self, clear: int = -1) -> list[int]: ...

    def read_tid(self, clear: int = -1) -> list[int]: ...

    @overload
    def read(self, timeout: int = -1) -> int: ...

    @overload
    def read(self, n: int, timeout: int = -1) -> list[int]: ...

    @overload
    def read(self, n: int, q: int, timeout: int = -1) -> list[float]: ...

class AxisRx32:
    def __init__(self, clk: Signal8, rst: Signal8, s_axis_tdata: Signal32, s_axis_tvalid: Signal8, s_axis_tready: Signal8, s_axis_tid: Signal8 | None = None, s_axis_tlast: Signal8 | None = None) -> None: ...

    @property
    def width(self) -> int: ...

    @width.setter
    def width(self, width: int = 32) -> None: ...

    @property
    def tready(self) -> int: ...

    @tready.setter
    def tready(self, value: int) -> None: ...

    def read_rx_buf(self, clear: int = -1) -> list[int]: ...

    def read_tid(self, clear: int = -1) -> list[int]: ...

    @overload
    def read(self, timeout: int = -1) -> int: ...

    @overload
    def read(self, n: int, timeout: int = -1) -> list[int]: ...

    @overload
    def read(self, n: int, q: int, timeout: int = -1) -> list[float]: ...

class AxisRx64:
    def __init__(self, clk: Signal8, rst: Signal8, s_axis_tdata: Signal64, s_axis_tvalid: Signal8, s_axis_tready: Signal8, s_axis_tid: Signal8 | None = None, s_axis_tlast: Signal8 | None = None) -> None: ...

    @property
    def width(self) -> int: ...

    @width.setter
    def width(self, width: int = 64) -> None: ...

    @property
    def tready(self) -> int: ...

    @tready.setter
    def tready(self, value: int) -> None: ...

    def read_rx_buf(self, clear: int = -1) -> list[int]: ...

    def read_tid(self, clear: int = -1) -> list[int]: ...

    @overload
    def read(self, timeout: int = -1) -> int: ...

    @overload
    def read(self, n: int, timeout: int = -1) -> list[int]: ...

    @overload
    def read(self, n: int, q: int, timeout: int = -1) -> list[float]: ...

class AxisRx8:
    def __init__(self, clk: Signal8, rst: Signal8, s_axis_tdata: Signal8, s_axis_tvalid: Signal8, s_axis_tready: Signal8, s_axis_tid: Signal8 | None = None, s_axis_tlast: Signal8 | None = None) -> None: ...

    @property
    def width(self) -> int: ...

    @width.setter
    def width(self, width: int = 8) -> None: ...

    @property
    def tready(self) -> int: ...

    @tready.setter
    def tready(self, value: int) -> None: ...

    def read_rx_buf(self, clear: int = -1) -> list[int]: ...

    def read_tid(self, clear: int = -1) -> list[int]: ...

    @overload
    def read(self, timeout: int = -1) -> int: ...

    @overload
    def read(self, n: int, timeout: int = -1) -> list[int]: ...

    @overload
    def read(self, n: int, q: int, timeout: int = -1) -> list[float]: ...

class AxisTx16:
    def __init__(self, clk: Signal8, rst: Signal8, m_axis_tdata: Signal16, m_axis_tvalid: Signal8, m_axis_tready: Signal8, m_axis_tid: Signal8 | None = None, m_axis_tlast: Signal8 | None = None, tid_pattern: Sequence[int] = [0]) -> None: ...

    @overload
    def write_command(self, data: int) -> None: ...

    @overload
    def write_command(self, data: Sequence[int]) -> None: ...

    @overload
    def write_command(self, data: float, q: int = 0) -> None: ...

    @overload
    def write_command(self, data: Sequence[float], q: int = 0) -> None: ...

    @overload
    def write(self, data: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Sequence[int], timeout: int = -1) -> None: ...

    @overload
    def write(self, data: float, q: int = 0, timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Sequence[float], q: int = 0, timeout: int = -1) -> None: ...

class AxisTx32:
    def __init__(self, clk: Signal8, rst: Signal8, m_axis_tdata: Signal32, m_axis_tvalid: Signal8, m_axis_tready: Signal8, m_axis_tid: Signal8 | None = None, m_axis_tlast: Signal8 | None = None, tid_pattern: Sequence[int] = [0]) -> None: ...

    @overload
    def write_command(self, data: int) -> None: ...

    @overload
    def write_command(self, data: Sequence[int]) -> None: ...

    @overload
    def write_command(self, data: float, q: int = 0) -> None: ...

    @overload
    def write_command(self, data: Sequence[float], q: int = 0) -> None: ...

    @overload
    def write(self, data: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Sequence[int], timeout: int = -1) -> None: ...

    @overload
    def write(self, data: float, q: int = 0, timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Sequence[float], q: int = 0, timeout: int = -1) -> None: ...

class AxisTx64:
    def __init__(self, clk: Signal8, rst: Signal8, m_axis_tdata: Signal64, m_axis_tvalid: Signal8, m_axis_tready: Signal8, m_axis_tid: Signal8 | None = None, m_axis_tlast: Signal8 | None = None, tid_pattern: Sequence[int] = [0]) -> None: ...

    @overload
    def write_command(self, data: int) -> None: ...

    @overload
    def write_command(self, data: Sequence[int]) -> None: ...

    @overload
    def write_command(self, data: float, q: int = 0) -> None: ...

    @overload
    def write_command(self, data: Sequence[float], q: int = 0) -> None: ...

    @overload
    def write(self, data: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Sequence[int], timeout: int = -1) -> None: ...

    @overload
    def write(self, data: float, q: int = 0, timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Sequence[float], q: int = 0, timeout: int = -1) -> None: ...

class AxisTx8:
    def __init__(self, clk: Signal8, rst: Signal8, m_axis_tdata: Signal8, m_axis_tvalid: Signal8, m_axis_tready: Signal8, m_axis_tid: Signal8 | None = None, m_axis_tlast: Signal8 | None = None, tid_pattern: Sequence[int] = [0]) -> None: ...

    @overload
    def write_command(self, data: int) -> None: ...

    @overload
    def write_command(self, data: Sequence[int]) -> None: ...

    @overload
    def write_command(self, data: float, q: int = 0) -> None: ...

    @overload
    def write_command(self, data: Sequence[float], q: int = 0) -> None: ...

    @overload
    def write(self, data: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Sequence[int], timeout: int = -1) -> None: ...

    @overload
    def write(self, data: float, q: int = 0, timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Sequence[float], q: int = 0, timeout: int = -1) -> None: ...

class Clock(Signal8):
    def __init__(self, period: float) -> None: ...

    @property
    def period(self) -> int: ...

class Context:
    def __init__(self, time_unit: float = 1e-09, time_precision: float = 1e-09) -> None: ...

    def __enter__(self) -> Context: ...

    def __exit__(self, exc_type: object | None = None, exc_value: object | None = None, traceback: object | None = None) -> None: ...

    def set_timescale(self, time_unit: float, time_precision: float) -> None: ...

    @property
    def time_unit(self) -> float: ...

    @time_unit.setter
    def time_unit(self, time_unit: float) -> None: ...

    @property
    def time_precision(self) -> float: ...

    @time_precision.setter
    def time_precision(self, time_precision: float) -> None: ...

    @property
    def time_step(self) -> int: ...

    def time(self) -> int: ...

    def clear(self) -> None: ...

    def elaborate(self) -> None: ...

    @property
    def elaborate_done(self) -> bool: ...

    def eval(self) -> None: ...

    def run(self, time_inc: int = 1) -> None: ...

    @property
    def models(self) -> list[Model]: ...

    def __repr__(self) -> str: ...

    def __str__(self) -> str: ...

class ContextFactory:
    def create(self) -> Context: ...

    def obtain(self) -> Context: ...

    def reset(self) -> None: ...

class Dff16(Signal16):
    def __init__(self, clk: Signal8, initial: int = 0, width: int = 16, signed: bool = False) -> None: ...

class Dff32(Signal32):
    def __init__(self, clk: Signal8, initial: int = 0, width: int = 32, signed: bool = False) -> None: ...

class Dff64(Signal64):
    def __init__(self, clk: Signal8, initial: int = 0, width: int = 64, signed: bool = False) -> None: ...

class Dff8(Signal8):
    def __init__(self, clk: Signal8, initial: int = 0, width: int = 8, signed: bool = False) -> None: ...

class Model:
    def __init__(self) -> None: ...

    @property
    def context(self) -> Context: ...

    def eval_step(self) -> None: ...

    def eval_end_step(self) -> None: ...

    port_info: str = ...
    """(arg: object, /) -> str"""

class Signal16:
    def __init__(self, initial: int = 0, width: int = 16, signed: bool = False) -> None: ...

    @property
    def width(self) -> int: ...

    @width.setter
    def width(self, arg: int, /) -> None: ...

    @property
    def sign_extend(self) -> bool: ...

    @sign_extend.setter
    def sign_extend(self, extend: bool) -> None: ...

    def posedge(self) -> bool: ...

    def negedge(self) -> bool: ...

    def changed(self) -> bool: ...

    @property
    def d(self) -> int: ...

    @d.setter
    def d(self, value: int) -> None: ...

    @property
    def q(self) -> int: ...

class Signal32:
    def __init__(self, initial: int = 0, width: int = 32, signed: bool = False) -> None: ...

    @property
    def width(self) -> int: ...

    @width.setter
    def width(self, arg: int, /) -> None: ...

    @property
    def sign_extend(self) -> bool: ...

    @sign_extend.setter
    def sign_extend(self, extend: bool) -> None: ...

    def posedge(self) -> bool: ...

    def negedge(self) -> bool: ...

    def changed(self) -> bool: ...

    @property
    def d(self) -> int: ...

    @d.setter
    def d(self, value: int) -> None: ...

    @property
    def q(self) -> int: ...

class Signal64:
    def __init__(self, initial: int = 0, width: int = 64, signed: bool = False) -> None: ...

    @property
    def width(self) -> int: ...

    @width.setter
    def width(self, arg: int, /) -> None: ...

    @property
    def sign_extend(self) -> bool: ...

    @sign_extend.setter
    def sign_extend(self, extend: bool) -> None: ...

    def posedge(self) -> bool: ...

    def negedge(self) -> bool: ...

    def changed(self) -> bool: ...

    @property
    def d(self) -> int: ...

    @d.setter
    def d(self, value: int) -> None: ...

    @property
    def q(self) -> int: ...

class Signal8:
    def __init__(self, initial: int = 0, width: int = 8, signed: bool = False) -> None: ...

    @property
    def width(self) -> int: ...

    @width.setter
    def width(self, arg: int, /) -> None: ...

    @property
    def sign_extend(self) -> bool: ...

    @sign_extend.setter
    def sign_extend(self, extend: bool) -> None: ...

    def posedge(self) -> bool: ...

    def negedge(self) -> bool: ...

    def changed(self) -> bool: ...

    @property
    def d(self) -> int: ...

    @d.setter
    def d(self, value: int) -> None: ...

    @property
    def q(self) -> int: ...

class WishboneM16:
    def __init__(self, clk: Signal8, rst: Signal8, cyc_o: Signal8, stb_o: Signal8, we_o: Signal8, ack_i: Signal8, stall_i: Signal8, addr_o: Signal32, data_o: Signal16, data_i: Signal16) -> None: ...

    def command(self, mode: bool, address: int, data: int = 0) -> None: ...

    def clear(self, arg: int, /) -> None: ...

    @property
    def busy(self) -> bool: ...

    @overload
    def read_command(self, start_address: int, n: int = 1) -> None: ...

    @overload
    def read_command(self, addresses: Sequence[int]) -> None: ...

    @property
    def rx_size(self) -> int: ...

    @overload
    def rx_data(self, amount: int = -1) -> list[int]: ...

    @overload
    def rx_data(self, q: int, amount: int = -1) -> list[float]: ...

    @overload
    def read(self, address: int, timeout: int = -1) -> int: ...

    @overload
    def read(self, addresses: Sequence[int], timeout: int = -1) -> list[int]: ...

    @overload
    def read(self, address: int, q: int, timeout: int = -1) -> float: ...

    @overload
    def read(self, addresses: Sequence[int], q: int, timeout: int = -1) -> list[float]: ...

    @overload
    def write_command(self, address: int, data: int) -> None: ...

    @overload
    def write_command(self, start_address: int, data: Sequence[int]) -> None: ...

    @overload
    def write_command(self, data: Mapping[int, int]) -> None: ...

    @overload
    def write_command(self, address: int, data: float, q: int) -> None: ...

    @overload
    def write_command(self, start_address: int, data: Sequence[float], q: int) -> None: ...

    @overload
    def write_command(self, data: Mapping[int, float], q: int) -> None: ...

    @overload
    def write(self, address: int, data: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, start_address: int, data: Sequence[int], timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Mapping[int, int], timeout: int = -1) -> None: ...

    @overload
    def write(self, address: int, data: float, q: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, start_address: int, data: Sequence[float], q: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Mapping[int, float], q: int, timeout: int = -1) -> None: ...

    def __getitem__(self, address: int) -> int: ...

    def __setitem__(self, address: int, data: int) -> None: ...

class WishboneM32:
    def __init__(self, clk: Signal8, rst: Signal8, cyc_o: Signal8, stb_o: Signal8, we_o: Signal8, ack_i: Signal8, stall_i: Signal8, addr_o: Signal32, data_o: Signal32, data_i: Signal32) -> None: ...

    def command(self, mode: bool, address: int, data: int = 0) -> None: ...

    def clear(self, arg: int, /) -> None: ...

    @property
    def busy(self) -> bool: ...

    @overload
    def read_command(self, start_address: int, n: int = 1) -> None: ...

    @overload
    def read_command(self, addresses: Sequence[int]) -> None: ...

    @property
    def rx_size(self) -> int: ...

    @overload
    def rx_data(self, amount: int = -1) -> list[int]: ...

    @overload
    def rx_data(self, q: int, amount: int = -1) -> list[float]: ...

    @overload
    def read(self, address: int, timeout: int = -1) -> int: ...

    @overload
    def read(self, addresses: Sequence[int], timeout: int = -1) -> list[int]: ...

    @overload
    def read(self, address: int, q: int, timeout: int = -1) -> float: ...

    @overload
    def read(self, addresses: Sequence[int], q: int, timeout: int = -1) -> list[float]: ...

    @overload
    def write_command(self, address: int, data: int) -> None: ...

    @overload
    def write_command(self, start_address: int, data: Sequence[int]) -> None: ...

    @overload
    def write_command(self, data: Mapping[int, int]) -> None: ...

    @overload
    def write_command(self, address: int, data: float, q: int) -> None: ...

    @overload
    def write_command(self, start_address: int, data: Sequence[float], q: int) -> None: ...

    @overload
    def write_command(self, data: Mapping[int, float], q: int) -> None: ...

    @overload
    def write(self, address: int, data: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, start_address: int, data: Sequence[int], timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Mapping[int, int], timeout: int = -1) -> None: ...

    @overload
    def write(self, address: int, data: float, q: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, start_address: int, data: Sequence[float], q: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Mapping[int, float], q: int, timeout: int = -1) -> None: ...

    def __getitem__(self, address: int) -> int: ...

    def __setitem__(self, address: int, data: int) -> None: ...

class WishboneM64:
    def __init__(self, clk: Signal8, rst: Signal8, cyc_o: Signal8, stb_o: Signal8, we_o: Signal8, ack_i: Signal8, stall_i: Signal8, addr_o: Signal32, data_o: Signal64, data_i: Signal64) -> None: ...

    def command(self, mode: bool, address: int, data: int = 0) -> None: ...

    def clear(self, arg: int, /) -> None: ...

    @property
    def busy(self) -> bool: ...

    @overload
    def read_command(self, start_address: int, n: int = 1) -> None: ...

    @overload
    def read_command(self, addresses: Sequence[int]) -> None: ...

    @property
    def rx_size(self) -> int: ...

    @overload
    def rx_data(self, amount: int = -1) -> list[int]: ...

    @overload
    def rx_data(self, q: int, amount: int = -1) -> list[float]: ...

    @overload
    def read(self, address: int, timeout: int = -1) -> int: ...

    @overload
    def read(self, addresses: Sequence[int], timeout: int = -1) -> list[int]: ...

    @overload
    def read(self, address: int, q: int, timeout: int = -1) -> float: ...

    @overload
    def read(self, addresses: Sequence[int], q: int, timeout: int = -1) -> list[float]: ...

    @overload
    def write_command(self, address: int, data: int) -> None: ...

    @overload
    def write_command(self, start_address: int, data: Sequence[int]) -> None: ...

    @overload
    def write_command(self, data: Mapping[int, int]) -> None: ...

    @overload
    def write_command(self, address: int, data: float, q: int) -> None: ...

    @overload
    def write_command(self, start_address: int, data: Sequence[float], q: int) -> None: ...

    @overload
    def write_command(self, data: Mapping[int, float], q: int) -> None: ...

    @overload
    def write(self, address: int, data: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, start_address: int, data: Sequence[int], timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Mapping[int, int], timeout: int = -1) -> None: ...

    @overload
    def write(self, address: int, data: float, q: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, start_address: int, data: Sequence[float], q: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Mapping[int, float], q: int, timeout: int = -1) -> None: ...

    def __getitem__(self, address: int) -> int: ...

    def __setitem__(self, address: int, data: int) -> None: ...

class WishboneM8:
    def __init__(self, clk: Signal8, rst: Signal8, cyc_o: Signal8, stb_o: Signal8, we_o: Signal8, ack_i: Signal8, stall_i: Signal8, addr_o: Signal32, data_o: Signal8, data_i: Signal8) -> None: ...

    def command(self, mode: bool, address: int, data: int = 0) -> None: ...

    def clear(self, arg: int, /) -> None: ...

    @property
    def busy(self) -> bool: ...

    @overload
    def read_command(self, start_address: int, n: int = 1) -> None: ...

    @overload
    def read_command(self, addresses: Sequence[int]) -> None: ...

    @property
    def rx_size(self) -> int: ...

    @overload
    def rx_data(self, amount: int = -1) -> list[int]: ...

    @overload
    def rx_data(self, q: int, amount: int = -1) -> list[float]: ...

    @overload
    def read(self, address: int, timeout: int = -1) -> int: ...

    @overload
    def read(self, addresses: Sequence[int], timeout: int = -1) -> list[int]: ...

    @overload
    def read(self, address: int, q: int, timeout: int = -1) -> float: ...

    @overload
    def read(self, addresses: Sequence[int], q: int, timeout: int = -1) -> list[float]: ...

    @overload
    def write_command(self, address: int, data: int) -> None: ...

    @overload
    def write_command(self, start_address: int, data: Sequence[int]) -> None: ...

    @overload
    def write_command(self, data: Mapping[int, int]) -> None: ...

    @overload
    def write_command(self, address: int, data: float, q: int) -> None: ...

    @overload
    def write_command(self, start_address: int, data: Sequence[float], q: int) -> None: ...

    @overload
    def write_command(self, data: Mapping[int, float], q: int) -> None: ...

    @overload
    def write(self, address: int, data: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, start_address: int, data: Sequence[int], timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Mapping[int, int], timeout: int = -1) -> None: ...

    @overload
    def write(self, address: int, data: float, q: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, start_address: int, data: Sequence[float], q: int, timeout: int = -1) -> None: ...

    @overload
    def write(self, data: Mapping[int, float], q: int, timeout: int = -1) -> None: ...

    def __getitem__(self, address: int) -> int: ...

    def __setitem__(self, address: int, data: int) -> None: ...

def global_context() -> ContextFactory: ...

def link_context(global_context: ContextFactory) -> None: ...
