
[project]
name = "dspsim"
dynamic = ["version"]
description = "Simulate Verilog modules using Python bindings for Verilator models."
readme = "README.md"
authors = [{ name = "Frank Sodari" }]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Programming Language :: C++",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]

# Supporting Stable ABI 3.12 wheels.
requires-python = ">=3.12"

# Needed for code generation and building modules.
dependencies = [
    "scikit-build-core>=0.10.7",
    "nanobind>=2.4.0",
    "jinja2>=3.1.4",
    "numpy>=2.1.3",
    "dataclass-wizard[toml, yaml]>=0.30.1",
    "cobs>=1.2.1",
    "pyserial>=3.5",
    "cyflash",
]

# Optional dependencies
[dependency-groups]
# Install verilator-dspsim with this package. Optionally, you can use verilator already installed.
verilator = ["verilator-dspsim>=5.30.9"]
dev = [
    "pytest>=8.3.3",
    "verilator-dspsim>=5.30.9",
    "ruff>=0.8.3",
    "matplotlib>=3.10.0",
    "seaborn>=0.13.2",
    "scipy>=1.14.1",
    "mkdocs>=1.6.1",
    "tqdm>=4.67.1",
]

# Available on github. Wheels and sdist published to pypi.org
[project.urls]
Homepage = "https://github.com/fsodari/dspsim"

# Project scripts.
[project.scripts]
# Main command line interface.
dspsim = "dspsim.main:main"
psoc = "dspsim.psoc_creator:main"
avril = "dspsim.avril:main"
# Generate binding code for modules.

#---------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------#

# dspsim tool configuration for the library module.
[tool.dspsim]
cmake.version = ">=3.26.1"
# Use all sources in the dspsim/hdl directory.
sources = ["src/dspsim/hdl/*.sv", "src/dspsim/hdl/*.v"]
# Can use fst on linux.
trace = "vcd"

# Global parameter defaults. Applied to all models. Models can override this value.
[tool.dspsim.parameters]
DW = 24    # Stream data width
CFGAW = 32 # Config address width
CFGDW = 32 # Config data width
COEFW = 18 # Coefficient width
COEFQ = 16 # Coefficient fixed-point q

# Configure one of the default models or create models with different parameters.
[tool.dspsim.models]
AsyncSync8 = { name = "AsyncSync8", source = "AsyncSync.sv", parameters = { DW = 8 } }
FifoAsync8 = { name = "FifoAsync8", source = "FifoAsync.sv", parameters = { DW = 8 } }
WbRegs64 = { name = "WbRegs64", source = "WbRegs.sv", parameters = { N_CTL = 64, N_STS = 64 } }
WbRegs256 = { name = "WbRegs256", source = "WbRegs.sv", parameters = { N_CTL = 256, N_STS = 256 } }
WbRegs1024 = { name = "WbRegs1024", source = "WbRegs.sv", parameters = { N_CTL = 1024, N_STS = 1024 } }
IIR2 = { source = "IIR.sv", parameters = { ORDER = 2 } }
IIR4 = { source = "IIR.sv", parameters = { ORDER = 4, COEFQ = 15 } }
IIR6 = { source = "IIR.sv", parameters = { ORDER = 6, COEFQ = 15 } }
IIR8 = { source = "IIR.sv", parameters = { ORDER = 8, COEFQ = 15 } }
#---------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------#


###
### Build System Config
###
[build-system]
requires = [
    "scikit-build-core>=0.10.7",
    "nanobind>=2.4.0",
    "verilator-dspsim>=5.30.9",
    "numpy>=2.1.3",
    "jinja2>=3.1.4",
    "dataclass-wizard[toml]>=0.30.1",
]
build-backend = "scikit_build_core.build"

[tool.scikit-build]
cmake.args = ["-Wno-dev"]                 # silence cmake warning about verilator package name.
cmake.build-type = "Release"
minimum-version = "build-system.requires"
wheel.packages = ["src/dspsim"]
# Stable ABI for Python3.12+
wheel.py-api = "cp312"

[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.regex"
input = "src/dspsim/__init__.py"

###
###
###

###
### Cibuildwheel config
###
[tool.cibuildwheel]
# This version seems to work best. Need to use gcc13 for local builds.
manylinux-x86_64-image = "manylinux_2_28"
# 64 bit builds
archs = ["auto64"]
# Python3.12+. Older versions should work?
build = ["cp312-*"]
# Don't build arm. Use only > cp39, no PyPy. Not using musl anywhere so no musl (it works though?)
skip = ["*-win_arm64", "*musllinux*"]

# Run pytest to ensure that the package was build correctly
test-command = "pytest {project}/tests/test_framework.py"
test-requires = "pytest"
build-verbosity = 1

[tool.uv.sources]
cyflash = { git = "https://github.com/arachnidlabs/cyflash" }
###
###
###
