from collections.abc import Sequence
import dspsim._framework
import os


class AsyncSync:
    def __init__(self, clk: dspsim._framework.Signal8, d: dspsim._framework.Signal32, q: dspsim._framework.Signal32) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    SYNC_STAGES: int = ...
    """(arg: object, /) -> int"""

    PIPELINE_STAGES: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class AsyncSync8:
    def __init__(self, clk: dspsim._framework.Signal8, d: dspsim._framework.Signal8, q: dspsim._framework.Signal8) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    SYNC_STAGES: int = ...
    """(arg: object, /) -> int"""

    PIPELINE_STAGES: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class AxilBram:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axil_awaddr: dspsim._framework.Signal32, s_axil_awvalid: dspsim._framework.Signal8, s_axil_awready: dspsim._framework.Signal8, s_axil_wdata: dspsim._framework.Signal32, s_axil_wvalid: dspsim._framework.Signal8, s_axil_wready: dspsim._framework.Signal8, s_axil_bresp: dspsim._framework.Signal8, s_axil_bvalid: dspsim._framework.Signal8, s_axil_bready: dspsim._framework.Signal8, s_axil_araddr: dspsim._framework.Signal32, s_axil_arvalid: dspsim._framework.Signal8, s_axil_arready: dspsim._framework.Signal8, s_axil_rdata: dspsim._framework.Signal32, s_axil_rresp: dspsim._framework.Signal8, s_axil_rvalid: dspsim._framework.Signal8, s_axil_rready: dspsim._framework.Signal8, bram_en: dspsim._framework.Signal8, bram_we: dspsim._framework.Signal8, bram_addr: dspsim._framework.Signal8, bram_dout: dspsim._framework.Signal32, bran_din: dspsim._framework.Signal32, bram_regce: dspsim._framework.Signal8) -> None: ...

    CFGAW: int = ...
    """(arg: object, /) -> int"""

    CFGDW: int = ...
    """(arg: object, /) -> int"""

    REGW: int = ...
    """(arg: object, /) -> int"""

    DEPTH: int = ...
    """(arg: object, /) -> int"""

    OREG: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class AxilRegs:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axil_awaddr: dspsim._framework.Signal32, s_axil_awvalid: dspsim._framework.Signal8, s_axil_awready: dspsim._framework.Signal8, s_axil_wdata: dspsim._framework.Signal32, s_axil_wvalid: dspsim._framework.Signal8, s_axil_wready: dspsim._framework.Signal8, s_axil_bresp: dspsim._framework.Signal8, s_axil_bvalid: dspsim._framework.Signal8, s_axil_bready: dspsim._framework.Signal8, s_axil_araddr: dspsim._framework.Signal32, s_axil_arvalid: dspsim._framework.Signal8, s_axil_arready: dspsim._framework.Signal8, s_axil_rdata: dspsim._framework.Signal32, s_axil_rresp: dspsim._framework.Signal8, s_axil_rvalid: dspsim._framework.Signal8, s_axil_rready: dspsim._framework.Signal8, ctl_regs: Sequence[dspsim._framework.Signal32], sts_regs: Sequence[dspsim._framework.Signal32]) -> None: ...

    CFGAW: int = ...
    """(arg: object, /) -> int"""

    CFGDW: int = ...
    """(arg: object, /) -> int"""

    REGW: int = ...
    """(arg: object, /) -> int"""

    N_CTL: int = ...
    """(arg: object, /) -> int"""

    N_STS: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class BramSdp:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, ena: dspsim._framework.Signal8, wea: dspsim._framework.Signal8, addra: dspsim._framework.Signal16, dina: dspsim._framework.Signal32, douta: dspsim._framework.Signal32, regcea: dspsim._framework.Signal8, enb: dspsim._framework.Signal8, web: dspsim._framework.Signal8, addrb: dspsim._framework.Signal16, dinb: dspsim._framework.Signal32, doutb: dspsim._framework.Signal32, regceb: dspsim._framework.Signal8) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    DEPTH: int = ...
    """(arg: object, /) -> int"""

    OREG: int = ...
    """(arg: object, /) -> int"""

    INIT_FILE: str = ...
    """(arg: object, /) -> str"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class BramTdp:
    def __init__(self, clka: dspsim._framework.Signal8, rsta: dspsim._framework.Signal8, ena: dspsim._framework.Signal8, wea: dspsim._framework.Signal8, addra: dspsim._framework.Signal16, dina: dspsim._framework.Signal32, douta: dspsim._framework.Signal32, regcea: dspsim._framework.Signal8, clkb: dspsim._framework.Signal8, rstb: dspsim._framework.Signal8, enb: dspsim._framework.Signal8, web: dspsim._framework.Signal8, addrb: dspsim._framework.Signal16, dinb: dspsim._framework.Signal32, doutb: dspsim._framework.Signal32, regceb: dspsim._framework.Signal8) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    DEPTH: int = ...
    """(arg: object, /) -> int"""

    OREG: int = ...
    """(arg: object, /) -> int"""

    INIT_FILE: str = ...
    """(arg: object, /) -> str"""

    MODE: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class Combiner:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_tdata: Sequence[dspsim._framework.Signal32], s_axis_tvalid: Sequence[dspsim._framework.Signal8], s_axis_tready: Sequence[dspsim._framework.Signal8], m_axis_tdata: Sequence[dspsim._framework.Signal32], m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    N: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class FifoAsync:
    def __init__(self, clka: dspsim._framework.Signal8, rsta: dspsim._framework.Signal8, s_axis_tdata: dspsim._framework.Signal32, s_axis_tvalid: dspsim._framework.Signal8, s_axis_tready: dspsim._framework.Signal8, s_axis_tid: dspsim._framework.Signal8, clkb: dspsim._framework.Signal8, rstb: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal32, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8, m_axis_tid: dspsim._framework.Signal8) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    N: int = ...
    """(arg: object, /) -> int"""

    TIDW: int = ...
    """(arg: object, /) -> int"""

    INPUT_BUFFER: int = ...
    """(arg: object, /) -> int"""

    SYNC_STAGES: int = ...
    """(arg: object, /) -> int"""

    PIPELINE_STAGES: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class FifoAsync8:
    def __init__(self, clka: dspsim._framework.Signal8, rsta: dspsim._framework.Signal8, s_axis_tdata: dspsim._framework.Signal8, s_axis_tvalid: dspsim._framework.Signal8, s_axis_tready: dspsim._framework.Signal8, s_axis_tid: dspsim._framework.Signal8, clkb: dspsim._framework.Signal8, rstb: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal8, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8, m_axis_tid: dspsim._framework.Signal8) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    N: int = ...
    """(arg: object, /) -> int"""

    TIDW: int = ...
    """(arg: object, /) -> int"""

    INPUT_BUFFER: int = ...
    """(arg: object, /) -> int"""

    SYNC_STAGES: int = ...
    """(arg: object, /) -> int"""

    PIPELINE_STAGES: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class FifoSync:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_tdata: dspsim._framework.Signal32, s_axis_tvalid: dspsim._framework.Signal8, s_axis_tready: dspsim._framework.Signal8, s_axis_tid: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal32, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8, m_axis_tid: dspsim._framework.Signal8) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    N: int = ...
    """(arg: object, /) -> int"""

    TIDW: int = ...
    """(arg: object, /) -> int"""

    USE_INPUT_BUFFER: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class Gain:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_tdata: dspsim._framework.Signal32, s_axis_tvalid: dspsim._framework.Signal8, s_axis_tready: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal32, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8, gain: dspsim._framework.Signal32) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    COEFW: int = ...
    """(arg: object, /) -> int"""

    COEFQ: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class I2SClkGen:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, lrclk: dspsim._framework.Signal8, sclk: dspsim._framework.Signal8) -> None: ...

    MCLK_LRCLK: int = ...
    """(arg: object, /) -> int"""

    MCLK_SCLK: int = ...
    """(arg: object, /) -> int"""

    LRCLK_INIT: int = ...
    """(arg: object, /) -> int"""

    SCLK_INIT: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class I2SRx:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal32, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8, m_axis_tid: dspsim._framework.Signal8, lrclk: dspsim._framework.Signal8, sclk: dspsim._framework.Signal8, sdi: dspsim._framework.Signal8) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class I2STx:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_tdata: dspsim._framework.Signal32, s_axis_tvalid: dspsim._framework.Signal8, s_axis_tready: dspsim._framework.Signal8, s_axis_tid: dspsim._framework.Signal8, lrclk: dspsim._framework.Signal8, sclk: dspsim._framework.Signal8, sdo: dspsim._framework.Signal8) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    USE_INPUT_BUFFER: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class IIR:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_tdata: dspsim._framework.Signal32, s_axis_tvalid: dspsim._framework.Signal8, s_axis_tready: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal32, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8, cyc_i: dspsim._framework.Signal8, stb_i: dspsim._framework.Signal8, we_i: dspsim._framework.Signal8, ack_o: dspsim._framework.Signal8, stall_o: dspsim._framework.Signal8, addr_i: dspsim._framework.Signal32, data_i: dspsim._framework.Signal32, data_o: dspsim._framework.Signal32) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    CFGAW: int = ...
    """(arg: object, /) -> int"""

    CFGDW: int = ...
    """(arg: object, /) -> int"""

    COEFW: int = ...
    """(arg: object, /) -> int"""

    COEFQ: int = ...
    """(arg: object, /) -> int"""

    ORDER: int = ...
    """(arg: object, /) -> int"""

    STAGE_ORDER: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class IIR2:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_tdata: dspsim._framework.Signal32, s_axis_tvalid: dspsim._framework.Signal8, s_axis_tready: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal32, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8, cyc_i: dspsim._framework.Signal8, stb_i: dspsim._framework.Signal8, we_i: dspsim._framework.Signal8, ack_o: dspsim._framework.Signal8, stall_o: dspsim._framework.Signal8, addr_i: dspsim._framework.Signal32, data_i: dspsim._framework.Signal32, data_o: dspsim._framework.Signal32) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    CFGAW: int = ...
    """(arg: object, /) -> int"""

    CFGDW: int = ...
    """(arg: object, /) -> int"""

    COEFW: int = ...
    """(arg: object, /) -> int"""

    COEFQ: int = ...
    """(arg: object, /) -> int"""

    ORDER: int = ...
    """(arg: object, /) -> int"""

    STAGE_ORDER: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class IIR4:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_tdata: dspsim._framework.Signal32, s_axis_tvalid: dspsim._framework.Signal8, s_axis_tready: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal32, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8, cyc_i: dspsim._framework.Signal8, stb_i: dspsim._framework.Signal8, we_i: dspsim._framework.Signal8, ack_o: dspsim._framework.Signal8, stall_o: dspsim._framework.Signal8, addr_i: dspsim._framework.Signal32, data_i: dspsim._framework.Signal32, data_o: dspsim._framework.Signal32) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    CFGAW: int = ...
    """(arg: object, /) -> int"""

    CFGDW: int = ...
    """(arg: object, /) -> int"""

    COEFW: int = ...
    """(arg: object, /) -> int"""

    COEFQ: int = ...
    """(arg: object, /) -> int"""

    ORDER: int = ...
    """(arg: object, /) -> int"""

    STAGE_ORDER: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class IIR6:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_tdata: dspsim._framework.Signal32, s_axis_tvalid: dspsim._framework.Signal8, s_axis_tready: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal32, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8, cyc_i: dspsim._framework.Signal8, stb_i: dspsim._framework.Signal8, we_i: dspsim._framework.Signal8, ack_o: dspsim._framework.Signal8, stall_o: dspsim._framework.Signal8, addr_i: dspsim._framework.Signal32, data_i: dspsim._framework.Signal32, data_o: dspsim._framework.Signal32) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    CFGAW: int = ...
    """(arg: object, /) -> int"""

    CFGDW: int = ...
    """(arg: object, /) -> int"""

    COEFW: int = ...
    """(arg: object, /) -> int"""

    COEFQ: int = ...
    """(arg: object, /) -> int"""

    ORDER: int = ...
    """(arg: object, /) -> int"""

    STAGE_ORDER: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class IIR8:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_tdata: dspsim._framework.Signal32, s_axis_tvalid: dspsim._framework.Signal8, s_axis_tready: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal32, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8, cyc_i: dspsim._framework.Signal8, stb_i: dspsim._framework.Signal8, we_i: dspsim._framework.Signal8, ack_o: dspsim._framework.Signal8, stall_o: dspsim._framework.Signal8, addr_i: dspsim._framework.Signal32, data_i: dspsim._framework.Signal32, data_o: dspsim._framework.Signal32) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    CFGAW: int = ...
    """(arg: object, /) -> int"""

    CFGDW: int = ...
    """(arg: object, /) -> int"""

    COEFW: int = ...
    """(arg: object, /) -> int"""

    COEFQ: int = ...
    """(arg: object, /) -> int"""

    ORDER: int = ...
    """(arg: object, /) -> int"""

    STAGE_ORDER: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class Macc:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_atdata: dspsim._framework.Signal32, s_axis_btdata: dspsim._framework.Signal32, s_axis_tvalid: dspsim._framework.Signal8, s_axis_tready: dspsim._framework.Signal8, s_axis_tlast: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal64, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8) -> None: ...

    ADW: int = ...
    """(arg: object, /) -> int"""

    BDW: int = ...
    """(arg: object, /) -> int"""

    ODW: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class Macc2:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_atdata: dspsim._framework.Signal32, s_axis_atvalid: dspsim._framework.Signal8, s_axis_atready: dspsim._framework.Signal8, s_axis_atlast: dspsim._framework.Signal8, s_axis_btdata: dspsim._framework.Signal32, s_axis_btvalid: dspsim._framework.Signal8, s_axis_btready: dspsim._framework.Signal8, s_axis_btlast: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal64, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8) -> None: ...

    ADW: int = ...
    """(arg: object, /) -> int"""

    BDW: int = ...
    """(arg: object, /) -> int"""

    ODW: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class Mixer:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_tdata: dspsim._framework.Signal32, s_axis_tvalid: dspsim._framework.Signal8, s_axis_tready: dspsim._framework.Signal8, s_axis_tid: dspsim._framework.Signal8, s_axis_tlast: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal32, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8, m_axis_tid: dspsim._framework.Signal8, m_axis_tlast: dspsim._framework.Signal8, cyc_i: dspsim._framework.Signal8, stb_i: dspsim._framework.Signal8, we_i: dspsim._framework.Signal8, ack_o: dspsim._framework.Signal8, stall_o: dspsim._framework.Signal8, addr_i: dspsim._framework.Signal32, data_i: dspsim._framework.Signal32, data_o: dspsim._framework.Signal32) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    CFGAW: int = ...
    """(arg: object, /) -> int"""

    CFGDW: int = ...
    """(arg: object, /) -> int"""

    COEFW: int = ...
    """(arg: object, /) -> int"""

    COEFQ: int = ...
    """(arg: object, /) -> int"""

    M: int = ...
    """(arg: object, /) -> int"""

    N: int = ...
    """(arg: object, /) -> int"""

    TIDW: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class Skid:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_tdata: dspsim._framework.Signal32, s_axis_tvalid: dspsim._framework.Signal8, s_axis_tready: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal32, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class SomeModel:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, x: dspsim._framework.Signal32, y: dspsim._framework.Signal32, c: Sequence[dspsim._framework.Signal32], d: Sequence[Sequence[dspsim._framework.Signal32]], e: Sequence[Sequence[dspsim._framework.Signal32]]) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    COEFW: int = ...
    """(arg: object, /) -> int"""

    AW: int = ...
    """(arg: object, /) -> int"""

    X: int = ...
    """(arg: object, /) -> int"""

    BB: int = ...
    """(arg: object, /) -> int"""

    FP: float = ...
    """(arg: object, /) -> float"""

    SP: str = ...
    """(arg: object, /) -> str"""

    TRICK: str = ...
    """(arg: object, /) -> str"""

    IARR: list[int] = ...
    """(arg: object, /) -> list[int]"""

    SARR: list[str] = ...
    """(arg: object, /) -> list[str]"""

    IMAT: list[list[int]] = ...
    """(arg: object, /) -> list[list[int]]"""

    SMAT: list[list[list[str]]] = ...
    """(arg: object, /) -> list[list[list[str]]]"""

    NC: int = ...
    """(arg: object, /) -> int"""

    ND: int = ...
    """(arg: object, /) -> int"""

    MD: int = ...
    """(arg: object, /) -> int"""

    NE: int = ...
    """(arg: object, /) -> int"""

    ME: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class Spis:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_tdata: dspsim._framework.Signal8, s_axis_tvalid: dspsim._framework.Signal8, s_axis_tready: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal8, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8, cs: dspsim._framework.Signal8, sclk: dspsim._framework.Signal8, mosi: dspsim._framework.Signal8, miso: dspsim._framework.Signal8) -> None: ...

    CPOL: int = ...
    """(arg: object, /) -> int"""

    CPHA: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class StreamSerializer:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_tdata: Sequence[dspsim._framework.Signal32], s_axis_tvalid: Sequence[dspsim._framework.Signal8], s_axis_tready: Sequence[dspsim._framework.Signal8], m_axis_tdata: dspsim._framework.Signal32, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8, m_axis_tid: dspsim._framework.Signal8, m_axis_tlast: dspsim._framework.Signal8) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    N: int = ...
    """(arg: object, /) -> int"""

    TIDW: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class WbBram:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, cyc_i: dspsim._framework.Signal8, stb_i: dspsim._framework.Signal8, we_i: dspsim._framework.Signal8, ack_o: dspsim._framework.Signal8, stall_o: dspsim._framework.Signal8, addr_i: dspsim._framework.Signal32, data_i: dspsim._framework.Signal32, data_o: dspsim._framework.Signal32, bram_en: dspsim._framework.Signal8, bram_we: dspsim._framework.Signal8, bram_addr: dspsim._framework.Signal16, bram_dout: dspsim._framework.Signal32, bram_din: dspsim._framework.Signal32, bram_regce: dspsim._framework.Signal8) -> None: ...

    CFGAW: int = ...
    """(arg: object, /) -> int"""

    CFGDW: int = ...
    """(arg: object, /) -> int"""

    DW: int = ...
    """(arg: object, /) -> int"""

    DEPTH: int = ...
    """(arg: object, /) -> int"""

    SIGN_EXTEND: int = ...
    """(arg: object, /) -> int"""

    OREG: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class WbRegs:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, cyc_i: dspsim._framework.Signal8, stb_i: dspsim._framework.Signal8, we_i: dspsim._framework.Signal8, ack_o: dspsim._framework.Signal8, stall_o: dspsim._framework.Signal8, addr_i: dspsim._framework.Signal32, data_i: dspsim._framework.Signal32, data_o: dspsim._framework.Signal32, ctl_regs: Sequence[dspsim._framework.Signal32], sts_regs: Sequence[dspsim._framework.Signal32]) -> None: ...

    CFGAW: int = ...
    """(arg: object, /) -> int"""

    CFGDW: int = ...
    """(arg: object, /) -> int"""

    REGW: int = ...
    """(arg: object, /) -> int"""

    N_CTL: int = ...
    """(arg: object, /) -> int"""

    N_STS: int = ...
    """(arg: object, /) -> int"""

    SIGN_EXTEND: int = ...
    """(arg: object, /) -> int"""

    INIT_FILE: str = ...
    """(arg: object, /) -> str"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class WbRegs1024:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, cyc_i: dspsim._framework.Signal8, stb_i: dspsim._framework.Signal8, we_i: dspsim._framework.Signal8, ack_o: dspsim._framework.Signal8, stall_o: dspsim._framework.Signal8, addr_i: dspsim._framework.Signal32, data_i: dspsim._framework.Signal32, data_o: dspsim._framework.Signal32, ctl_regs: Sequence[dspsim._framework.Signal32], sts_regs: Sequence[dspsim._framework.Signal32]) -> None: ...

    CFGAW: int = ...
    """(arg: object, /) -> int"""

    CFGDW: int = ...
    """(arg: object, /) -> int"""

    REGW: int = ...
    """(arg: object, /) -> int"""

    N_CTL: int = ...
    """(arg: object, /) -> int"""

    N_STS: int = ...
    """(arg: object, /) -> int"""

    SIGN_EXTEND: int = ...
    """(arg: object, /) -> int"""

    INIT_FILE: str = ...
    """(arg: object, /) -> str"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class WbRegs256:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, cyc_i: dspsim._framework.Signal8, stb_i: dspsim._framework.Signal8, we_i: dspsim._framework.Signal8, ack_o: dspsim._framework.Signal8, stall_o: dspsim._framework.Signal8, addr_i: dspsim._framework.Signal32, data_i: dspsim._framework.Signal32, data_o: dspsim._framework.Signal32, ctl_regs: Sequence[dspsim._framework.Signal32], sts_regs: Sequence[dspsim._framework.Signal32]) -> None: ...

    CFGAW: int = ...
    """(arg: object, /) -> int"""

    CFGDW: int = ...
    """(arg: object, /) -> int"""

    REGW: int = ...
    """(arg: object, /) -> int"""

    N_CTL: int = ...
    """(arg: object, /) -> int"""

    N_STS: int = ...
    """(arg: object, /) -> int"""

    SIGN_EXTEND: int = ...
    """(arg: object, /) -> int"""

    INIT_FILE: str = ...
    """(arg: object, /) -> str"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class WbRegs64:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, cyc_i: dspsim._framework.Signal8, stb_i: dspsim._framework.Signal8, we_i: dspsim._framework.Signal8, ack_o: dspsim._framework.Signal8, stall_o: dspsim._framework.Signal8, addr_i: dspsim._framework.Signal32, data_i: dspsim._framework.Signal32, data_o: dspsim._framework.Signal32, ctl_regs: Sequence[dspsim._framework.Signal32], sts_regs: Sequence[dspsim._framework.Signal32]) -> None: ...

    CFGAW: int = ...
    """(arg: object, /) -> int"""

    CFGDW: int = ...
    """(arg: object, /) -> int"""

    REGW: int = ...
    """(arg: object, /) -> int"""

    N_CTL: int = ...
    """(arg: object, /) -> int"""

    N_STS: int = ...
    """(arg: object, /) -> int"""

    SIGN_EXTEND: int = ...
    """(arg: object, /) -> int"""

    INIT_FILE: str = ...
    """(arg: object, /) -> str"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class combine2:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_atdata: dspsim._framework.Signal32, s_axis_atvalid: dspsim._framework.Signal8, s_axis_atready: dspsim._framework.Signal8, s_axis_btdata: dspsim._framework.Signal32, s_axis_btvalid: dspsim._framework.Signal8, s_axis_btready: dspsim._framework.Signal8, m_axis_atdata: dspsim._framework.Signal32, m_axis_btdata: dspsim._framework.Signal32, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8) -> None: ...

    ADW: int = ...
    """(arg: object, /) -> int"""

    BDW: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

def global_context() -> dspsim._framework.ContextFactory: ...

class iir_core:
    def __init__(self, clk: dspsim._framework.Signal8, rst: dspsim._framework.Signal8, s_axis_tdata: dspsim._framework.Signal32, s_axis_tvalid: dspsim._framework.Signal8, s_axis_tready: dspsim._framework.Signal8, m_axis_tdata: dspsim._framework.Signal32, m_axis_tvalid: dspsim._framework.Signal8, m_axis_tready: dspsim._framework.Signal8, coefs: Sequence[dspsim._framework.Signal32]) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    COEFW: int = ...
    """(arg: object, /) -> int"""

    COEFQ: int = ...
    """(arg: object, /) -> int"""

    ORDER: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

def link_context(global_context: dspsim._framework.ContextFactory) -> None: ...

class macc_core:
    def __init__(self, clk: dspsim._framework.Signal8, ce: dspsim._framework.Signal8, sload: dspsim._framework.Signal8, a: dspsim._framework.Signal32, b: dspsim._framework.Signal32, accum_o: dspsim._framework.Signal64) -> None: ...

    ADW: int = ...
    """(arg: object, /) -> int"""

    BDW: int = ...
    """(arg: object, /) -> int"""

    ODW: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...

class priority_encoder:
    def __init__(self, d: dspsim._framework.Signal8, q: dspsim._framework.Signal8, id: dspsim._framework.Signal8, valid: dspsim._framework.Signal8) -> None: ...

    N: int = ...
    """(arg: object, /) -> int"""

    LSB_PRIORITY: int = ...
    """(arg: object, /) -> int"""

    IW: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str | os.PathLike, levels: int = 99, options: int = 0) -> None: ...
