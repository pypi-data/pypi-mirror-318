module PriorityEncoder #(
    parameter N = 4,
    parameter LSB_HIGH_PRIORITY = 0,
    localparam QSIZE = $clog2(N)
) (
    input  logic [N-1:0] d,
    output logic valid_o,
    output logic [QSIZE-1:0] q,
    output logic [N-1:0] mask

);

parameter LEVELS = N > 2 ? $clog2(N) : 1;
parameter W = 2**LEVELS;

// pad input to even power of two
logic [W-1:0] input_padded = {{W-N{1'b0}}, d};

/* verilator lint_off UNOPTFLAT */
logic [W/2-1:0] stage_valid[LEVELS-1:0];
logic [W/2-1:0] stage_enc[LEVELS-1:0];
/* verilator lint_on UNOPTFLAT */

assign valid_o = stage_valid[LEVELS-1][0];
assign q = valid_o ? stage_enc[LEVELS-1][QSIZE-1:0] : 0;

logic [N-1:0] mask_rev;
assign mask_rev = valid_o ? 1 << q : 0;
generate
    genvar x;
    for (x = 0; x < N; x+=1) begin
        // assign mask[x] = mask_rev[N-x-1];
        assign mask[x] = mask_rev[x];
    end
endgenerate
generate
    genvar l, n;

    // process input bits; generate valid bit and encoded bit for each pair
    for (n = 0; n < W/2; n = n + 1) begin : loop_in
        assign stage_valid[0][n] = |input_padded[n*2+1:n*2];
        // // bit 0 is lowest priority
        // assign stage_enc[0][n] = input_padded[n*2+1];
        if (LSB_HIGH_PRIORITY) begin : lsb_high_priority
            // bit 0 is highest priority
            assign stage_enc[0][n] = !input_padded[n*2+0];
        end else begin : msb_high_priority
            // bit 0 is lowest priority
            assign stage_enc[0][n] = input_padded[n*2+1];
        end
    end

    // compress down to single valid bit and encoded bus
    for (l = 1; l < LEVELS; l = l + 1) begin : loop_levels
        for (n = 0; n < W/(2*2**l); n = n + 1) begin : loop_compress
            assign stage_valid[l][n] = |stage_valid[l-1][n*2+1:n*2];
            // // bit 0 is lowest priority
            // assign stage_enc[l][(n+1)*(l+1)-1:n*(l+1)] = stage_valid[l-1][n*2+1] ? {1'b1, stage_enc[l-1][(n*2+2)*l-1:(n*2+1)*l]} : {1'b0, stage_enc[l-1][(n*2+1)*l-1:(n*2+0)*l]};
            if (LSB_HIGH_PRIORITY) begin : lsb_high_priority
                // bit 0 is highest priority
                assign stage_enc[l][(n+1)*(l+1)-1:n*(l+1)] = stage_valid[l-1][n*2+0] ? {1'b0, stage_enc[l-1][(n*2+1)*l-1:(n*2+0)*l]} : {1'b1, stage_enc[l-1][(n*2+2)*l-1:(n*2+1)*l]};
            end else begin : msb_high_priority
                // bit 0 is lowest priority
                assign stage_enc[l][(n+1)*(l+1)-1:n*(l+1)] = stage_valid[l-1][n*2+1] ? {1'b1, stage_enc[l-1][(n*2+2)*l-1:(n*2+1)*l]} : {1'b0, stage_enc[l-1][(n*2+1)*l-1:(n*2+0)*l]};
            end
        end
    end
endgenerate


endmodule
