Metadata-Version: 2.1
Name: audiocat_clark
Version: 0.0.11
Summary: Encrypted audio tunnel for secure chat, file transfer and remote shell on Linux.
Home-page: https://github.com/ClarkFieseln/audiocat
Author: Clark Fieseln
Author-email: 
License: MIT
Project-URL: Source, https://github.com/ClarkFieseln/audiocat
Keywords: chat,messenger,remote shell,file transfer,modem,audio,cryptography,encryption,security,cybersecurity,linux
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Intended Audience :: End Users/Desktop
Classifier: Intended Audience :: Developers
Classifier: Operating System :: POSIX :: Linux
Classifier: Topic :: Security
Description-Content-Type: text/markdown
License-File: LICENSE

![plot](./audiocat_clark/audiocat.png)

# audiocat
Audiocat is a command-line utility for Linux that reads and writes encrypted data across peer-to-peer or broadcast audio connections, using [minimodem](https://github.com/kamalmostafa/minimodem "minimodem") and [gpg](https://github.com/gpg/gnupg "gpg").

It is a powerful tool that can be combined with any audio infrastructure (like PSTN, cellular network, internet, radio, walkie-talkies) to provide a secure communication channel through an audio tunnel.

The audio interfaces behave like data-diodes, each allowing unidirectional data transmission only, thus preventing data-leaks and malware-injection.

This enables an "enhanced"-end-to-end encryption (E-E2EE) which notably increases security and privacy, especially when the end devices are completely offline (air-gapped-system), thus providing an effective barrier against "legal or illegal" client-side-scanning!

See also <https://www.codeproject.com/Articles/5295970/Audio-Chat-for-Quite-Good-Privacy-AC4QGP>


## Installation
```sh
  git clone https://github.com/ClarkFieseln/audiocat.git
```
   or with pip:
```
  pip install audiocat-clark
```
      # now the command audiocat is available for use, check installation path with:
```
  pip show audiocat-clark
```
      # if required, change to that 'Location', e.g.:
```
  cd /home/<user>/.pyenv/versions/3.10.14/lib/python3.10/site-packages/audiocat_clark
```
  dependencies:
```
  sudo apt update
  sudo apt install minimodem
  sudo apt install gpg
```

## How to use
### Chat/Messenger

```sh
  ./audiocat -c
  (audiocat -c)
```
enter and confirm password

On the other device a chat or a remote shell can be started.

### Remote Shell

```sh
  ./audiocat -s
  (audiocat -s)
```
then enter and confirm password

On the other device a chat shall be started to command the remote shell.

Note that this is technically a "reverse shell" which gives access to your system!

### File Transfer

```sh
  ./audiocat -f
  (audiocat -f)
```
enter and confirm password

On the other device a file transfer shall be started.

### Probe
(to check connectivity and adjust volumes if required)

```sh
  ./audiocat -p
  (audiocat -p)
```
Configuration settings can be adapted in folder cfg.

For a detailed documentation go [here](https://github.com/ClarkFieseln/audiocat/blob/main/doc/documentation.md).

## Configuration
Adapt the configuration as required editing the files in the cfg folder.

The most important settings are:

* baud
* keep_alive_time_sec
* retransmission_timeout_sec
* split_tx_lines
* volume_microphone
* volume_speaker_left
* volume_speaker_right

For more information check the [documentation](https://github.com/ClarkFieseln/audiocat/blob/main/doc/documentation.md).

## Features
on top of the audio modem provided by minimodem and encryption provided by GPG, audiocat offers a reliable transport layer and many other features:

- modes: chat, remote-shell, file transfer (future: sniffer)

- full-duplex communication

- retransmit messages automatically after communication errors

- split big messages into smaller data chunks in order to increase the probability of reception, thus reducing retransmissions

- [keepalive] messages
  
- redundant transmission of "data-messages"
   
- composition of piped commands hidden to the user

- tmp folder located in a configurable path beneath $HOME, independent of the current path.

- probe, to check volume on receiver and adjust manually if needed

  (very high and very low volumes may produce signal distortions)
  
- "braodcast" transmissions also possible, e.g. when ACKs are deactivated

   use-case: walkie-talkie, Radio station, ...
   
- several configuration options: preamble, trailer, delays, cipher algorithm, confidence, log to file, verbose, etc.

## Possible Abuses
please don't do the following if you are not allowed (it might be illegal!):

- exfiltrate data over the air or cable to a nearby or remote computer

- remote control over the air or cable from a nearby or remote computer

- exfiltrate data from a computer evading classical auditing

  (be aware that if you do this on your employer's computer you might be infringing the law!)
  
- use the tool as a "side-channel" for covert communication e.g. to spread or inject malware,

  even worse when combined with steganography (e.g. low volumes, data hidden in noise)
  
## Typical Configuration

![plot](./img/figure2.jpg)

A: offline PC (Alice)

D: offline PC (Bob)

B, C: smartphone

diodes: audio connections (source/speaker -> sink/microphone)

## Demo - Communication over Walkie Talkies

![plot](./screenshots/20241231_140418.jpg)

## Split Configuration

![plot](./img/figure3.jpg)

A: offline PC (Alice)

D: offline PC (Bob)

B1, B2, C1, C2: waklie-talkie

## PyPi Project

https://pypi.org/project/audiocat-clark

## Documentation

https://github.com/ClarkFieseln/audiocat/blob/main/doc/documentation.md

## Screenshots

https://github.com/ClarkFieseln/audiocat/tree/main/screenshots

## Videos

https://www.youtube.com/playlist?list=PLX24fhcibpHUx7ej_Tp4neobJUqOkqliN

## License

(c) 2025 Clark Fieseln

This repository is licensed under the MIT license. See LICENSE for details.
