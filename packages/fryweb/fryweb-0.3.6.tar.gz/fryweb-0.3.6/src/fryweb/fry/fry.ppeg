
# top level fry script
fry_script = fry_script_item*

# fry script in html element definition
inner_fry_script = inner_fry_script_item*

fry_script_item = py_comment / triple_single_quote / triple_double_quote / py_simple_quote / fry_component / fry_element / less_than_char / no_component_d_char / py_normal_code

inner_fry_script_item = py_comment / inner_fry_brace / triple_single_quote / triple_double_quote / py_simple_quote / fry_element / less_than_char / inner_py_normal_code

py_comment = ~r"#[^\r\n]*"

inner_fry_brace = '{' inner_fry_script '}'

fry_embed = '{' inner_fry_script '}'

triple_single_quote = ~r"'''(\\.|[^'\\]|'(?!''))*'''"

triple_double_quote = ~r'"""(\\.|[^"\\]|"(?!""))*"""'

single_quote = ~r"'(\\.|[^'\\])*'"

double_quote = ~r'"(\\.|[^"\\])*"'

py_simple_quote = single_quote / double_quote
js_simple_quote = single_quote / double_quote

less_than_char = ~'<(?!template>)'

no_component_d_char = 'd'

py_normal_code = ~"[^#'\"<d]+"

# inner_py_normal_code不能匹配到embedding中的右大括号
inner_py_normal_code = ~"[^#'\"<{}]+"

fry_component = fry_component_header inner_fry_script fry_web_template maybe_web_script

fry_component_header = ~r'\bdef' space fry_component_name  &(maybe_space '(')

fry_component_name = ~r'[A-Z][a-zA-Z0-9_]*'

fry_web_template = '<template>' maybe_space fry_root_element maybe_space '</template>'

# 2024.2.22: <del>所有元素要么是自闭合，要么是标签成对，不支持不自闭合的空元素，这点和html规范不同</del>
# 2024.2.22: 要尽量和html规范保持一致，不要增加大家的学习成本。所以支持不自闭合的空元素：
# https://html.spec.whatwg.org/#void-elements
fry_root_element = fry_fragment / fry_self_closing_element / fry_void_element / fry_paired_element
fry_element = fry_fragment / fry_self_closing_element / fry_void_element / fry_paired_element

fry_fragment = '<>' fry_children '</>'

fry_self_closing_element = '<' fry_element_name fry_attributes maybe_space '/>'

fry_void_element = '<' fry_void_element_name fry_attributes maybe_space '>'

fry_paired_element = fry_start_tag fry_children fry_end_tag

fry_start_tag = '<' fry_element_name fry_attributes maybe_space '>'

# https://html.spec.whatwg.org/#end-tags
fry_end_tag = '</' fry_element_name maybe_space '>'

fry_element_name = !"script" !"template" ~r'[\w.-]+'

fry_void_element_name = 'area' / 'base' / 'br' / 'col' / 'embed' / 'hr' / 'img' / 'input' / 'link' / 'meta' / 'source' / 'track' / 'wbr'

space = ~r'\s+'

maybe_space = ~r'\s*'

fry_attributes = fry_spaced_attribute*

# space --> maybe_space，语法不要那么严格，spread_attribute和前面的属性值连起来时
# 不要报错，给个warning就好了。
fry_spaced_attribute = maybe_space fry_attribute

# 去掉对client_embed_attribute的支持，event_attribute是kv_attribute的一种
#fry_attribute = fry_embed_spread_attribute / fry_client_embed_attribute / fry_event_attribute / fry_kv_attribute / fry_novalue_attribute
fry_attribute = same_name_attribute / fry_embed_spread_attribute / fry_kv_attribute / fry_novalue_attribute

same_name_attribute = '{' maybe_space py_identifier maybe_space '}'

py_identifier = ~r"[a-zA-Z][a-zA-Z0-9_]*"

fry_embed_spread_attribute = '{' maybe_space ~'[*]{1,2}' maybe_space inner_fry_script '}'  #maybe_space maybe_css_literal

#fry_client_embed_attribute = client_embed_value maybe_space maybe_css_literal

#fry_event_attribute = '@' identifier maybe_space '=' maybe_space client_embed

fry_kv_attribute = fry_attribute_name maybe_space '=' maybe_space fry_attribute_value

fry_novalue_attribute = fry_attribute_name !(maybe_space '=')

# 属性名中可以有“/”，用以支持无值属性方式的CSS，这一点不符合[html规范]( https://html.spec.whatwg.org/#attributes-2)
# 属性名中可以有“,”，用以支持calc
# 2024.11.26属性名中可以有“!”，用以支持important modifier(!important)
# 缩小属性名的范围，支持css utility即可
#fry_attribute_name = ~r"([^\s\"'>/=]|/(?!>))+"
fry_attribute_name = ~r"([a-zA-Z0-9!@#%$:.,_-]|/(?!>))+"

# https://html.spec.whatwg.org/#attributes-2  with extension of fry, and do not support unquoted attribute value
# single_f_string: 单引号f-string
# double_f_string: 双引号f-string
# joint_embed: [python f-string](js嵌入属性值)
# fry_embed: {python嵌入属性值}
# js_embed: (js嵌入属性值)
# --fry_element: html基础元素或组件元素 TODO 是否要去掉对元素属性值的支持？
# 2023.10.27:
# 属性值去掉对fry_element的支持，不再完全跟随jsx，属性值支持fry_element后，html看起来很复杂。
# 要支持将元素作为属性值的话，可以将fry_element赋值给一个python变量，使用fry_embed属性值
fry_attribute_value = single_f_string / double_f_string / joint_embed / fry_embed / js_embed 

#fry_attr_value_embed = embed maybe_space maybe_client_embed maybe_space maybe_css_literal

#fry_attr_value_client_embed = client_embed_value maybe_space maybe_css_literal

#fry_css_literal = ':' maybe_space fry_simple_quote

#maybe_css_literal = fry_css_literal?

# 不支持没有引号的属性值
#fry_unquoted_attribute_value = ~"[^\\s\"'=<>{}`]+"

fry_children = fry_child*

# 将<script>从root_element内部挪到root_element之后
#fry_child = embed_value / client_embed_value / web_component_script / html_comment / fry_element / fry_text / no_embed_char
fry_child = joint_html_embed / joint_embed / fry_embed / html_comment / fry_element / fry_text / no_embed_char

joint_html_embed = '!' bracket_f_string maybe_space js_embed

joint_embed = bracket_f_string maybe_space js_embed

bracket_f_string = '[' bracket_f_string_body ']'

bracket_f_string_body = bracket_f_string_item*

bracket_f_string_item = bracket_simple_f_string / '{{' / '}}' / fry_embed

bracket_simple_f_string = ~r"(\\.|[^\]{}\\])+"

single_f_string = "'" single_f_string_body "'"

single_f_string_body = single_f_string_item*

single_f_string_item = single_simple_f_string / '{{' / '}}' / fry_embed

single_simple_f_string = ~r"(\\.|[^'{}\\])+"

double_f_string = '"' double_f_string_body '"'

double_f_string_body = double_f_string_item*

double_f_string_item = double_simple_f_string / '{{' / '}}' / fry_embed

double_simple_f_string = ~r'(\\.|[^"{}\\])+'

# 多个空格缩减为1个，丢弃只有空格的字符串，单双引号是正常字符
fry_text = ~r"[^<>{}[\]!]+"

no_embed_char = ~r"[{}[\]!]"

maybe_web_script =  web_script?

web_script = maybe_space '<script' fry_attributes maybe_space '>' js_script "</script>"
#web_component_script = '<script' fry_attributes maybe_space '>' js_script "</script>"

html_comment = '<!--' ~'(-(?!->)|[^-])*' '-->'

js_script = js_script_item*

# 2024.11.15: 现在不论服务端的渲染还是客户端的水合，都是由外而内。
#             不过由于有更好的全局状态this.g，还是不需要jsop。
# 2023.11.24: 根据服务端由外而内，客户端由内而外的设计，不再需要jsop
# js_embed = jsop_embed / local_js_embed
# 
# # 本组件内js嵌入值
# local_js_embed = '(' js_script ')'
# 
# # JS Over Py embed，是父组件传过来的js嵌入值
# jsop_embed = '({' inner_fry_script '})'
js_embed = '(' js_script ')'

js_parenthesis = '(' js_script ')'

# 为了处理template string中内嵌的js代码，需要加上js_brace
js_brace = '{' js_script '}'

# 2024.11.9: 去掉对export default的支持，直接使用this.prop1 = prop1
#js_script_item = js_single_line_comment / js_multi_line_comment / js_regexp / js_simple_quote / js_template_simple / js_template_normal / js_parenthesis / js_brace / js_static_import / js_default_export / js_normal_code / no_comment_slash_char / no_script_less_than_char / no_import_i_char / no_export_e_char
js_script_item = js_single_line_comment / js_multi_line_comment / js_regexp / js_simple_quote / js_template_simple / js_template_normal / js_parenthesis / js_brace / js_static_import / js_normal_code / no_comment_slash_char / no_script_less_than_char / no_import_i_char

js_single_line_comment = ~r"//[^\r\n]*"

js_multi_line_comment = '/*' ~"[*](?!/)|[^*]*" '*/'

js_regexp = ~r"/([^\\/]|\\.)+/[dgimsuy]*(?=\s*([.;,)\]}]|$))"

js_template_simple = ~r"`(\\.|[^`$\\])*`"

js_template_normal = js_template_head js_script js_template_middle_scripts js_template_tail

js_template_head = ~r"`(\\.|[^`$\\])*[$][{]"

js_template_middle_scripts = js_template_middle_script*

js_template_middle_script = js_template_middle js_script

js_template_middle = ~r"[}](\\.|[^`$\\])*[$][{]"

js_template_tail = ~r"[}](\\.|[^`$\\])*`"

js_static_import = js_simple_static_import / js_normal_static_import

js_simple_static_import = ~r'\bimport\b' maybe_space js_simple_quote ~r"[ \t]*" ~r"[;\r\n]*"

js_normal_static_import = ~r'\bimport\b' maybe_space js_import_identifiers maybe_space ~r'\bfrom\b' maybe_space js_simple_quote ~r"[ \t]*" ~r"[;\r\n]*"

js_import_identifiers = js_import_identifier js_other_import_identifiers

js_other_import_identifiers = js_other_import_identifier*

js_other_import_identifier = maybe_space ',' maybe_space js_import_identifier

js_import_identifier = js_identifier / js_namespace_import_identifier / js_named_import_identifiers

js_identifier = ~r"[a-zA-Z][a-zA-Z0-9_]*"

js_namespace_import_identifier = '*' maybe_space 'as' space js_identifier

js_named_import_identifiers = '{' maybe_space js_named_import_identifier js_other_named_import_identifiers maybe_space '}'

js_other_named_import_identifiers = js_other_named_import_identifier*

js_other_named_import_identifier = maybe_space ',' maybe_space js_named_import_identifier

js_named_import_identifier = js_identifier_with_alias / js_identifier

js_identifier_with_alias = js_identifier space 'as' space js_identifier

# 2024.11.9: 去掉对export default的支持，直接使用this.prop1 = prop1
#js_default_export = ~r'\bexport' space ~r'default\b' 

# /: js中注释的开头字符
# ': js中字符串开头字符
# ": js中字符串开头字符
# `: js中模板字符串开头字符
# <: </script>开头字符
# (: 嵌入js开头字符
# ): 嵌入js结束字符
# {: js模板字符串中嵌入js代码开始字符
# }: js模板字符串中嵌入js代码结束字符
# i: js中import语句开头字符
# ~~e: js中export语句开头字符~~
#js_normal_code = ~"[^/'\"`<(){}ie]+"
js_normal_code = ~"[^/'\"`<(){}i]+"

no_script_less_than_char = ~"<(?!/script>)"

no_comment_slash_char = ~'/(?![/*])'

no_import_i_char = 'i'

# 2024.11.9: 去掉对export default的支持，直接使用this.prop1 = prop1
#no_export_e_char = 'e'
