# Generated from D:/code/python0/py0/Py0.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,177,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,5,0,40,8,
        0,10,0,12,0,43,9,0,1,0,1,0,3,0,47,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,
        5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,96,8,8,1,9,1,9,1,9,1,10,1,
        10,5,10,103,8,10,10,10,12,10,106,9,10,1,11,4,11,109,8,11,11,11,12,
        11,110,1,12,1,12,5,12,115,8,12,10,12,12,12,118,9,12,1,12,1,12,1,
        12,5,12,123,8,12,10,12,12,12,126,9,12,1,12,3,12,129,8,12,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,153,8,13,1,14,1,14,1,
        15,1,15,5,15,159,8,15,10,15,12,15,162,9,15,1,15,1,15,1,16,4,16,167,
        8,16,11,16,12,16,168,1,17,4,17,172,8,17,11,17,12,17,173,1,17,1,17,
        0,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,1,0,10,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,10,10,13,13,34,34,3,0,
        10,10,13,13,39,39,4,0,42,43,45,45,47,47,61,61,2,0,60,60,62,62,8,
        0,40,41,44,44,46,46,58,59,91,91,93,93,123,123,125,125,2,0,10,10,
        13,13,2,0,9,9,32,32,198,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,1,37,
        1,0,0,0,3,48,1,0,0,0,5,57,1,0,0,0,7,60,1,0,0,0,9,65,1,0,0,0,11,69,
        1,0,0,0,13,75,1,0,0,0,15,82,1,0,0,0,17,95,1,0,0,0,19,97,1,0,0,0,
        21,100,1,0,0,0,23,108,1,0,0,0,25,128,1,0,0,0,27,152,1,0,0,0,29,154,
        1,0,0,0,31,156,1,0,0,0,33,166,1,0,0,0,35,171,1,0,0,0,37,41,3,15,
        7,0,38,40,3,35,17,0,39,38,1,0,0,0,40,43,1,0,0,0,41,39,1,0,0,0,41,
        42,1,0,0,0,42,46,1,0,0,0,43,41,1,0,0,0,44,47,3,33,16,0,45,47,5,0,
        0,1,46,44,1,0,0,0,46,45,1,0,0,0,47,2,1,0,0,0,48,49,5,102,0,0,49,
        50,5,117,0,0,50,51,5,110,0,0,51,52,5,99,0,0,52,53,5,116,0,0,53,54,
        5,105,0,0,54,55,5,111,0,0,55,56,5,110,0,0,56,4,1,0,0,0,57,58,5,105,
        0,0,58,59,5,102,0,0,59,6,1,0,0,0,60,61,5,101,0,0,61,62,5,108,0,0,
        62,63,5,115,0,0,63,64,5,101,0,0,64,8,1,0,0,0,65,66,5,102,0,0,66,
        67,5,111,0,0,67,68,5,114,0,0,68,10,1,0,0,0,69,70,5,119,0,0,70,71,
        5,104,0,0,71,72,5,105,0,0,72,73,5,108,0,0,73,74,5,101,0,0,74,12,
        1,0,0,0,75,76,5,114,0,0,76,77,5,101,0,0,77,78,5,112,0,0,78,79,5,
        101,0,0,79,80,5,97,0,0,80,81,5,116,0,0,81,14,1,0,0,0,82,83,5,101,
        0,0,83,84,5,110,0,0,84,85,5,100,0,0,85,16,1,0,0,0,86,87,5,116,0,
        0,87,88,5,114,0,0,88,89,5,117,0,0,89,96,5,101,0,0,90,91,5,102,0,
        0,91,92,5,97,0,0,92,93,5,108,0,0,93,94,5,115,0,0,94,96,5,101,0,0,
        95,86,1,0,0,0,95,90,1,0,0,0,96,18,1,0,0,0,97,98,5,61,0,0,98,99,5,
        62,0,0,99,20,1,0,0,0,100,104,7,0,0,0,101,103,7,1,0,0,102,101,1,0,
        0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,22,1,0,0,
        0,106,104,1,0,0,0,107,109,7,2,0,0,108,107,1,0,0,0,109,110,1,0,0,
        0,110,108,1,0,0,0,110,111,1,0,0,0,111,24,1,0,0,0,112,116,5,34,0,
        0,113,115,8,3,0,0,114,113,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,
        0,116,117,1,0,0,0,117,119,1,0,0,0,118,116,1,0,0,0,119,129,5,34,0,
        0,120,124,5,39,0,0,121,123,8,4,0,0,122,121,1,0,0,0,123,126,1,0,0,
        0,124,122,1,0,0,0,124,125,1,0,0,0,125,127,1,0,0,0,126,124,1,0,0,
        0,127,129,5,39,0,0,128,112,1,0,0,0,128,120,1,0,0,0,129,26,1,0,0,
        0,130,153,7,5,0,0,131,132,5,61,0,0,132,153,5,61,0,0,133,134,5,33,
        0,0,134,153,5,61,0,0,135,136,5,60,0,0,136,153,5,61,0,0,137,138,5,
        62,0,0,138,153,5,61,0,0,139,153,7,6,0,0,140,141,5,43,0,0,141,153,
        5,61,0,0,142,143,5,45,0,0,143,153,5,61,0,0,144,145,5,42,0,0,145,
        153,5,61,0,0,146,147,5,47,0,0,147,153,5,61,0,0,148,149,5,38,0,0,
        149,153,5,38,0,0,150,151,5,124,0,0,151,153,5,124,0,0,152,130,1,0,
        0,0,152,131,1,0,0,0,152,133,1,0,0,0,152,135,1,0,0,0,152,137,1,0,
        0,0,152,139,1,0,0,0,152,140,1,0,0,0,152,142,1,0,0,0,152,144,1,0,
        0,0,152,146,1,0,0,0,152,148,1,0,0,0,152,150,1,0,0,0,153,28,1,0,0,
        0,154,155,7,7,0,0,155,30,1,0,0,0,156,160,5,35,0,0,157,159,8,8,0,
        0,158,157,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,
        0,161,163,1,0,0,0,162,160,1,0,0,0,163,164,6,15,0,0,164,32,1,0,0,
        0,165,167,7,8,0,0,166,165,1,0,0,0,167,168,1,0,0,0,168,166,1,0,0,
        0,168,169,1,0,0,0,169,34,1,0,0,0,170,172,7,9,0,0,171,170,1,0,0,0,
        172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,175,1,0,0,0,
        175,176,6,17,0,0,176,36,1,0,0,0,13,0,41,46,95,104,110,116,124,128,
        152,160,168,173,1,6,0,0
    ]

class Py0Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    END_LINE = 1
    FUNCTION = 2
    IF = 3
    ELSE = 4
    FOR = 5
    WHILE = 6
    REPEAT = 7
    END = 8
    BOOLEAN = 9
    ARROW = 10
    IDENTIFIER = 11
    NUMBER = 12
    STRING = 13
    OPERATOR = 14
    SYMBOL = 15
    COMMENT = 16
    NL = 17
    WS = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'function'", "'if'", "'else'", "'for'", "'while'", "'repeat'", 
            "'end'", "'=>'" ]

    symbolicNames = [ "<INVALID>",
            "END_LINE", "FUNCTION", "IF", "ELSE", "FOR", "WHILE", "REPEAT", 
            "END", "BOOLEAN", "ARROW", "IDENTIFIER", "NUMBER", "STRING", 
            "OPERATOR", "SYMBOL", "COMMENT", "NL", "WS" ]

    ruleNames = [ "END_LINE", "FUNCTION", "IF", "ELSE", "FOR", "WHILE", 
                  "REPEAT", "END", "BOOLEAN", "ARROW", "IDENTIFIER", "NUMBER", 
                  "STRING", "OPERATOR", "SYMBOL", "COMMENT", "NL", "WS" ]

    grammarFileName = "Py0.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


