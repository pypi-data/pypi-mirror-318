# SPDX-FileCopyrightText: Copyright Â© 2023 Idiap Research Institute <contact@idiap.ch>
#
# SPDX-License-Identifier: GPL-3.0-or-later

[build-system]
requires = ["hatchling", "versioningit"]
build-backend = "hatchling.build"

[project]
name = "credible"
dynamic = ["version"]
requires-python = ">=3.10"
description = "This library contains implementations of some scikit-learn metrics with confidence intervals"
readme = "README.md"
license = "GPL-3.0-or-later"
authors = [{ name = "Andre Anjos", email = "andre.anjos@idiap.ch" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = ["numpy", "scipy", "matplotlib", "scikit-learn"]

[project.urls]
documentation = "https://credible.readthedocs.io/en/v1.0.3/"
homepage = "https://pypi.org/project/credible"
repository = "https://gitlab.idiap.ch/medai/software/credible"
changelog = "https://gitlab.idiap.ch/medai/software/credible/-/releases"

[project.optional-dependencies]
qa = ["pre-commit"]
doc = [
  "sphinx",
  "furo",
  "sphinx-autodoc-typehints",
  "auto-intersphinx",
  "sphinx-copybutton",
  "sphinx-inline-tabs",
]
test = ["pytest", "pytest-cov"]

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-arm64"]

[tool.pixi.system-requirements]
linux = "4.19.0"

[tool.pixi.dependencies]
numpy = "*"
scipy = "*"
matplotlib-base = "*"
scikit-learn = "*"

[tool.pixi.feature.self.pypi-dependencies]
credible = { path = ".", editable = true }

[tool.pixi.feature.self.tasks]
info = "mednet info"

[tool.pixi.feature.py311.dependencies]
python = "~=3.11.0"

[tool.pixi.feature.py312.dependencies]
python = "~=3.12.0"

[tool.pixi.feature.qa.dependencies]
pre-commit = "*"
ruff = "*"
reuse = "*"

[tool.pixi.feature.qa.tasks]
qa-install = "pre-commit install"
qa = "pre-commit run --all-files"
qa-ci = "pre-commit run --all-files --show-diff-on-failure --verbose"

[tool.pixi.feature.doc.dependencies]
sphinx = "*"
furo = "*"
sphinx-autodoc-typehints = "*"
auto-intersphinx = "*"
sphinx-copybutton = "*"
sphinx-inline-tabs = "*"

[tool.pixi.feature.doc.tasks]
doc-clean = "rm -rf doc/api && rm -rf html"
doc = "sphinx-build -aEW doc html"
doctest = "sphinx-build -aEb doctest doc html/doctest"

[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"

[tool.pixi.feature.test.tasks]
test = "pytest -sv tests/"
test-ci = "pytest -sv --cov-report 'html:html/coverage' --cov-report 'xml:coverage.xml' --junitxml 'junit-coverage.xml' --ignore '.profile' tests/"

[tool.pixi.feature.build.dependencies]
hatch = "*"
versioningit = "*"
twine = "*"

[tool.pixi.feature.build.tasks]
build = "hatch build"
check = "twine check dist/*"
upload = "twine upload dist/*"

[tool.pixi.feature.dev.dependencies]
pdbpp = "*"
uv = "*"

[tool.pixi.feature.dev.tasks]
uv-update-lock = "uv pip compile -q pyproject.toml --python-platform=linux -o uv.lock"

[tool.pixi.environments]
default = { features = ["qa", "build", "doc", "test", "dev", "py312", "self"] }
qa-ci = { features = ["qa", "py312"] }
build-ci = { features = ["build", "py312"] }
test-ci-alternative = { features = ["test", "py311", "self"] }

[tool.hatch.version]
source = "versioningit"

[tool.versioningit.next-version]
method = "smallest"

[tool.versioningit.format]
# Example formatted version: 1.2.4.dev42+ge174a1f
distance = "{next_version}.dev{distance}+{vcs}{rev}"
# Example formatted version: 1.2.4.dev42+ge174a1f.d20230922
distance-dirty = "{next_version}.dev{distance}+{vcs}{rev}.d{build_date:%Y%m%d}"

[tool.hatch.build.targets.sdist]
include = [
  "src/**/*.py",
  "tests/**/*.py",
  "doc/**/*.rst",
  "doc/**/*.svg",
  "doc/**/*.py",
  "doc/*.txt",
  "LICENSES/*.txt",
]

[tool.hatch.build.targets.wheel]
packages = ["src/credible"]

[tool.ruff]
line-length = 80
target-version = "py310"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
  "A",   # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
  "COM", # https://docs.astral.sh/ruff/rules/#flake8-commas-com
  "D",   # https://docs.astral.sh/ruff/rules/#pydocstyle-d
  "E",   # https://docs.astral.sh/ruff/rules/#error-e
  "F",   # https://docs.astral.sh/ruff/rules/#pyflakes-f
  "G",   # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
  "I",   # https://docs.astral.sh/ruff/rules/#isort-i
  "ISC", # https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
  "LOG", # https://docs.astral.sh/ruff/rules/#flake8-logging-log
  "N",   # https://docs.astral.sh/ruff/rules/#pep8-naming-n
  "NPY", # https://docs.astral.sh/ruff/rules/#numpy-specific-rules-npy
  "PTH", # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
  "Q",   # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
  "RET", # https://docs.astral.sh/ruff/rules/#flake8-return-ret
  "SLF", # https://docs.astral.sh/ruff/rules/#flake8-self-slf
  "T10", # https://docs.astral.sh/ruff/rules/#flake8-debugger-t10
  "T20", # https://docs.astral.sh/ruff/rules/#flake8-print-t20
  "UP",  # https://docs.astral.sh/ruff/rules/#pyupgrade-up
  "W",   # https://docs.astral.sh/ruff/rules/#warning-w
  #"ICN", # https://docs.astral.sh/ruff/rules/#flake8-import-conventions-icn
]
ignore = [
  "COM812", # https://docs.astral.sh/ruff/rules/missing-trailing-comma/
  "D105",   # https://docs.astral.sh/ruff/rules/undocumented-magic-method/
  "D107",   # https://docs.astral.sh/ruff/rules/undocumented-public-init/
  "D203",   # https://docs.astral.sh/ruff/rules/one-blank-line-before-class/
  "D202",   # https://docs.astral.sh/ruff/rules/no-blank-line-after-function/
  "D205",   # https://docs.astral.sh/ruff/rules/blank-line-after-summary/
  "D212",   # https://docs.astral.sh/ruff/rules/multi-line-summary-first-line/
  "D213",   # https://docs.astral.sh/ruff/rules/multi-line-summary-second-line/
  "E302",   # https://docs.astral.sh/ruff/rules/blank-lines-top-level/
  "E501",   # https://docs.astral.sh/ruff/rules/line-too-long/
  "ISC001", # https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D", "E501"]
"doc/conf.py" = ["D"]
"doc/examples/**.py" = ["D100"]

[tool.numpydoc_validation]
checks = [
  "all",  # report on all checks, except the ones below
  "ES01", # Not all functions require extended summaries
  "EX01", # Not all functions require examples
  "GL01", # Expects text to be on the line after the opening quotes but that is in direct opposition of the sphinx recommendations and conflicts with other pre-commit hooks.
  "GL08", # Causes issues if we don't have a docstring at the top of the file. Disabling this might fail to catch actual missing docstrings.
  "PR04", # numpydoc does not currently support PEP484 typehints, which we are using
  "RT03", # Since sphinx is unable to understand type annotations we need to remove some types from 'Returns', which breaks this check.
  "SA01", # We do not use Also sections
  "SS06", # Summary will span multiple lines if too long because of reformatting by other hooks.
]

exclude = [ # don't report on objects that match any of these regex
  '\.__len__$',
  '\.__getitem__$',
  '\.__iter__$',
  '\.__exit__$',
]

override_SS05 = [ # override SS05 to allow docstrings starting with these words
  '^Process ',
  '^Assess ',
  '^Access ',
  '^This',
]

[tool.pytest.ini_options]
addopts = [
  "--cov=credible",
  "--cov-report=term-missing",
  "--import-mode=append",
]
junit_logging = "all"
junit_log_passing_tests = false
