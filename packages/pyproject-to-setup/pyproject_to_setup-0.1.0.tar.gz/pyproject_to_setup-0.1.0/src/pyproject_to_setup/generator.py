from typing import Any

from .models import ConversionConfig, SetupMode


class SetupPyGenerator:
    """Generate setup.py content."""

    def __init__(self, config: ConversionConfig):
        self.config = config

    def generate(self, setup_kwargs: dict[str, Any]) -> str:
        """Generate setup.py content.

        Args:
            setup_kwargs: setup() arguments

        Returns:
            Generated setup.py content
        """
        lines = [
            "import setuptools",
            "",
            "# This file is auto-generated. Do not modify it manually.",
            "# Generated by pyproject-to-setup converter",
            "",
        ]

        if self.config.include_build_isolation:
            lines.extend(
                [
                    "# Build isolation is enabled by default.",
                    "# Use --no-build-isolation flag with pip if needed.",
                    "",
                ]
            )

        if self.config.mode == SetupMode.MINIMAL:
            lines.extend(["setuptools.setup()", ""])
            return "\n".join(lines)

        lines.append("setuptools.setup(")

        # Format arguments
        for key, value in setup_kwargs.items():
            if value is not None:
                formatted_value = self._format_value(value)
                lines.append(f"    {key}={formatted_value},")

        lines.extend([")", ""])
        return "\n".join(lines)

    def _format_value(self, value: Any) -> str:
        """Format Python value as string."""
        if isinstance(value, str):
            if value.startswith("setuptools."):
                return value
            return repr(value)
        return repr(value)
