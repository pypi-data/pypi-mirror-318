[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "backpack-checker"
dynamic = ["version"]
description = "A tool to check the status of your \"backpack\", \"backpack\" being your local setup for a project."
readme = "README.md"
requires-python = ">=3.12"
license = "BSD-3-Clause"
license-files = ["LICENSE.txt"]
keywords = []
authors = [{ name = "PaweÅ‚ Kucmus", email = "pkucmus@gmail.com" }]
classifiers = [
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development",
]
dependencies = [
    "docker>=7.1.0",
    "semver>=3.0.2",
    "textual>=1.0.0",
]

[project.urls]
Issues = "https://github.com/pkucmus/backpack/issues"
Source = "https://github.com/pkucmus/backpack"

[project.optional-dependencies]
dev = [
    "ipdb>=0.13.13",
    "ipython>=8.31.0",
    "mypy>=1.14.0",
    "textual-dev>=1.7.0",
]
types = ["mypy>=1.0.0", "pytest", "types-toml", "pytest-asyncio"]

[project.scripts]
backpack = "backpack_checker.app:run"

[tool.hatch.version]
path = "src/backpack_checker/__about__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/backpack_checker"]

# Environment configuration

## Default environment

[tool.hatch.envs.default]
features = ["dev", "types"]

[tool.hatch.envs.default.scripts]
check = [
    "hatch fmt",
    # "hatch test -a -p",
    # "hatch test --cover",
    "hatch run types:check",
]

## Types environment

[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/backpack_checker}"

## Test environment

[tool.hatch.envs.hatch-test]
extra-dependencies = [
    "ipdb",
    "anyio",
    "pytest-freezer",
    "pytest-print",
    "pytest-cov",
    "httpx",
    "uvloop>=0.21",
]
extra-args = []

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]

# Tool configuration

## Pytest configuration

[tool.pytest.ini_options]

## Types configuration

[tool.mypy]
python_version = "3.12"
files = ["src/**/*.py"]
exclude = "tests/.*"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = false
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true
strict = true
disable_error_code = ["import-untyped"]

## Coverage configuration

[tool.coverage.run]
source_pkgs = ["backpack_checker"]
branch = true
parallel = true

[tool.coverage.paths]
backpack_checker = ["src/backpack_checker"]

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
omit = ["*/__about__.py", "*/__main__.py", "*/cli/__init__.py"]
fail_under = 80

## Ruff configuration

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 80

[tool.ruff.lint]
select = ["E", "F", "G", "I", "N", "Q", "UP", "C90", "T20", "TID"]
unfixable = ["UP007"] # typer does not handle PEP604 annotations

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["backpack_checker"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
