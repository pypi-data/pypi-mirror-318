from cryptography.exceptions import InvalidSignature
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import padding

from license_manager.license_control import LicenseControls
import base64
import hashlib

from cryptography.fernet import Fernet

bios_time = LicenseControls.get_bios_time()
print("BIOS 时间:", bios_time)

custom_key = "my_secret_key"
hashed_key = hashlib.sha256(custom_key.encode()).digest()  # 哈希后得到 32 字节
url_safe_key = base64.urlsafe_b64encode(hashed_key)
key = Fernet(url_safe_key)
key.encrypt(bios_time.encode()).decode()


# 要签名的原始数据，包含时间戳信息

data_bytes = bios_time.encode('utf-8')

# 假设private_key是从之前加载的私钥
private_key = serialization.load_pem_private_key(
            base64.b64decode(bytes.fromhex(
                "4C5330744C5331435255644A54694251556B6C575156524649457446575330744C533074436B314A5355563251556C4351555242546B4A6E6133466F61326C484F586377516B465252555A4251564E44516B745A6432646E55326C425A3056425157394A516B46525245316A5A6974775446525954585A4D5748554B565578536556684C556D34324E48464754486B7A4D6B744C5A564D78516D395559793943596D78544D444A564E5652686548426157465A6A645846456246464D52314E355957356964455231645641785648647A534170776158467357565A43574452344D454D774F47354B536A524E5455747451564E3455486C53645739756245684E543052365A55686A5430394B576B3478556D316D61586332565735595931686A516D565865477879436C704C4D5778685657527456314A4A4D444572616C6C715A69744C62464650516B6F7863475A4F6157745161544E50636D4A77516D39555930786C4B7A527A5A6E5A494D6A526E54454E69565552325A4842695A7A4D4B4E4852584E457332523230785A585A52545664766155566F526B747459556C6E4E456C5A5A3063766347566E59306C43526C564C5369395452325636626C705961315533633231576453393463314E335532737253777061656B315456334E4265556C30633056466245784E536A5234513270565258527052336C714B327470626D5A4F595767764E6B7333656D7445645468335A6D5670616D786162335A335A474E554D314A6B51566C56436C564C4F465679616D4A6B5157644E516B464252554E6E5A305642576A45314F465A614D544A53616A56714C327479646A686854455A3257565A78566B56354D6D64484B33523563446C555643744C5A546C4C4F556B4B57453472526E4D355A3156354E3039735A476C5A6232564555564E54566E4A59516B526D533246764D6A68735A6B59725547394262476F7763465A7A54576846616D3143596A686F635459795455746E6331553055417035636D5A3357586452526A4E7A5457744D644755324E55356C52334255576E4E52557A6C7365455535636C6430526D4E7463473552596938344E5570574E305A695247706D6354684A5455303152576C4E52305268436D52446269746A515464755A6B6C4B626C683162336F7856476B355A6A5A61536D7449576D644B4E574668516B4A4B4D30567162533978626D56305556517A5757316A53474A304F56643165476456513356305748414B566C42795644467051334E4E5446524F616C464B5A5846585633565255464A485754524753485A4E4D6C4E7755454A4E52486C7165573156616B396F613164505330687353306C52617A59356346466C4E546854634170496130565953556C4E644578454F45686F636E42584D56497A614374724F5552576348647459316F725A6C52754D47397963336C5A5156464C516D64525248563155453433545646536458684A51566C555448686F436C51786256464E65557861626B565A52555A6A537A4A6B4C316C35553346554E475A616358497252564A795158677A53544A6C616B38335757356E5745744C5354464C5A79394B5A3364766147466B4F44424A546D674B4E325A5252334A4E546C52325544685154557057556C6C6952444A35516C7045547974735457744C5A544E4759334A57636C5A734E446C6A5232523154454E4D5A564E6B566B3079574531494E48425A4D466436565170764F45746F4D554650576A4A6B64455935596D317252437478556A4E73627A4176555574435A314645596C426D57477851576A5134646E643155544A5A4E79743656457835516A557652793830616E4654636A464C43697443536B457665557073623355326332705A6557646D4F476F314C335257597A637652466B345331704A55334669615868574E57644F4E7939584B3231345A466C464F567042625564754E5452684E5446334F44634B4D47316F4E544A73647A46514B7A645763556C744E5670515A6C5269576A646A57477076575759765932387764325658636D7330566B4E6D515868514F454653646B4E7664445650636E5234636A4E784E56684B55417059593364775A586C505A6C6C5253304A6E5157464852316473556D4E776556465751335A574D5646525748686E646C4A355A5468485A6C566B576C525055485279566C63345A323531616974346132564354576C71436A5270624374426431633463576879645770545955394A56474A33624551314E31464B54304A764D4664484D6D706B5A325577623078715645526C526B466855565572557A5A75556D7471556E6449626E426F4D6E6F4B647A684B536B7059646C42334E46684C4E6C5A424D6D5248547A527964486C42546B4E70646B394961334A4D5355343563484E6C53327331634459784E6B787953306333635555324F455A42623064425133704E4E77704A536A6477543239724D79746E6347704F4E3274694E564E73625770444C7A56316344566C4D5652745A6B5A53636E7072645664714F4468544D324A7464566C3454586C364F47457251564E735647633259326C48436D686E597A4E4D64334E78524749784D5655334C324A365A4868475530394C57454D784F57784E4F5656754E6C52486557704557474932595670585A33525A576D39324F586C766157526C53306477516B6C705245594B646D35716145684662307079656E42745A316C47646C5A7152475A754E44524D626D4A6F616B4677544442496548426D565452465132645A516D303056577051616C6857513152314D574E6C4C3251355954497652416F77536A52584D30706B547A6C4D6432644B4D79396B52336C474D474E6156564649546D4E57614574586455315459573559647A593564305275616E6C43655746574B3155306245394D554867355458526F5A473151436E457957455672593063345956684465466730593164686454497A4C33646C5932706E62464E77526C6879646C64494E3268594F58427864307845543268305646646D525568735930704E5555745852334633636E594B526B4A57516B6C304F58703157476C51576B786F4E316430546B31745A7A3039436930744C533074525535454946425353565A42564555675330565A4C5330744C53304B"
            )),
            password=None,
            backend=default_backend()
        )
# 假设 private_key 和 public_key 已经正确加载
# 用私钥签署数据
signature = private_key.sign(
    data_bytes,
    padding.PSS(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        salt_length=padding.PSS.MAX_LENGTH
    ),
    algorithm=hashes.SHA256()
)

# 输出签名
print("签名:", signature)

# 使用公钥验证签名
try:
    # 假设 signature 是经过加密的数据（使用公钥加密的密文）
    encrypted_data = base64.b64decode(bytes.fromhex(signature))  # 这是加密的数据

    # 使用私钥解密密文
    decrypted_data = private_key.decrypt(
        encrypted_data,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )

    # 解密后的数据
    print("解密后的数据:", decrypted_data.decode())
except InvalidSignature:
    print("签名验证失败")
