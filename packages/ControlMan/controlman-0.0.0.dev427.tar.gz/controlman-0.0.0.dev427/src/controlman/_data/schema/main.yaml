$id: https://controlman.repodynamics.com/schema
$schema: https://json-schema.org/draft/2020-12/schema
title: Control Center Configurations
description: |
  The top-level object (a.k.a., mapping, dictionary)
  containing all control center configurations.
  
  Note that some elements are labeled as read-only;
  these are automatically generated/updated during synchronization
  and do not need to be manually added to the control center configuration files.
type: object
additionalProperties: false
properties:
  name:
    $ref: https://jsonschemata.repodynamics.com/string/oneline
    description: |
      Name of the project.
      
      The name has no restrictions on itself and can be any valid unicode string.
      However, to avoid confusion and make it easier for others to find and identify the project,
      it is recommended to **keep the project name as similar as possible to the
      [repository name](#ccc-repo-name), [distribution name](#ccc-pkg-name)
      and [import name](#ccc-pkg-import-name) of the package,
      and other project components**, which generally have stricter naming requirements.
      Therefore, while these can be separately set to custom values,
      it is recommended to allow the project name to be derived from the repository name (see default),
      and other names from the project name. 
      
      :::{admonition} Usage
      :class: dropdown note toggle-shown
      
      By default, `name` is used to derive names for project's distribution packages and artifacts,
      and to dynamically reference the project name in various places
      like repository and package metadata, license, citation, and other documentation files. 
      :::
    description_default: |
      If not provided (recommended), the default value is the following Python template,
      which generates the project name from the repository name by replacing all hyphens with spaces.
      Note that this is a dynamic template, which means it is evaluated at runtime during synchronization.
      Therefore, changing the GitHub repository name will automatically change the project name as well.
    default: |
      #{{ return get("repo.name").replace("-", " ") }}#
    examples:
      - ${{ repo.name }}$
      - '!ext https://example.com/data.yaml $.jsonpath.to.my.project.name'
      - My Project Name
    description_examples:
      - 'Set to the exact repository name:'
      - 'Set to the value at JSONPath `$.jsonpath.to.my.project.name` of a YAML file at `https://example.com/data.yaml`:'
      - 'Set to a custom static value:'
  title:
    $ref: https://jsonschemata.repodynamics.com/string/oneline
    description: |
      Title or motto of the project.
      
      It must be a one-line string, i.e., no newlines allowed.
      
      :::{admonition} Usage
      :class: dropdown note toggle-shown
      
      By default, `title` is used in various places including
      the project's [citation](#ccc-citation-title),
      [package](#ccc-pkg-description) and [repository](#ccc-repo-description) metadata,
      as well as documentation and website content and metadata. 
      :::
    examples:
      - Effortless Scientific Computation and Data Analysis in Python
      - Streamlined Sequence Analysis and Genomic Data Processing in Python
      - Powerful Tools for Simulating Complex Engineering Systems
      - Your Python Solution for Secure and Scalable Network Management
      - Python Tools for Quantum Mechanics Simulations and Research
  abstract:
    $ref: https://jsonschemata.repodynamics.com/string/nonempty
    description: |
      Short description of the project.
      
      It can contain inline HTML and GitHub Flavored Markdown,
      for example, to make text bold, italic, or to add hyperlinks.

      :::{admonition} Usage
      :class: dropdown note toggle-shown
      
      By default, `abstract` is automatically added to the project's [`citation`](#ccc-citation-abstract) data,
      and displayed on the repository's README file,
      on the homepage of the project's website,
      on the project's PyPI and TestPyPI pages
      (cf. [`pkg.readme`](#ccc-pkg-readme)),
      and on the package's main docstring
      (cf. [`pkg.file.*.docstring`](#ccc-pkg-file--wildcard--docstring)).
      :::
    examples:
      - |
        Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        Aliquam sit amet quam varius, pulvinar erat a, porta urna.
        Integer eu mollis nisl. Pellentesque habitant morbi tristique senectus
        et netus et malesuada fames ac turpis egestas.
        Sed feugiat sem nec felis luctus vehicula.
        Nam sit amet commodo lacus, sed varius sem. Vivamus at urna auctor,
        tristique erat a, iaculis nulla. Integer eget tincidunt justo. 
        Phasellus sit amet massa et leo porta mollis. 
        Ut venenatis magna orci, in pellentesque dui convallis non. 
        Etiam aliquam ante eu iaculis fermentum. 
        Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
        Nullam tristique efficitur lorem, semper sollicitudin mauris aliquet vel. 
        Interdum et malesuada fames ac ante ipsum primis in faucibus. 
        Cras eros risus, viverra ut lectus nec, lobortis rhoncus felis.
  keywords:
    description: |
      Keywords categorizing the project.
      
      :::{admonition} Usage
      :class: dropdown note toggle-shown
      
      By default, keywords are automatically added to project [citation data](#ccc-citation-keywords),
      [GitHub repository](#ccc-repo-topics), and [package metadata](#ccc-pkg-keywords),
      helping to make the project easier to discover on various platforms.
      :::
    examples:
      - - Python
        - Data Analysis
        - Machine Learning
        - Computer-Aided Design
        - Scientific Computing
    $ref: https://jsonschemata.repodynamics.com/array/unique-strings
  highlights:
    description: |
      Key features of the project.
      
      It must be an array of objects, each with `title` and `description` keys.
      
      :::{admonition} Usage
      :class: dropdown note toggle-shown
      
      By default, project highlights are included
      in main README files and on the project's homepage.
      :::
    examples:
      - - title: Easy Installation
          description: |
            Install the package with a single command.
        - title: Powerful Tools
          description: |
            A set of powerful tools for data analysis.
        - title: Scalable
          description: |
            Scalable to large datasets and high-performance computing.
    type: array
    uniqueItems: true
    items:
      title: Highlight
      description: |
        A key feature of the project.
        
        A feature is defined by a `title` and a `description`.
      type: object
      additionalProperties: false
      required: [ title, description ]
      properties:
        title:
          $ref: https://jsonschemata.repodynamics.com/string/oneline
          description: |
            Title of the feature.
            
            It must be a one-line string.
        description:
          $ref: https://jsonschemata.repodynamics.com/string/nonempty
          description: |
            Description of the feature.
            
            It can be any non-empty string, and can contain
            inline HTML and GitHub Flavored Markdown,
            for example, to make text bold, italic, or to add hyperlinks.
  license:
    description: |
      License information of the project.
      
      :::{rubric} SPDX License Expression
      :heading-level: 2
      :::
      Using the [System Package Data Exchange](https://spdx.org/) (SPDX) license standard,
      define the project's license by providing its 
      [SPDX license expression](https://spdx.github.io/spdx-spec/v3.0.1/annexes/spdx-license-expressions/)
      under the [`expression`](#ccc-license-expression) key.
      
      :::{rubric} License Components
      :heading-level: 2
      :::
      If the license expression contains custom components (i.e., those not available in the
      [SPDX License List](https://spdx.org/licenses/) or
      [License Exceptions](https://spdx.org/licenses/exceptions-index.html)),
      these must be manually defined under the [`component`](#ccc-license-component) key.
      All other standard components are automatically retrieved from the SPDX database
      and added to the `component` object under their respective
      [SPDX license ID](https://spdx.dev/learn/handling-license-info/).
      
      :::{rubric} License Customization
      :heading-level: 2
      :::
      The automatically generated license documents can be customized
      via the [`config`](#ccc-license-config) key, with options
      to replace license placeholder values with project metadata
      and control document formatting.
      
      :::{admonition} Usage
      :class: dropdown note toggle-shown
      
      Available data for each component defined in the [license expression](#ccc-license-expression)
      is automatically retrieved from the SPDX database, and customized with project metadata
      according to the [specified configurations](#ccc-license-config).
      License and license header (copyright notice) documents are then generated
      and written to the specified locations.
      The default filepaths follow the [requirements for
      GitHub](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)
      to recognize and display them on the repository.
      
      By default, the license is also incorporated into several other project components: 
      - License files are added to all releases.
      - License identifiers are added to all package metadata.
      - Full license and copyright information are featured on the documentation website.
      - A copyright notice and [SPDX short-form identifier](https://spdx.dev/learn/handling-license-info/) is included in all source files.
      :::
      
      :::{admonition} Open Source Licenses
      :class: dropdown seealso
      
      For more information about open-source licenses, see:
      - [SPDX License List](https://spdx.org/licenses/)
      - [Open Source Initiative](https://opensource.org/license)
      - [Choose a License](https://choosealicense.com/)
      - [SPDX License List Data (JSON)](https://raw.githubusercontent.com/spdx/license-list-data/master/json/licenses.json)
      :::
    description_examples:
      - |
        To define a license using standard components available in the SPDX License List,
        the only required field is `expression`.
        For example, to use the [MIT License](https://spdx.org/licenses/MIT.html):
      - |
        To define a complex license with standard components:
      - |
        To define a simple custom license:
      - |
        To define a complex license wih a custom exception named `My-Exception-1.0`:
      - |
        To customize document output;
        for example, exclude optional sections from the license,
        change the line length to 100 characters,
        center the title, and remove underline from the title:
    examples:
      - expression: MIT
      - expression: MIT AND (LGPL-2.1-or-later OR BSD-3-Clause)
      - expression: LicenseRef-My-License
        component:
          My-License:
            name: My License
            text_plain: |
              This is the content of my custom license.
      - expression: MIT WITH AdditionRef-My-Exception-1.0
        component:
          AdditionRef-My-Exception-1.0:
            name: My Exception
            text_plain: |
              This is the content of my custom exception.
      - expression: MIT
        config:
          text:
            plain:
              optionals: false
              line_length: 100
              title_centered: true
              title_underline: ""
    type: object
    required: [ expression ]
    additionalProperties: false
    properties:
      expression:
        $ref: https://jsonschemata.repodynamics.com/string/nonempty
        description: |
          Project's [SPDX license expression](https://spdx.github.io/spdx-spec/v3.0.1/annexes/spdx-license-expressions/).
        examples:
          - AGPL-3.0-or-later
          - MIT OR GPL-3.0-or-later
          - LGPL-2.1-only OR MIT OR BSD-3-Clause
          - LGPL-2.1-only AND MIT
          - GPL-2.0-or-later WITH Bison-exception-2.2
          - MIT AND (LGPL-2.1-or-later OR BSD-3-Clause)
          - MIT WITH AdditionRef-My-Exception-1.0
        description_examples:
          - |
            To select a single license from the [SPDX License List](https://spdx.org/licenses/),
            simply provide its [SPDX license ID](https://spdx.dev/learn/handling-license-info/).
            Some common SPDX license IDs are:
            - `AGPL-3.0-or-later`: [GNU Affero General Public License v3.0 or later](https://spdx.org/licenses/AGPL-3.0-or-later.html)
            - `GPL-3.0-or-later`: [GNU General Public License v3.0 or later](https://spdx.org/licenses/GPL-3.0-or-later.html)
            - `LGPL-3.0-or-later`: [GNU Lesser General Public License v3.0 or later](https://spdx.org/licenses/LGPL-3.0-or-later.html)
            - `Apache-2.0`: [Apache License 2.0](https://spdx.org/licenses/Apache-2.0.html)
            - `BSL-1.0`: [Boost Software License 1.0](https://spdx.org/licenses/BSL-1.0.html)
            - `MIT`: [MIT License](https://spdx.org/licenses/MIT.html)
            - `BSD-3-Clause`: [BSD 3-Clause "New" or "Revised" License](https://spdx.org/licenses/BSD-3-Clause.html)
            - `BSD-2-Clause`: [BSD 2-Clause "Simplified" License](https://spdx.org/licenses/BSD-2-Clause.html)
            - `MPL-2.0`: [Mozilla Public License 2.0](https://spdx.org/licenses/MPL-2.0.html)
            - `Unlicense`: [The Unlicense](https://spdx.org/licenses/Unlicense.html)
            
            For example, to use the [GNU Affero General Public License v3.0 or later](https://spdx.org/licenses/AGPL-3.0-or-later.html):
          - |
            [Composite licenses](https://spdx.github.io/spdx-spec/v3.0.1/annexes/spdx-license-expressions/#composite-license-expressions)
            can be defined using "OR", "AND", and "WITH" operators with parentheses:
            - `OR`: Allows either of the licenses to be used.
            - `AND`: Requires compliance with both licenses.
            - `WITH`: Defines an [exception](https://spdx.org/licenses/exceptions-index.html) to the license.
            - `(` and `)`: Grouping of expressions.
            
            For example, to allow either the `MIT` or the `GPL-3.0-or-later` license to be used:
          - 'To allow either the `LGPL-2.1-only`, `MIT`, or `BSD-3-Clause` license to be used:'
          - 'To require compliance with both the `LGPL-2.1-only` and `MIT` licenses:'
          - 'To add `Bison-exception-2.2` to the `GPL-2.0-or-later` license:'
          - 'To require compliance with the `MIT` license and either the `LGPL-2.1-or-later` or `BSD-3-Clause` license:'
          - |
            Custom licenses and exceptions can also be defined
            using the `LicenseRef-` and `AdditionRef-` prefixes, respectively.
            For example, to add a custom exception to the `MIT` license
            (note that the custom exception `AdditionRef-My-Exception-1.0`
            must then be defined under [`$.license.component`](#ccc-license-component)):
      component:
        description: |
          Information about each component of the license expression.
          
          These are automatically filled for all SPDX licenses and exceptions.
          For custom licenses and exceptions, you must provide all required data manually.
          Each component is added as a key-value pair, where the key is the component's ID,
          as it appears in the license expression.
        type: object
        patternProperties:
          '^(DocumentRef-[a-zA-Z0-9-.]+:)?(AdditionRef|LicenseRef)-[a-zA-Z0-9.-]+$':
            title: Custom Component
            description: |
              Definition of a custom component of the license expression.
              
              Custom components must at least define a `name` and either `text_xml` or `text_plain`.
            type: object
            required: [ name ]
            anyOf:
              - title: XML Text
                description: The license text is provided in XML format.
                required: [ text_xml ]
              - title: Plain Text
                description: The license text is provided in plain text format.
                required: [ text_plain ]
            allOf:
              - $ref: https://controlman.repodynamics.com/schema/license-component
        additionalProperties:
          title: SPDX Component
          description: |
            Information about an SPDX component of the license expression.
            
            These are automatically retrieved from the SPDX database and
            do not need to be manually defined. However, you can still add additional data
            or customize configurations such as output filepaths here.
          $ref: https://controlman.repodynamics.com/schema/license-component
      config:
        description: |
          Configurations for output license documents.
          
          These are general configurations that apply to all license components.
          They include license customization and formatting options.
        type: object
        default: { }
        properties:
          text:
            description: Configurations for the main file of all license components.
            default: { }
            $ref: https://controlman.repodynamics.com/schema/license-component-config
          header:
            description: |
              Configurations for license header (a.k.a. copyright notice) files.
              
              Note that separate license headers are not included in all licenses.
            default: { }
            $ref: https://controlman.repodynamics.com/schema/license-component-config
  copyright:
    $ref: https://jsonschemata.repodynamics.com/string/oneline
    description: |
      Copyright notice of the project.
      
      It must be a one-line string.
      
      :::{admonition} Usage
      :class: dropdown note toggle-shown
      
      By default, the copyright notice is included in several places,
      such as license texts,
      the [main docstring](#ccc-pkg-file---init---py-docstring) of the package,
      and the [footer](#ccc-theme-footer) of website and documentation files.
      :::
    default: |
      #{{
        from controlman import date
        
        start_year = date.from_internal(get("repo.created_at")).year
        current_year = date.from_now().year
        period = f"{start_year}–{current_year}" if start_year < current_year else current_year
        return f"© {period} {get("team.owner.name.full")}"
      }}#
    description_default: |
      The below default Python template sets `copyright` to
      `© {period} {owner}`, where `{owner}` is the repository owner's name
      and period is calculated as follows:
      - If repository creation year is the same as the current year, 
        the period is set to the current year, e.g., `2024`.
      - Otherwise, the period is set to the repository creation year and the current year, e.g., `2024–2026`.
  language:
    description: |
      Natural language of the project.
      
      It must be defined by an
      [ISO 639-3](https://iso639-3.sil.org/code_tables/639/data) (preferred)
      or [ISO 639-2](https://www.loc.gov/standards/iso639-2/php/code_list.php)
      language code and name.
    type: object
    default:
      code: eng
      name: English
    required: [ code, name ]
    examples:
      - code: eng
        name: English
      - code: deu
        name: German
    properties:
      code:
        # Refs:
        # https://github.com/ISO639
        # https://iso639-3.sil.org/code_tables/download_tables
        description: |
          [ISO 639-3](https://iso639-3.sil.org/code_tables/639/data) (preferred) or
          [ISO 639-2](https://www.loc.gov/standards/iso639-2/php/code_list.php)
          code of the language.
        $ref: https://jsonschemata.repodynamics.com/string/oneline
      name:
        description: |
          [ISO 639-3](https://iso639-3.sil.org/code_tables/639/data) (preferred) or
          [ISO 639-2](https://www.loc.gov/standards/iso639-2/php/code_list.php)
          name of the language.
        $ref: https://jsonschemata.repodynamics.com/string/oneline
  role:
    description: |
      Role definitions for team members.
      
      For each role, add a key-value pair
      where the key is an ID for the role.
      The ID can then be referenced in other configurations,
      such as [team member roles](#ccdef-entity-def-role).
      
      :::{admonition} Usage
      :class: dropdown note toggle-shown
      
      Roles can define tasks (e.g., 
      issue triage, development, pull request review, discussion moderation)
      and file ownership for different parts of the project.    
      Each team member can then be assigned any number of roles,
      facilitating the management of a dynamic governance model.
      :::
    type: object
    additionalProperties:
      title: Role
      description: |
        Definition of a role in the project.
        
        Each role must have a [`title`](#ccc-role---title), [`description`](#ccc-role---description),
        [`abbreviation`](#ccc-role---abbreviation), and [`type`](#ccc-role---type).
        It can optionally include [assignments](#ccc-role---assignment) and
        [file ownership](#ccc-role---ownership) definitions.
      type: object
      additionalProperties: false
      required: [ title, description, abbreviation, type ]
      properties:
        title:
          description: Name of the role.
          $ref: https://jsonschemata.repodynamics.com/string/oneline
          examples:
            - Conceptualization
            - Software Development
            - Management
        description:
          description: A short description of the role.
          $ref: https://jsonschemata.repodynamics.com/string/nonempty
          examples:
            - Formulation and evolution of overarching project goals and aims.
            - Implementation of the software.
            - Project administration and coordination.
        abbreviation:
          description: Abbreviation of the role title.
          type: string
          examples:
            - CNP
            - DEV
            - MAN
        type:
          description: |
            Type of the role.
            
            The role types are based on [DataCite's contributor vocabulary](https://schema.datacite.org/),
            and are identical to
            [Zenodo's contributor types](https://help.zenodo.org/docs/deposit/describe-records/contributors/),
            with the exception that an additional `Author` role is added here.
            
            :::{admonition} Usage
            :class: dropdown note toggle-shown

            Role types are used to define the contribution type of contributors in Zenodo depositions.
            They can also be used to filter team members.
            For example, project authors can be simply extracted
            by selecting members with a role that has the `Author` type.
            :::
          default: ProjectMember
          enum:
            - Author
            - ContactPerson
            - DataCollector
            - DataCurator
            - DataManager
            - Distributor
            - Editor
            - HostingInstitution
            - Producer
            - ProjectLeader
            - ProjectManager
            - ProjectMember
            - RegistrationAgency
            - RegistrationAuthority
            - RelatedPerson
            - Researcher
            - ResearchGroup
            - RightsHolder
            - Supervisor
            - Sponsor
            - WorkPackageLeader
            - Other
        assignment:
          description: |
            Task assignments for the role.
          type: object
          minProperties: 1
          additionalProperties: false
          properties:
            issue:
              description: |
                Issues assigned to the role.
                
                This must be a RegEx pattern matching one or several [issue form IDs](#ccc-issue-forms).
                
                :::{admonition} Usage
                :class: dropdown note toggle-shown
  
                When a new issue is opened,
                the corresponding issue form ID is matched against this RegEx.
                In case of a match, all members with this role are automatically assigned to the issue ticket.
                :::
              type: string
            pull:
              description: |
                Pull requests assigned to the role.
                
                This must be a RegEx pattern matching one or several [issue form IDs](#ccc-issue-forms).

                :::{admonition} Usage
                :class: dropdown note toggle-shown
  
                When a new pull request is opened,
                the corresponding issue form ID is matched against this RegEx.
                In case of a match, all members with this role
                are automatically assigned to the pull request.
                :::
              type: string
            review:
              title: Pull Request Reviews
              description: |
                Pull request reviews assigned to the role.
                
                This must be a RegEx pattern matching one or several [issue form IDs](#ccc-issue-forms).

                :::{admonition} Usage
                :class: dropdown note toggle-shown
  
                When a pull request is marked ready for review,
                the corresponding issue form ID is matched against this RegEx.
                In case of a match, all members with this role
                are automatically assigned to the pull request as reviewers.
                :::
              type: string
            discussion:
              description: |
                Discussion categories assigned to the role.
                
                This must be a RegEx pattern matching one or several
                [discussion category slugs](#ccc-discussion-category).

                :::{admonition} Usage
                :class: dropdown note toggle-shown
  
                When a new discussion is opened,
                the corresponding category slug is matched against this RegEx.
                In case of a match, all members with this role
                are automatically assigned to the discussion.
                :::
              type: string
        ownership:
          description: |
            Ownership of different parts of the project.
          $ref: https://controlman.repodynamics.com/schema/code-owner
  team:
    description: |
      Natural and legal persons involved in the project.
      
      For each person (e.g., copyright holders, authors, maintainers, managers, supervisors),
      add a key-value pair where the key is an ID for the person.
      The ID can then be referenced in other configurations.
      Also, the information of each person can be used directly
      (cf. default value of [`copyright.notice`](#ccc-copyright-notice)).

      :::{admonition} Automatic Data Filling
      :class: important

      For each person, additional information is automatically added
      from web APIs, if available (cf. [Entity Definition](#ccdef-entity-def)).
      Note that the [`owner`](#ccc-team-owner) key is always automatically added.
      :::
    type: object
    properties:
      owner:
        title: Owner
        description: |
          The repository owner on GitHub.
          
          The [`github`](#ccdefs-entity-def-github) key is always automatically
          filled with information from the GitHub API.
          Any other keys that are not provided are also 
          automatically filled, as along as they have a corresponding information
          in the GitHub API (cf. [Entity Definition](#ccdef-entity-def)).
        $ref: https://controlman.repodynamics.com/schema/entity-def
    additionalProperties:
      title: Person
      description: |
        A natural person or entity involved in the project.
        
        For each person, at least either a GitHub account or name must be provided.
      $ref: https://controlman.repodynamics.com/schema/entity-def
      anyOf:
        - title: GitHub Account
          description: |
            The person's GitHub username/ID is provided.
          required: [ github ]
        - title: Name
          description: |
            The person's name it provided.
          required: [ name ]
  citation:
    description: |
      Citation information of the project.
    type: object
    additionalProperties: false
    properties:
      cff:
        title: CFF
        description: |
          Configurations for the
          [`CITATION.cff` file](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files).
          
          These configurations are used to automatically maintain a citation file for the project
          in the [Citation File Format](https://citation-file-format.github.io/) (CFF). 
          They closely follow the
          [CFF v1.2.0 schema](https://github.com/citation-file-format/citation-file-format/blob/main/schema-guide.md)
          (cf. [JSON format](https://citation-file-format.github.io/1.2.0/schema.json)),
          with some simplifications (e.g., `entity` and `person` are merged into a single [`Entity Definition`](#ccdef-entity-def)).
        type: object
        additionalProperties: false
        required: [ order, message, title, authors, type ]
        properties:
          order:
            description: |
              Keys to include in the output `CITATION.cff` file.
              
              Keys are written in the exact order given here.
              Note that any keys not mentioned here will also be dropped from the
              output file, even when the key is defined.
            type: array
            uniqueItems: true
            contains:
              title: Required Keys
              description: |
                Keys that are required in the `CITATION.cff` file and
                thus must also be present in this array.
              enum: [ message, title, authors, type, cff-version ]
            minContains: 5
            items:
              title: Key
              description: |
                A top-level key in the `CITATION.cff` file.
              type: string
              enum:
                - abstract
                - authors
                - cff-version
                - commit
                - contact
                - date-released
                - doi
                - identifiers
                - keywords
                - license
                - license-url
                - message
                - preferred-citation
                - references
                - repository
                - repository-artifact
                - repository-code
                - title
                - type
                - url
                - version
            default:
              - message
              - preferred-citation
              - doi
              - commit
              - version
              - date-released
              - license
              - license-url
              - url
              - repository
              - repository-artifact
              - repository-code
              - identifiers
              - type
              - title
              - authors
              - contact
              - abstract
              - keywords
              - references
              - cff-version
          message:
            $ref: https://jsonschemata.repodynamics.com/string/nonempty
            description: |
              A message to include in the citation file.
              
              On GitHub, this is also displayed when a user clicks on the
              ***Cite this repository*** button.
            examples:
              - If you use this software, please cite both the article from preferred-citation and the software itself.
              - If you use this software, please cite it using the metadata from this file.
              - Please cite this software using these metadata.
              - Please cite this software using the metadata from 'preferred-citation'.
            default: If you use ${{ name }}$, please cite it using this reference.
          title:
            description: |
              Title of the citation.
            default: >-
              #{{
                name = get("name")
                title = get("title")
                return f"{name}: {title}" if title else name
              }}#
            description_default: |
              If the project has defined a [`title`](#ccc-title),
              the citation title is set to `{name}: {title}` (e.g., "My Project: A Python Project"),
              otherwise it is set to [`name`](#ccc-name).
            examples:
              - '${{ name }}$: ${{ title }}$'
              - ${{ name }}$
              - ${{ pkg.name }}$
              - A Custom Title
            $ref: https://jsonschemata.repodynamics.com/string/nonempty
          authors:
            description: |
              Citation authors.
              
              Authors are listed in the exact order given here.
              
              :::{admonition} Usage
              :class: dropdown note
              
              These are automatically displayed on the project's website,
              the front page of the project's PDF documentation,
              and the project's PyPI and TestPyPI pages
              (by being added to package metadata, i.e.,
              the [`project.authors`](https://packaging.python.org/en/latest/specifications/pyproject-toml/#authors-maintainers)
              key of the `pyproject.toml` file).
              :::
            default: |
              #{{
                return [
                  {"id": int_author["id"], "member": True}
                  for int_author in team_members_with_role_types("Author", active_only=True)
                ] + [
                  {"id"}: ext_author["id"], "member": False}
                  for ext_author in changelog.current_public.contributors_with_role_types("Author", member=False)
                ]
              }}#
            $ref: https://controlman.repodynamics.com/schema/entity-ids
            examples:
              - [ owner, some_author_id ]
          contacts:
            title: Contacts
            description: |
              Project's contact persons.
              It is recommended to define the persons in 
              [`$.team`](#ccc-team) and reference them here using templating.
            examples:
              - [ owner, some_author_id ]
            $ref: https://controlman.repodynamics.com/schema/entity-ids
          doi:
            oneOf:
              - $ref: https://jsonschemata.repodynamics.com/id/doi
              - type: "null"
          version:
            oneOf:
              - $ref: https://jsonschemata.repodynamics.com/string/oneline
              - type: "null"
          date_released:
            oneOf:
              - $ref: https://jsonschemata.repodynamics.com/date/yyyy-mm-dd
              - type: "null"
          commit:
            oneOf:
              - $ref: https://jsonschemata.repodynamics.com/string/oneline
              - type: "null"
          abstract:
            title: Abstract
            description: |
              A brief description of the project.
            type: string
            default: >-
              #{{ return get("abstract", "") }}#
            examples:
              - |
                A custom description of the project
                that can span multiple lines.
          keywords:
            title: Keywords
            description: Keywords categorizing the project.
            $ref: https://jsonschemata.repodynamics.com/array/unique-strings
            default: >-
              #{{ return get("keywords", []) }}#
            examples:
              - [ A Custom Keyword, Another Custom Keyword ]
          license:
            title: License
            description: |
              SPDX [license ID](#ccc-license-id) of the project.
            default: |
              #{{
                return [
                  component["id"] for component in get("license.component", {}).values()
                  if component["type"] == "license" and not component["custom"]
                ]
              }}#
            type: array
            uniqueItems: true
            items:
              $ref: https://jsonschemata.repodynamics.com/id/spdx-license
          license_url:
            title: License URL
            description: The URL of the project's license (only required for non-SPDX licenses).
            $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
          repository:
            title: Repository
            description: |
              URLs of the project's repositories.
            type: object
            default: { }
            additionalProperties: false
            properties:
              source:
                title: Source
                description: |
                  URL of the project in a source code repository.
                  This is equivalent to `repository-code` in CFF.
                default: ${{ repo.url.home }}$
                $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
              build:
                title: Build
                description: |
                  URL of the project in a build artifact/binary repository.
                  This is equivalent to `repository-artifact` in CFF.
                $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
              other:
                title: Other
                description: |
                  URL of the project in another type of repository.
                  This is equivalent to `repository` in CFF.
                $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
          url:
            title: URL
            description: URL of the project's landing (home) page.
            default: >-
              #{{ return get("web.url.home") or get("repo.url.home") }}#
            $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
          type:
            title: Type
            description: Type of the work. This can be either `dataset` or `software`.
            type: string
            enum: [ dataset, software ]
            default: software
          identifiers:
            title: Identifiers
            description: |
              List of identifiers for the project.
              These can be any type of identifier, such as DOI, URL, SWH, or any other custom identifier.
            type: array
            uniqueItems: true
            items:
              title: Identifier
              description: An identifier for the project.
              $ref: https://controlman.repodynamics.com/schema/identifier
          preferred_citation:
            title: Preferred Citation
            description: |
              A reference to another work that should be cited
              instead of the software itself.
            $ref: https://controlman.repodynamics.com/schema/reference
          references:
            title: References
            description: |
              Reference(s) to other creative works related to, or used/referenced by, the project.
            type: array
            uniqueItems: true
            items:
              title: Reference
              description: A reference to another work.
              $ref: https://controlman.repodynamics.com/schema/reference
      zenodo:
        description: |
          Metadata for Zenodo depositions.
        type: object
        additionalProperties: false
        required: [ title, description, upload_type, access_right ]
        properties:
          title:
            description: |
              Title of the deposition.
            default: ${{ citation.cff.title }}$
            $ref: https://jsonschemata.repodynamics.com/string/oneline
          creators:
            $ref: https://controlman.repodynamics.com/schema/entity-ids
            description: |
              Core creators/authors of the deposition, ordered by contribution (highest first).
            default: |
              #{{
                return [
                  {"id": int_author["id"], "member": True}
                  for int_author in team_members_with_role_types("Author", active_only=True)
                ] + [
                  {"id": ext_author["id"], "member": False}
                  for ext_author in changelog.current_public.contributors_with_role_types("Author", member=False)
                ]
              }}#
            examples:
              - [ owner, some_author_id ]
          description:
            description: |
              Description of the deposition.
            default: ${{ citation.cff.abstract }}$
            $ref: https://jsonschemata.repodynamics.com/string/nonempty
          upload_type:
            description: |
              Type of the deposition.
            type: string
            enum:
              - dataset
              - image
              - lesson
              - other
              - physicalobject
              - poster
              - presentation
              - publication
              - software
              - video
            default: ${{ citation.cff.type }}$
          access_right:
            description: |
              Access rights for the project:
              * `open`: Open Access
              * `embargoed`: Embargoed Access
              * `restricted`: Restricted Access
              * `closed`: Closed Access
            type: string
            enum: [ open, embargoed, restricted, closed ]
            default: open
          license:
            description: |
              SPDX license ID of the project.
              This is required if `access_right` is `open` or `embargoed`.
              Note that Zenodo only accepts a single license ID.
            $ref: https://jsonschemata.repodynamics.com/id/spdx-license
          access_conditions:
            title: Access Conditions
            description: |
              Conditions for accessing the project.
              This is only required if `access_right` is `restricted`.
            $ref: https://jsonschemata.repodynamics.com/string/nonempty
          embargo_date:
            description: |
              Date when the embargo will be lifted.
              This is only required if `access_right` is `embargoed`.
            $ref: https://jsonschemata.repodynamics.com/date/yyyy-mm-dd
          publication_type:
            description: |
              Type of the publication.
              This is only required if `upload_type` is `publication`.
            type: string
            enum:
              - annotationcollection
              - article
              - book
              - conferencepaper
              - datamanagementplan
              - deliverable
              - milestone
              - other
              - patent
              - preprint
              - proposal
              - report
              - section
              - softwaredocumentation
              - taxonomictreatment
              - technicalnote
              - thesis
              - workingpaper
          image_type:
            description: |
              Type of the image.
              This is only required if `upload_type` is `image`.
            type: string
            enum:
              - diagram
              - drawing
              - figure
              - other
              - photo
              - plot
          keywords:
            description: |
              Free-form keywords for the deposition.
              These are used to help users find the project.
            $ref: https://jsonschemata.repodynamics.com/array/unique-strings
          subjects:
            title: Subjects
            description: |
              Project subjects from a taxonomy or controlled vocabulary.
            examples:
              - - term: Astronomy
                  id: http://id.loc.gov/authorities/subjects/sh85009003
                  scheme: url
            type: array
            uniqueItems: true
            minItems: 1
            items:
              title: Subject
              description: A subject from a taxonomy or controlled vocabulary.
              type: object
              additionalProperties: false
              required: [ term, identifier ]
              properties:
                term:
                  description: Term from a taxonomy or controlled vocabulary.
                  type: string
                  minLength: 1
                  $ref: https://jsonschemata.repodynamics.com/string/nonempty
                identifier:
                  description: ID of the term from a taxonomy or controlled vocabulary.
                  type: string
                  minLength: 1
                  $ref: https://jsonschemata.repodynamics.com/string/nonempty
                scheme:
                  description: Scheme of the term from a taxonomy or controlled vocabulary.
                  type: string
                  minLength: 1
                  $ref: https://jsonschemata.repodynamics.com/string/nonempty
          language:
            default: ${{ language.code }}$
          contributors:
            title: Contributors
            description: |
              Other contributors of the project, ordered by contribution (highest first).

              :::{admonition} Usage
              :class: dropdown note

              These are automatically displayed on the project's website,
              the front page of the project's PDF documentation,
              and the project's PyPI and TestPyPI pages
              (by being added to package metadata, i.e.,
              the [`project.authors`](https://packaging.python.org/en/latest/specifications/pyproject-toml/#authors-maintainers)
              key of the `pyproject.toml` file).
              :::
            $ref: https://controlman.repodynamics.com/schema/entity-ids
            examples:
              - [ owner, some_author_id ]
          related_identifiers:
            title: Related Identifiers
            description: |
              List of related identifiers for the project.
            type: array
            uniqueItems: true
            items:
              title: Related Identifier
              description: An identifier related to the work.
              type: object
              additionalProperties: false
              required: [ identifier, relation ]
              properties:
                identifier:
                  description: |
                    The value of the identifier.
                    Supported identifiers include:
                    DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code,
                    arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs and URLs.
                  examples:
                    - 10.5281/zenodo.1003150
                    - https://example.com
                relation:
                  title: Relation
                  description: |
                    The relation of the identifier to the work.
                  type: string
                  enum:
                    - isCitedBy
                    - cites
                    - isSupplementTo
                    - isSupplementedBy
                    - isContinuedBy
                    - continues
                    - isDescribedBy
                    - describes
                    - hasMetadata
                    - isMetadataFor
                    - isNewVersionOf
                    - isPreviousVersionOf
                    - isPartOf
                    - hasPart
                    - isReferencedBy
                    - references
                    - isDocumentedBy
                    - documents
                    - isCompiledBy
                    - compiles
                    - isVariantFormOf
                    - isOriginalFormof
                    - isIdenticalTo
                    - isAlternateIdentifier
                    - isReviewedBy
                    - reviews
                    - isDerivedFrom
                    - isSourceOf
                    - requires
                    - isRequiredBy
                    - isObsoletedBy
                    - obsoletes
                resource_type:
                  title: Resource Type
                  description: |
                    The type of the resource identified by the identifier.
                  type: string
                  enum:
                    - software
                    - poster
                    - presentation
                    - dataset
                    - video
                    - lesson
                    - physicalobject
                    - other
                    - image-figure
                    - image-plot
                    - image-drawing
                    - image-diagram
                    - image-photo
                    - image-other
                    - publication-annotationcollection
                    - publication-book
                    - publication-section
                    - publication-conferencepaper
                    - publication-datamanagementplan
                    - publication-article
                    - publication-patent
                    - publication-preprint
                    - publication-deliverable
                    - publication-milestone
                    - publication-proposal
                    - publication-report
                    - publication-softwaredocumentation
                    - publication-taxonomictreatment
                    - publication-technicalnote
                    - publication-thesis
                    - publication-workingpaper
                    - publication-other
          references:
            description: |
              List of references for the project.
            $ref: https://jsonschemata.repodynamics.com/array/unique-strings
          communities:
            description: |
              ID list of Zenodo communities you wish the project to appear in.
              The owner of the communities will be notified,
              and can either accept or reject your request.
            examples:
              - [ ecfunded ]
            $ref: https://jsonschemata.repodynamics.com/array/unique-strings
          grants:
            title: Grants
            description: |
              List of OpenAIRE-supported grants funding the research for this project.
            examples:
              - - '10.13039/501100000780::283595'
                - 283595
            type: array
            uniqueItems: true
            minItems: 1
            items:
              title: Grant ID
              description: |
                Can be either a funder-DOI-prefixed grant ID or a European Commission grant ID.
              $ref: https://jsonschemata.repodynamics.com/string/nonempty
          notes:
            title: Notes
            description: |
              Additional notes about the citation.
            $ref: https://jsonschemata.repodynamics.com/string/nonempty
          imprint_publisher:
            description: |
              Publisher of the deposition.
              The publisher is used to formulate the citation.
              Defaults to 'Zenodo'.
            $ref: https://jsonschemata.repodynamics.com/string/oneline
            examples:
              - Zenodo
          custom:
            description: |
              Additional publication-type-specific fields.
            type: object
            default: { }
            properties:
              "code:codeRepository":
                title: Code Repository
                $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
                default: ${{ repo.url.home }}$
              "code:programmingLanguage":
                type: array
                uniqueItems: true
                items:
                  type: object
                  required: [ id ]
                  properties:
                    id:
                      description: |
                        ID of a used programming language.
                      $ref: https://jsonschemata.repodynamics.com/string/oneline
                      examples:
                        - python
                        - java
              "code:developmentStatus":
                type: object
                required: [ id ]
                properties:
                  id:
                    type: string
                    enum:
                      - wip
                      - unsupported
                      - inactive
                      - suspended
                      - moved
                      - concept
                      - abandoned
                      - active
        allOf:
          - if:
              properties:
                upload_type:
                  const: publication
              then:
                required: [ publication_type ]
          - if:
              properties:
                upload_type:
                  const: image
              then:
                required: [ image_type ]
          - if:
              properties:
                access_right:
                  enum: [ embargoed, open ]
              then:
                required: [ license ]
          - if:
              properties:
                access_right:
                  const: embargoed
              then:
                required: [ embargo_date ]
          - if:
              properties:
                access_right:
                  const: restricted
              then:
                required: [ access_conditions ]
  funding:
    description: |
      Configurations for the
      [`FUNDING.yml` file](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/displaying-a-sponsor-button-in-your-repository).
      
      These configurations are used to automatically maintain a `FUNDING.yml` file for the project,
      which is used by GitHub to display a sponsor button in your repository.
      Clicking on the button opens the ***Sponsor this project*** section,
      where a list of links to the specified funding platforms is displayed to the user.
      
      You can specify up to four
      [sponsored GitHub accounts](https://docs.github.com/en/sponsors/receiving-sponsorships-through-github-sponsors),
      up to four custom URLs,
      and one account per supported external funding platform.
    examples:
      - github: [ '${{ owner.username }}$', EXAMPLE-GITHUB-USERNAME ]
        custom: [ 'https://paypal.me/EXAMPLE-PAYPAL-USERNAME' ]
        tideleft: pypi/${{ package.name }}$
    type: object
    additionalProperties: false
    properties:
      community_bridge:
        title: LFX Mentorship
        description: |
          [LFX Mentorship (CommunityBridge)](https://lfx.linuxfoundation.org/tools/mentorship) project name.
        $ref: https://jsonschemata.repodynamics.com/string/oneline
      issuehunt:
        title: IssueHunt
        description: |
          [IssueHunt](https://issuehunt.io/) username.
        $ref: https://jsonschemata.repodynamics.com/string/oneline
      ko_fi:
        title: Ko-fi
        description: |
          [Ko-fi](https://ko-fi.com/) username.
        $ref: https://jsonschemata.repodynamics.com/string/oneline
      liberapay:
        title: Liberapay
        description: |
          [Liberapay](https://liberapay.com/) username.
        $ref: https://jsonschemata.repodynamics.com/string/oneline
      open_collective:
        title: Open Collective
        description: |
          [Open Collective](https://opencollective.com/) username.
        $ref: https://jsonschemata.repodynamics.com/string/oneline
      patreon:
        title: Patreon
        description: |
          [Patreon](https://www.patreon.com/) username.
        $ref: https://jsonschemata.repodynamics.com/string/oneline
      tidelift:
        title: Tidelift
        description: |
          [Tidelift](https://tidelift.com/) package address.
          This is a string with the format `<PLATFORM-NAME>/<PACKAGE-NAME>`,
          where `<PACKAGE-NAME>` is the name of your package,
          and platform name is the name of the package manager
          hosting the package, i.e., one of
          `npm`, `pypi`, `maven`, `rubygems`, `nuget`, or `packagist`.
        examples:
          - pypi/controlman
        type: string
        pattern: ^(npm|pypi|rubygems|maven|packagist|nuget)/\S+$
      polar:
        title: Polar
        description: |
          [Polar](https://www.polar.sh/) username.
        $ref: https://jsonschemata.repodynamics.com/string/oneline
      buy_me_a_coffee:
        title: Buy Me a Coffee
        description: |
          [Buy Me a Coffee](https://www.buymeacoffee.com/) username.
        $ref: https://jsonschemata.repodynamics.com/string/oneline
      thanks_dev:
        title: Thanks.dev
        description: |
          [thanks.dev](https://thanks.dev/home) account address.
        $ref: https://jsonschemata.repodynamics.com/string/oneline
        examples:
          - u/gh/USERNAME
      github:
        title: GitHub Sponsors
        description: |
          Usernames of up to four [GitHub Sponsors](https://docs.github.com/en/sponsors/) accounts.
          
          One of these can be a
          [sponsored organization account](https://docs.github.com/en/sponsors/receiving-sponsorships-through-github-sponsors/setting-up-github-sponsors-for-your-organization),
          while the others must be
          [sponsored personal accounts](https://docs.github.com/en/sponsors/receiving-sponsorships-through-github-sponsors/setting-up-github-sponsors-for-your-personal-account).
        type: array
        maxItems: 4
        uniqueItems: true
        items:
          title: GitHub Sponsors Account
          description: |
            GitHub username of a sponsored account.
            
            This can be either a personal or an organization account.
          $ref: https://jsonschemata.repodynamics.com/id/github/user
      custom:
        title: Custom
        description: |
          URLs to up to four custom funding platforms.
          
          These can be any URL, such as a PayPal donation link.
        examples:
          - [ 'https://paypal.me/EXAMPLE-PAYPAL-USERNAME', 'https://example.com/donate' ]
          - [ 'https://example.com/donate' ]
          - - 'https://funding-platform-1.com'
            - 'https://funding-platform-2.com'
            - 'https://funding-platform-3.com'
            - 'https://funding-platform-4.com'
        type: array
        maxItems: 4
        uniqueItems: true
        items:
          title: URL
          description: |
              URL to a custom funding platform.
          examples:
            - https://paypal.me/EXAMPLE-PAYPAL-USERNAME
            - https://example.com/donate
          $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
  color:
    description: |
      Color palette of the the project.
      
      Colors of the project's light and dark themes.
      Each color can be defined using any valid [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value),
      such as hexadecimal, RGB, HSL, or named colors.
    type: object
    required: [ primary, secondary ]
    properties:
      primary:
        description: Primary color of the project.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      secondary:
        description: Secondary color of the project.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      accent:
        description: Accent color of the project.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      background:
        description: |
          Background color.

          In the website, this corresponds to the color of the canvas;
          i.e. the deepest layer.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      on-background:
        description: |
          Color for elements directly on top of background.

          In the website, this corresponds e.g., to the color of the header navbar,
          providing slight contrast against the background.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      surface:
        description: |
          Surface color.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      on-surface:
        description: |
          Color for elements directly on top of surface.

          In the website, this corresponds e.g., to the color of the sidebar directives,
        $ref: https://controlman.repodynamics.com/schema/themed-color
      info:
        description: Semantic color for info blocks.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      warning:
        description: Semantic color for warning blocks.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      success:
        description: Semantic color for success blocks.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      attention:
        description: Semantic color for attention blocks.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      danger:
        description: Semantic color for danger blocks.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      text-base:
        description: Base color for texts.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      text-muted:
        description: Color for muted texts.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      shadow:
        description: Color for shadows.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      border:
        description: Color for borders.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      border-muted:
        description: Color for muted borders.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      blockquote-notch:
        description: Color for block-quote notches.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      inline-code:
        description: Color for inline codes.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      inline-code-links:
        description: Color for inline code links.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      target:
        description: Color for target components.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      table:
        description: Color for tables.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      table-row-hover:
        description: Color for table rows on hover.
        $ref: https://controlman.repodynamics.com/schema/themed-color
      table-inner-border:
        description: Color for table inner borders.
        $ref: https://controlman.repodynamics.com/schema/themed-color
  # Documentation
  document:
    description: |
      Dynamic documentation files for the project.
      
      These include README files that are displayed to users on landing pages of
      project's repositories, such as GitHub, PyPI, and Anaconda, as well as
      README files in different directories of the repository providing
      technical information to contributors and reviewers.
      
      Configurations for README files in different directories of the repository.
      For each readme file, add a key-value pair where the key is the path to the directory.
      
      Configurations for 
      [community health files](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file).
      
      :::{admonition} Supported Syntax
      :class: dropdown info

      [GitHub](https://docs.github.com/en/get-started/writing-on-github),
      PyPI, and Anaconda.org all support markup languages such as Markdown and reStructuredText
      for defining the contents of files.
      That is, when the file extension is in a supported format (e.g., `.md`, `.rst`),
      the contents are rendered as HTML on the respective platforms.
      However, GitHub only allows [GitHub Flavored Markdown](https://github.github.com/gfm/) syntax,
      and performs additional post-processing and sanitization after rendering the contents to HTML,
      due to security concerns. This means that only a 
      [limited subset of HTML features](https://docs.github.com/en/get-started/writing-on-github)
      are supported.
      Like GitHub, PyPI and Anaconda also impose several restrictions
      and perform additional post-processing and sanitization.
      PyPI uses the [Readme Renderer](https://github.com/pypa/readme_renderer) library
      to render the README file, which only supports a
      [limited subset of HTML tags](https://github.com/pypa/readme_renderer/blob/9c2eb81301bc230f2795cf7e6dc2c23f5815ea41/readme_renderer/clean.py#L20-L31)
      and [attributes](https://github.com/pypa/readme_renderer/blob/9c2eb81301bc230f2795cf7e6dc2c23f5815ea41/readme_renderer/clean.py#L33-L65).
      Since these do not completely overlap with the features supported by GitHub,
      a separate [PyPI-friendly README](https://packaging.python.org/en/latest/guides/making-a-pypi-friendly-readme/)
      must be provided for PyPI, to ensure that the contents are correctly rendered on the package index.
      :::
    type: object
    additionalProperties:
      title: Document
      description: |
        Definition of a dynamic document.
      type: object
      additionalProperties: false
      required: [ content, output ]
      properties:
        content:
          description: Content of the document.
          type: object
        output:
          description: |
            Configurations for document output files.
            
            A document can be simultaneously maintained in
            multiple output formats at different locations.
            For each output format/location,
            add a key-value pair where the key
            is an ID for that specific output.
          type: object
          additionalProperties:
            title: Output
            description: |
              Definition of an output for the document.
            type: object
            properties:
              target:
                description: |
                  Target output format.
                default: github
                oneOf:
                  - type: string
                  - type: object
              filters:
                description: |
                  Filters to apply to document content for this output.
                  
                  When filters are specified, document components are
                  included in the output only if
                  - they have no conditions defined, or
                  - at least one of the defined conditions matches one of the filters.
                  
                  :::{admonition} Usage
                  :class: dropdown note toggle-shown
                  
                  Filters can be used to dynamically generate similar versions
                  of a document from the same source. For example,
                  you may want to output both a short version and a long version for a document.
                  To do so, you can e.g., add "short" and "long" conditions to the respective
                  document content. Then, for the long version, define no filters
                  to include all content in the output. For the short version,
                  add "short" as a filter, so that only components with a "short" condition are included.
                  :::
                type: array
                items:
                  type: string
              heading_number_explicit:
                description: |
                  Whether to explicitly add heading numbers to each heading.
                type: boolean
                default: false
              path:
                $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
                description: |
                  Path of the output document.
                  
                  The document's index file is maintained at this filepath.
                  If the output format generates other files and directories,
                  these will be added to the same directory as the index file.
                  
                  Note that the repository [README](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes)
                  file and [community health files](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file)
                  are only recognized by GitHub when placed at certain paths, as follows:

                  :::{rubric} [`README`](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes)
                  :heading-level: 3
                  :::
                  The file must be na`med `README` (case-sensitive) and placed either in the
                  `.github` directory, the `docs` directory, or the root of the repository,
                  and can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
                  If more than one of such files are present, the order of precedence is
                  `.github`, then root, and finally the `docs` directory.
                  - RegEx pattern: `^(?:|.github/|docs/)README(?i:.(txt|md|rst))?$`
                  - Examples:
                    - `README`
                    - `README.md`
                    - `.github/README.txt`
                    - `docs/README.rst`

                  :::{rubric} [`CONTRIBUTING`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors)
                  :heading-level: 3
                  :::
                  The file must be named `CONTRIBUTING` (case-insensitive)
                  and placed either in the `.github` directory, the `docs` directory,
                  or the root of the repository. It can have the extensions `.txt`, `.md`, or `.rst`.
                  - RegEx pattern: `^(?:|.github/|docs/)(?i:CONTRIBUTING(?:.(txt|md|rst))?)$`
                  - Examples:
                    - `CONTRIBUTING`
                    - `CONTRIBUTING.md`
                    - `contributing.rst`
                    - `docs/CONTRIBUTING.txt`
                    - `.github/contributing.md`

                  :::{rubric} [`GOVERNANCE`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/)
                  :heading-level: 3
                  :::
                  The file must be named `GOVERNANCE` (case-sensitive)
                  and placed either in the `.github` directory, the `docs` directory,
                  or the root of the repository. 
                  It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
                  - RegEx pattern: `^(?:|.github/|docs/)GOVERNANCE(?i:.(txt|md|rst))?$`
                  examples:
                    - `GOVERNANCE`
                    - `GOVERNANCE.md`
                    - `docs/GOVERNANCE.txt`
                    - `.github/GOVERNANCE.md`

                  :::{rubric} [`SECURITY`](https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository)
                  :heading-level: 3
                  :::
                  The file must be named `SECURITY` (case-sensitive)
                  and placed either in the `.github` directory, the `docs` directory,
                  or the root of the repository. 
                  It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
                  - RegEx pattern: `^(?:|.github/|docs/)SECURITY(?i:.(txt|md|rst))?$`
                  - Examples:
                    - `SECURITY`
                    - `SECURITY.md`
                    - `docs/SECURITY.txt`
                    - `.github/SECURITY.md`

                  :::{rubric} [`SUPPORT`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-support-resources-to-your-project)
                  :heading-level: 3
                  :::
                  The file must be named `SUPPORT` (case-sensitive)
                  and placed either in the `.github` directory, the `docs` directory,
                  or the root of the repository. 
                  It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
                  - RegEx pattern: `^(?:|.github/|docs/)SUPPORT(?i:.(txt|md|rst))?$`
                  - Examples:
                    - `SUPPORT`
                    - `SUPPORT.md`
                    - `docs/SUPPORT.txt`
                    - `.github/SUPPORT.md`

                  :::{rubric} [`CODE_OF_CONDUCT`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project)
                  :heading-level: 3
                  :::
                  The file must be named `CODE_OF_CONDUCT` (case-sensitive)
                  and placed either in the `.github` directory, the `docs` directory,
                  or the root of the repository.
                  It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
                  - RegEx pattern: `^(?:|.github/|docs/)CODE_OF_CONDUCT(?i:.(txt|md|rst))?$`
                  - Examples:
                    - `CODE_OF_CONDUCT`
                    - `CODE_OF_CONDUCT.md`
                    - `docs/CODE_OF_CONDUCT.txt`
                    - `.github/CODE_OF_CONDUCT.MD`

                  Note that for "Code of conduct" to be marked as complete in the repository's community profile,
                  GitHub only accepts the
                  [Contributor Covenant](https://www.contributor-covenant.org/version/2/0/code_of_conduct.html)
                  and the [Citizen Code of Conduct](http://stumptownsyndicate.org/).
                examples:
                  - README.md
                  - .github/README.md
                  - docs/SECURITY.md
                  - .github/contributing.md
              url:
                title: URL
                description: |
                  URL of the file on GitHub.
                default: ${{ repo.url.blob }}$/${{ .path }}$
                examples:
                  - "https://github.com/RepoDynamics/PyPackIT/blob/main/README.md"
                $ref: https://jsonschemata.repodynamics.com/url/https
  web:
    title: Website
    description: Configurations for the project's website.
    type: object
    additionalProperties: false
    required: [ path, sphinx ]
    properties:
      toc:
        title: Table of Content
        description: |
          The entire website's table of contents.
        type: object
      path:
        description: Paths to the website directory.
        type: object
        default: { }
        additionalProperties: false
        required: [ root, source ]
        properties:
          root:
            description: Path to website root directory relative to the repository root.
            $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
            default: docs/website
          source_rel:
            description: Path to website source directory relative to the website root directory.
            $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
            default: source
          source:
            description: Path to website source directory relative to the repository root.
            $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
            default: ${{ .root }}$/${{ .source_rel }}$
          to_root:
            description: Relative path from the source directory to the root of the repository.
            default: |
              #{{ return len(get(".source").split("/")) * "../" }}#
      sphinx:
        description: |
          Configurations for the Sphinx website generator.
          These are the [same key-value pairs](https://www.sphinx-doc.org/en/master/usage/configuration.html)
          that can be added to the `conf.py` file of a Sphinx project.
          They are automatically added to `conf.py` file during the website build process.
          Note that not all keys are explicitly listed in the schema,
          but any valid key can still be added here. However, there are some exceptions:
          - [`extensions`](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-extensions)
            are automatically added based on the definitions in [`extension`](#ccc-web.extension),
            and should not be set here.
        type: object
        additionalProperties: false
        properties:
          dependency:
            description: Sphinx version specifications.
            default:
              import_name: sphinx
              pip:
                spec: sphinx == 7.4.7
              conda:
                spec: sphinx == 7.4.7
                channel: conda-forge
              url:
                docs: https://www.sphinx-doc.org/
                source: https://github.com/sphinx-doc/sphinx
            $ref: https://controlman.repodynamics.com/schema/dep-direct
          config:
            description: Sphinx configurations.
            type: object
            additionalProperties: true
            default: { }
            properties:
              project:
                title: Name of the project.
                type: string
                default: ${{ name }}$
              author:
                title: Author(s) of the project.
                type: string
                default: ${{ team.owner.name.full }}$
              project_copyright:
                title: Copyright notice of the project.
                type: string
                default: ${{ copyright }}$
              version:
                title: Public (`major.minor`) version of the project.
                description: |
                  When not set (recommended),
                  this is determined at build time from the latest
                  [version tag](#ccc-tag.version) in the branch.
                type: string
                default_auto: determined from git tags
              release:
                title: Full version of the project.
                description: |
                  When not set (recommended),
                  this is determined at build time from the latest
                  [version tag](#ccc-tag.version) in the branch.
                type: string
                default_auto: determined from git tags
              needs_sphinx:
                title: Minimum supported version of Sphinx.
                description: |
                  The version must be in the form of `major.minor`,
                  where `major` and `minor` are integers.
                  This is automatically determined from the [`dependency`](#ccc-web.sphinx.dependency) definition.
                type: string
                default: '7.4'
              today_fmt:
                title: Format of the current date.
                type: string
                default: '%b %d, %Y'
              numfig:
                title: Numbering of figures.
                type: boolean
                default: true
              numfig_format:
                title: |
                  Format of the figure numbering
                  ([ref](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-numfig_format)).
                type: object
                properties:
                  code-block:
                    title: Format of code block numbering.
                    type: string
                    default: 'Code %s'
                  figure:
                    title: Format of figure numbering.
                    type: string
                    default: 'Fig. %s'
                  section:
                    title: Format of section numbering.
                    type: string
                    default: 'Section %s'
                  table:
                    title: Format of table numbering.
                    type: string
                    default: 'Table %s'
              numfig_secnum_depth:
                title: Depth of section numbering.
                type: integer
                default: 3
              pygment_style:
                title: Pygments style to use.
                type: string
                default: 'default'
              show_authors:
                title: Show authors in the output.
                type: boolean
                default: true
              exclude_patterns:
                title: Patterns to exclude from the build.
                type: array
                default:
                  - "Thumbs.db"
                  - ".DS_Store"
                  - ".ipynb_checkpoints"
                  - "README.md"
                items:
                  type: string
              html_static_path:
                title: Paths to static files.
                description: |
                  Paths that do not start with a `/` are relative to the website's `source` directory.
                type: array
                items:
                  type: string
              html_css_files:
                title: Paths to CSS files.
                description: |
                  Any `.css` or `.css_t` file in a directory named `css`
                  directly under the first defined path in `html_static_path`
                  will be automatically added to this list, if not already defined here.
                type: array
                items:
                  type: string
              html_js_files:
                title: Paths to JavaScript files.
                description: |
                  Any `.js` or `.js_t` file in a directory named `js`
                  directly under the first defined path in `html_static_path`
                  will be automatically added to this list, if not already defined here.
                type: array
                items:
                  type: string
              latex_engine:
                title: LaTeX engine to use.
                description: |
                  * https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-latex-output
                  * https://www.sphinx-doc.org/en/master/latex.html
                type: string
                enum: [ pdflatex, xelatex, lualatex, platex, uplatex ]
                default: 'pdflatex'
              latex_show_pagerefs:
                title: Show page references in LaTeX output.
                type: boolean
                default: true
              latex_show_urls:
                title: Show URLs in LaTeX output.
                type: string
                enum: [ no, footnote, inline ]
                default: 'footnote'
              latex_theme:
                title: LaTeX theme to use.
                type: string
                enum: [ manual, howto ]
                default: manual
          extension:
            title: Internal Sphinx extensions to be added.
            description: |
              All information about Sphinx internal extensions are added here.
              These are used to add the [`extensions`](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-extensions)
              key and each extension's configurations to the `conf.py` file.
            type: object
            additionalProperties:
              type: object
              required: [ dependency ]
              properties:
                dependency:
                  title: Extension information.
                  description: |
                    The `import_name` must be the name of the extension as it is imported in Python,
                    i.e., what's added to the `extensions` list in the `conf.py` file.
                  $ref: https://controlman.repodynamics.com/schema/dep-indirect
                config:
                  title: Configuration to be added to the Sphinx configuration.
                  type: object
                  additionalProperties: true
          needs_package:
            type: boolean
            default: false
        required: [ dependency ]
      theme:
        description: |
          HTML theme of the website.
        type: object
        additionalProperties: false
        required: [ dependency ]
        properties:
          dependency:
            title: Name of the theme.
            default:
              import_name: pydata_sphinx_theme
              pip:
                spec: pydata-sphinx-theme == 0.15.4
              conda:
                spec: pydata-sphinx-theme == 0.15.4
                channel: conda-forge
              url:
                docs: https://pydata-sphinx-theme.readthedocs.io/
                source: https://github.com/pydata/pydata-sphinx-theme
            anyOf:
              - $ref: https://controlman.repodynamics.com/schema/dep-direct
              - $ref: https://controlman.repodynamics.com/schema/dep-indirect
          config:
            title: HTML Theme Options
            description: |

            type: object
            additionalProperties: true
      extension:
        title: Extensions to be added to the Sphinx configuration.
        description: |
          All information about extensions, including dependencies and configurations, are added here.
          These are used to add the [`extensions`](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-extensions)
          key and each extension's configurations to the `conf.py` file.
          They are also used to create the `requirements.txt` and `env.yaml`
          files for the website build environment.
        type: object
        additionalProperties:
          type: object
          properties:
            dependency:
              title: Dependency to be installed.
              $ref: https://controlman.repodynamics.com/schema/dep-direct
            config:
              title: Configuration to be added to the Sphinx configuration.
              type: object
              additionalProperties: true
      page:
        title: Paths to important pages on the website.
        description:
          All paths must be relative to the root of the website directory, without suffix.
        type: object
        additionalProperties:
          title: Relative path to the page.
          type: object
          properties:
            title:
              title: Title of the page.
              type: string
              examples:
                - Introduction
                - User Manual
                - Installation
            path:
              title: Path to the page.
              type: string
              examples:
                - intro
                - intro/index
                - user-manual
                - user-manual/installation/index
            url:
              title: URL of the page.
              $ref: https://jsonschemata.repodynamics.com/url/http-explicit
          examples:
            - about/license
            - help/contact
      env:
        title: Environment file configurations.
        $ref: https://controlman.repodynamics.com/schema/env
      url:
        title: Website URLs.
        type: object
        default: { }
        properties:
          custom:
            title: Custom domain (cname) for the website.
            description: |
              Custom domain of the website, if available.
              Setting this will automatically deploy the GitHub Pages website to the given domain,
              instead of the default GitHub Pages domain.
              To learn more about configuring a custom domain with your DNS provider,
              see [GitHub's documentation](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site).
            type: object
            additionalProperties: false
            required: [ name, enforce_https ]
            properties:
              name:
                type: string
                format: uri
                examples:
                  - example.com
                  - www.example.com
                  - subdomain.example.com
              enforce_https:
                title: Enforce HTTPS for the custom domain.
                type: boolean
                default: true
          base:
            title: Base URL of the website.
            description: |
              If not set, this will be set to `https://${{ web.url.cname }}$` if specified,
              or the default GitHub Pages domain,
              which is `https://${{ team.owner.github.user }}$.github.io/${{ repo.name }}$`,
              unless the repository is for a
              [user page](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme)
              (i.e., named `${{ team.owner.github.user }}$.github.io`),
              in which case the base URL is set to `https://${{ team.owner.github.user }}$.github.io`.
            $ref: https://jsonschemata.repodynamics.com/url/http-explicit
            default: |
              #{{
                custom_domain = get("web.url.custom")
                if custom_domain:
                  protocol = "https" if custom_domain["enforce_https"] else "http"
                  domain = custom_domain["name"]
                  return f"{protocol}://{domain}"
                repo_name = get("repo.name")
                owner_github_username = get("team.owner.github.id")
                if repo_name == f"{owner_github_username}.github.io":
                  return f"https://{owner_github_username}.github.io"
                return f"https://{owner_github_username}.github.io/{repo_name}"
              }}#
            examples:
              - 'https://${{ repo.info.owner.login }}$.github.io'
          home:
            title: Homepage URL of the website.
            description: |
              This should point to the main landing page (i.e., `index` file) of the website.
              If not set, this will be set to the base URL.
            default: ${{ web.url.base }}$
            examples:
              - ${{ web.url.base }}$/some/path
            $ref: https://jsonschemata.repodynamics.com/url/http-explicit
      quicklinks:
        title: Quicklinks
        description: |
          Quicklinks to important pages on the website.
          These are displayed in the footer of the website.
        type: array
        items:
          title: Group
          type: object
          required: [ links ]
          properties:
            title:
              title: Title
              type: string
              examples:
                - About
                - Contact
                - Help
            links:
              title: Links
              type: array
      announcement:
        title: Configurations of project announcements.
        type: object
        required: [ path, retention_days, url ]
        properties:
          path:
            title: Path to the announcement banner file.
            $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
            default: ${{ web.path.root }}$/announcement.html
            examples:
              - docs/announcement.html
          retention_days:
            title: Number of days to keep an announcement.
            default: 30
            $ref: https://jsonschemata.repodynamics.com/number/non-negative
          url:
            title: URL to the announcement banner file.
            $ref: https://jsonschemata.repodynamics.com/url/http-explicit
            default: ${{ repo.url.raw }}$/${{ .path }}$
      file:
        type: object
        additionalProperties:
          $ref: https://controlman.repodynamics.com/schema/web-file
  # Package
  pkg:
    title: Package
    description: |
      Configurations of the project's Python package.
    $ref: https://controlman.repodynamics.com/schema/pkg
  test:
    title: Test Suite
    description: |
      Configurations of the project's test suite.
    $ref: https://controlman.repodynamics.com/schema/pkg
  # ITS
  commit:
    description: |
      Configurations for different commit types.
    type: object
    additionalProperties: false
    required: [ config, auto ]
    default: { }
    properties:
      config:
        type: object
        additionalProperties: false
        required:
          - scope_start
          - scope_separator
          - scope_end
          - description_separator
          - body_separator
          - footer_separator
          - regex
        default: { }
        properties:
          scope_start:
            $ref: https://jsonschemata.repodynamics.com/string/nonempty
            default: "("
          scope_separator:
            $ref: https://jsonschemata.repodynamics.com/string/nonempty
            default: ", "
          scope_end:
            $ref: https://jsonschemata.repodynamics.com/string/nonempty
            default: ")"
          description_separator:
            $ref: https://jsonschemata.repodynamics.com/string/nonempty
            default: ": "
          body_separator:
            $ref: https://jsonschemata.repodynamics.com/string/nonempty
            default: "\n\n"
          footer_separator:
            $ref: https://jsonschemata.repodynamics.com/string/nonempty
            default: "\n\n--------------------------------------------------\n"
          regex:
            type: object
            additionalProperties: false
            required: [ separator, validator ]
            default: { }
            properties:
              separator:
                type: object
                additionalProperties: false
                required: [ scope_start, scope_items, scope_end, description, body, footer ]
                default: { }
                properties:
                  scope_start:
                    $ref: https://jsonschemata.repodynamics.com/string/nonempty
                    default: '\s*\(\s*'
                  scope_items:
                    $ref: https://jsonschemata.repodynamics.com/string/nonempty
                    default: '\s*,\s*'
                  scope_end:
                    $ref: https://jsonschemata.repodynamics.com/string/nonempty
                    default: '\s*\)\s*'
                  description:
                    $ref: https://jsonschemata.repodynamics.com/string/nonempty
                    default: '\s*:\s+'
                  body:
                    $ref: https://jsonschemata.repodynamics.com/string/nonempty
                    default: '\n'
                  footer:
                    $ref: https://jsonschemata.repodynamics.com/string/nonempty
                    default: '\n-{3,}\n'
              validator:
                type: object
                additionalProperties: false
                required: [ type, scope, description ]
                default: { }
                properties:
                  type:
                    $ref: https://jsonschemata.repodynamics.com/string/nonempty
                    default: '^[^:\s(),]*$'
                  scope:
                    $ref: https://jsonschemata.repodynamics.com/string/nonempty
                    default: '^[^:\s(),]+$'
                  description:
                    $ref: https://jsonschemata.repodynamics.com/string/nonempty
                    default: '^[^\n]+$'
      auto:
        title: Automatic Commits
        description: Automatic commit types
        type: object
        default: { }
        additionalProperties: false
        required: [ dev_branch_creation, changelog_sync, config_sync, refactor ]
        properties:
          dev_branch_creation:
            title: Development Branch Creation
            description: |
              Automatic creation of development branches.
            default:
              type: init
              scope: dev
              description: >-
                Create development branch for pull #{{ pull_request.number }} (issue #{{ issue.number }}).
              body: |
                Head branch name: {{ head.name }}
                Base branch name: {{ base.name }}
                Base branch SHA:  {{ base.sha }}
            $ref: https://controlman.repodynamics.com/schema/commit-auto
          changelog_sync:
            title: Changelog Synchronization
            description: |
              Automatic initialization of a new changelog entry.
            default:
              type: sync
              scope: changelog
              description: >-
                Synchronize changelog and contributors data.
            $ref: https://controlman.repodynamics.com/schema/commit-auto
          config_sync:
            title: Configuration Synchronization
            description: |
              Automatic synchronization of configuration files.
            default:
              type: sync
              scope: config
              description: >-
                Synchronize dynamic files with control center configurations.
            $ref: https://controlman.repodynamics.com/schema/commit-auto
          dockerfile_sync:
            title: Dockerfile Synchronization
            description: |
              Automatic synchronization of Dockerfile file.
            default:
              type: sync
              scope: dockerfile
              description: >-
                Synchronize dockerfile with latest image name.
            $ref: https://controlman.repodynamics.com/schema/commit-auto
          vars_sync:
            title: Variables Synchronization
            description: |
              Automatic synchronization of variables file.
            default:
              type: sync
              scope: vars
              description: >-
                Synchronize variables file.
            $ref: https://controlman.repodynamics.com/schema/commit-auto
          contrib_sync:
            title: Contributors Synchronization
            description: |
              Automatic synchronization of contributors file.
            default:
              type: sync
              scope: contrib
              description: >-
                Synchronize contributors file.
            $ref: https://controlman.repodynamics.com/schema/commit-auto
          refactor:
            title: Refactor
            description: |
              Continuous refactoring tasks.
            default:
              type: refactor
              scope: auto
              description: >-
                Apply automatic formatting and refactoring.
            $ref: https://controlman.repodynamics.com/schema/commit-auto
      release:
        description: Primary action commit types
        type: object
        additionalProperties:
          title: Release Commit
          description: |
            Configurations for a release commit.
            For each commit a key-value pair must be added
            where the key is the ID of the commit type,
            to reference in other configurations.
          unevaluatedProperties: false
          allOf:
            - $ref: https://controlman.repodynamics.com/schema/commit-auto
            - type: object
              properties:
                action:
                  description: |
                    The action to be taken when the commit is pushed.
                  type: string
                  enum:
                    - post
                    - patch
                    - minor
                    - major
                subtypes:
                  title: Subtypes
                  description: Configurations for commit sub-types of the commit.
                  type: object
                  properties:
                    any:
                      title: Any
                      description: |
                        A list of `secondary` commit-type IDs,
                        of which at least one must be present in the head branch.
                      type: array
                      items:
                        type: string
                      minItems: 1
                      uniqueItems: true
                    all:
                      type: array
                      items:
                        type: string
                      minItems: 1
                      uniqueItems: true
                    include:
                      type: array
                      items:
                        type: string
                      minItems: 1
                      uniqueItems: true
                    exclude:
                      title: Exclude
                      description: |
                        A list of `secondary` commit-type IDs
                        that must not be present in the head branch.
                      type: array
                      items:
                        type: string
                      minItems: 1
                      uniqueItems: true
                  allOf:
                    - anyOf:
                        - required: [ any ]
                        - required: [ all ]
                    - not:
                        anyOf:
                          - required: [ include, exclude ]
      dev:
        title: Secondary Commits
        description: |
          Secondary action commit types.
          For each commit type, a key-value pair must be added,
          where the key is both the ID of the commit type (to reference in other places)
          and its commit message type.
        type: object
        additionalProperties:
          title: Custom Secondary Commit
          description: Configurations for a secondary commit type.
          allOf:
            - $ref: https://controlman.repodynamics.com/schema/commit
            - properties:
                role:
                  description: |
                    Default roles for authors and committers of this commit type.
                  type: object
                  additionalProperties: false
                  properties:
                    author:
                      $ref: https://controlman.repodynamics.com/schema/role-priority
                    committer:
                      $ref: https://controlman.repodynamics.com/schema/role-priority
  label:
    description: |
      Label configurations for issues, pull requests, and discussions.
      
      [GitHub docs](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/managing-labels)
    type: object
    default: { }
    required: [ status, branch, version ]
    properties:
      status:
        description: Issue/pull status.
        type: object
        default: { }
        additionalProperties: false
        required: [ prefix, color, label ]
        properties:
          prefix:
            default: Status
            $ref: https://controlman.repodynamics.com/schema/label-prefix
          separator:
            type: string
            default: ": "
          color:
            description: Color of all status labels.
            default: '#0366d6'
            $ref: https://jsonschemata.repodynamics.com/color/hex-string
          label:
            title: Labels
            description: Configurations for each status label.
            type: object
            default : { }
            additionalProperties: false
            required:
              - triage
              - rejected
              - duplicate
              - invalid
              - planning
              - requirement_analysis
              - design
              - implementation
              - testing
              - deploy_alpha
              - deploy_beta
              - deploy_rc
              - deploy_final
            properties:
              triage:
                description: The issue is being triaged.
                default:
                  suffix: triage
                  description: The issue has been submitted and is being triaged.
                $ref: https://controlman.repodynamics.com/schema/label-group-element
              rejected:
                description: The issue/PR has been rejected.
                default:
                  suffix: rejected
                  description: The issue has been rejected and closed.
                $ref: https://controlman.repodynamics.com/schema/label-group-element
              duplicate:
                description: The issue/PR is a duplicate.
                default:
                  suffix: duplicate
                  description: The issue has been marked as duplicate and closed.
                $ref: https://controlman.repodynamics.com/schema/label-group-element
              invalid:
                description: The issue/PR is invalid.
                default:
                  suffix: invalid
                  description: The issue has been marked as invalid and closed.
                $ref: https://controlman.repodynamics.com/schema/label-group-element
              planning:
                description: The issue is in the planning phase.
                default:
                  suffix: planning
                  description: The issue is in the planning phase.
                $ref: https://controlman.repodynamics.com/schema/label-group-element
              requirement_analysis:
                description: The issue is in the requirement analysis phase.
                default:
                  suffix: requirement analysis
                  description: The issue is in the requirement analysis phase.
                $ref: https://controlman.repodynamics.com/schema/label-group-element
              design:
                description: The issue is in the design phase.
                default:
                  suffix: design
                  description: The issue is in the design phase.
                $ref: https://controlman.repodynamics.com/schema/label-group-element
              implementation:
                description: The issue is in the implementation phase.
                default:
                  suffix: implementation
                  description: The issue is in the implementation phase.
                $ref: https://controlman.repodynamics.com/schema/label-group-element
              testing:
                description: The issue is in the testing phase.
                default:
                  suffix: testing
                  description: The issue is in the testing phase.
                $ref: https://controlman.repodynamics.com/schema/label-group-element
              deploy_alpha:
                title: Alpha Release
                description: The issue/PR is in alpha release.
                default:
                  suffix: alpha release
                  description: Published as alpha release.
                $ref: https://controlman.repodynamics.com/schema/label-group-element
              deploy_beta:
                title: Beta Release
                description: The issue/PR is in beta release.
                default:
                  suffix: beta release
                  description: Published as beta release.
                $ref: https://controlman.repodynamics.com/schema/label-group-element
              deploy_rc:
                title: Release Candidate
                description: The issue/PR is published as a release candidate.
                default:
                  suffix: release candidate
                  description: Published as release candidate.
                $ref: https://controlman.repodynamics.com/schema/label-group-element
              deploy_final:
                title: Final Release
                description: The issue/PR has been merged into a release branch.
                default:
                  suffix: final release
                  description: Published as final release.
                $ref: https://controlman.repodynamics.com/schema/label-group-element
      version:
        description: Version labels. This is an automatic label group.
        default:
          prefix: Version
          color: '#0366d6'
          description: Related to version {{ version }} of the project.
        $ref: https://controlman.repodynamics.com/schema/label-group
      branch:
        description: Branch labels. This is an automatic label group.
        default:
          prefix: Branch
          color: '#0366d6'
          description: Related to branch {{ branch }} of the repository.
        $ref: https://controlman.repodynamics.com/schema/label-group
      single:
        description: Custom single labels.
        type: object
        additionalProperties:
          type: object
          additionalProperties: false
          required: [ name ]
          properties:
            name:
              description: Name of the label.
              type: string
            color:
              description: Color of the label.
              $ref: https://jsonschemata.repodynamics.com/color/hex-string
            description:
              description: Description of the label.
              $ref: https://jsonschemata.repodynamics.com/config/github/label/description
    additionalProperties:
      title: Custom Group
      description: A custom group of labels.
      default: { }
      $ref: https://controlman.repodynamics.com/schema/label-group
  issue:
    description: |
      Configurations for [issues](https://docs.github.com/en/issues/tracking-your-work-with-issues).

      These include [issue form](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#creating-issue-forms)
      templates used to automatically maintain issue ticket forms,
      and settings for the project's [issue template chooser]()https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#configuring-the-template-chooser),
      which is automatically maintained via the `.github/ISSUE_TEMPLATE/config.yaml` configuration file.
      
      # GitHub Issues Settings
      This directory contains templates and configurations used when an issue is opened in the repository.

      ## Templates
      The issues templates use the GitHub's [issue forms](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#creating-issue-forms)
      to create customizable web form fields. Each `.yml` file (other than `config.yml`) provides a template for
      a specific issue type. The issue forms use the YAML format, with a series of defined [top-level keys](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-issue-forms#top-level-syntax)
      such as `name`, `description` and `labels`, and a [body syntax](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema)
      to define the form fields.

      Any YAML file created in this directory using the specified syntax will be automatically added to the list of possible
      issue forms that users can select from when opening a new issue in the repository.


      ## Configurations
      The [config.yml](../../.meta/config/issues_template_chooser.yaml) file contains the configurations for the
      [template chooser](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#configuring-the-template-chooser),
      i.e. the landing page of the repository's 'Issues' section.

      ### Options
      - `blank_issues_enabled`: A boolean value defining whether free-form issues can be opened by users.
      - `contact_links`: An array of dictionaries, defining additional external links for opening issues.
      These options will be displayed alongside the available templates in the 'Issues' section of the repository.

      ## References
      - [GitHub Documentation](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/about-issue-and-pull-request-templates)
    type: object
    default : { }
    additionalProperties: false
    required: [ blank_enabled ]
    properties:
      blank_enabled:
        description: Whether to allow submission of free-form issues
        type: boolean
        default: false
      contact_links:
        description: External links to be shown on the issue template chooser
        type: array
        uniqueItems: true
        items:
          type: object
          additionalProperties: false
          required: [ name, about, url ]
          properties:
            name:
              description: Title shown on the issue template chooser
              type: string
            about:
              description: Description shown on the issue template chooser
              type: string
            url:
              description: URL to the external link
              type: string
              format: uri
      form:
        description: |
          Default configurations for all forms.
          Settings here will be recursively merged with each issue form's settings.
          In case of duplicates, the issue form's settings take precedence.
        type: object
        additionalProperties: false
        properties:
          role:
            $ref: https://controlman.repodynamics.com/schema/issue-role
          task:
            $ref: https://controlman.repodynamics.com/schema/conditional-task
      forms:
        description: Issue form definitions and configurations.
        type: array
        uniqueItems: true
        items:
          type: object
          additionalProperties: false
          required: [ id, active, commit, id_labels, name, description, body ]
          properties:
            id:
              title: Unique identifier of the issue form.
              description: |
                This is used to reference the form in other places
                and to generate the filename of the issue template's YAML file.
                The ID must start with an alphanumeric character,
                and can only contain alphanumeric characters, underscores, and hyphens.
              type: string
              pattern: '^[a-zA-Z0-9][a-zA-Z0-9_-]*$'
            active:
              description: |
                Whether this form is currently active.

                Only active forms are included in the repository's available issue forms.
                This can be used to dynamically toggle available issue forms based on certain conditions.

                For example, in |{{ ccc.name }}|'s default configurations, there are three separate issue forms
                defined for reporting bugs in the package's API, GUI, and CLI. However, your package may only have
                some of these interfaces, in which case it makes sense to only show the corresponding issue forms
                when the corresponding interfaces are present. This is achieved by adding a condition to each form.
              type: boolean
              default: true
            commit:
              description: |
                ID of the [release commit](#ccc-commit-release) associated with the form.
                
                Each form must be associated with a release commit.
                This is used to correlate each issue in the repository with a commit type.
                When a pull request from a development branch is merged into a release branch,
                |{{ ccc.name }}| first determines the corresponding issue of the branch from the branch name,
                and then ascertains the corresponding primary commit type from the issue's primary type label,
                in order to decide which actions to perform on the release branch.
                
                If two or more forms are assigned the same [primary type](#primary-type),
                they must each define a unique subtype.
                The subtype must match the key of one of the [subtype labels](../label/index.md#subtypes).
                |{{ ccc.name }}| automatically adds the corresponding subtype label
                to each issue that is created using the form,
                and uses that with conjunction with the primary type label
                to unambiguously identify the form that was used to create each issue in the repository.
                It also helps maintainers and users
                differentiate between issues with the same primary type.
              description_default: |
                If not set, the form ID is used as the commit ID.
              default: ${{ .id }}$
              $ref: https://jsonschemata.repodynamics.com/string/oneline
            id_labels:
              title: Identifier labels
              description: |
                A set of labels that are unique to the form.
                These are added to each ticket created using this form,
                and are used to correlate tickets with their corresponding forms.
              type: array
              uniqueItems: true
              minItems: 1
              items:
                $ref: https://controlman.repodynamics.com/schema/label-id
            labels:
              description: |
                Optionally labels to be added to issue tickets,
                in addition to the [identifier labels](#ccc-issue-forms-id-labels).
                
                Note that [status](#ccc-label-status) labels are automatically added to each issue
                and do not need to be specified here.
              type: array
              uniqueItems: true
              items:
                $ref: https://controlman.repodynamics.com/schema/label-id
            role:
              $ref: https://controlman.repodynamics.com/schema/issue-role
            name:
              title: Name of the issue form.
              description: |
                Each form must have a unique name,
                which is what is displayed to the user on the template chooser interface
                when creating a new issue on GitHub.
              examples:
                - 🖥 App 🐞 Bug Report 📱 API
              type: string
            description:
              title: Description of the issue form.
              description: |
                In addition to a name, each form must also have a description,
                which appears below its name on the template chooser interface.
              examples:
                - Report a problem encountered while using the library's API.
              type: string
            projects:
              title: Projects to add the issue to.
              description: |
                Optionally, a list of projects can be specified for each form,
                in which case each issue created using the issue form
                is automatically added to all specified projects.
                Each project must be specified in the format `PROJECT-OWNER/PROJECT-NUMBER`,
                where `PROJECT-OWNER` is the username or organization name of the project owner,
                and `PROJECT-NUMBER` is the number of the project in the project owner's repository.

                Note that for this to work, either your project's
                [auto-add workflow](https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/adding-items-automatically)
                must be enabled, or the person opening the issue must have write permissions for the specified projects.
              examples:
                - [ RepoDynamics/3, AAriam/1 ]
              type: array
              uniqueItems: true
              items:
                type: string
            title:
              description: |
                Optionally, a default title can be added to each form,
                which will automatically pre-populate the title field
                when a user creates a new issue using the form.
              examples:
                - "API Bug: "
              type: string
            body:
              $ref: https://controlman.repodynamics.com/schema/gh-form-body
            processed_body:
              description: |
                |{{ ccc.name }}| allows you to define post-processing instructions for each form,
                which are executed after an issue is created using the form.

                Issues that are created using GitHub's issue forms are visually not very appealing,
                since GitHub simply creates a new `<h3>` heading for each form element,
                and adds the user input underneath, without any formatting.
                Moreover, there may be some elements that are only meant for the submission step,
                and are not meant to be displayed in the issue body (e.g., checkboxes for agreeing with terms and conditions).
                Therefore, |{{ ccc.name }}| allows you to define a template for the issue body,
                which is used to reformat the issue body after the issue is created.
                The template must be defined as a string representing valid Markdown and/or HTML syntax,
                where the user input for each form element is referenced (similiar to Python strings)
                using the syntax `{id}`, where `id` is the `id` of the corresponding form element.
            task:
              $ref: https://controlman.repodynamics.com/schema/conditional-task
      protocol:
        $ref: https://controlman.repodynamics.com/schema/protocol
  pull:
    description: |
      Configurations for pull requests.
    type: object
    additionalProperties: false
    properties:
      protocol:
        $ref: https://controlman.repodynamics.com/schema/protocol
      template:
        title: Templates
        description: |
          Different [pull request templates](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository)
          can only be accessed via [query parameters](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/using-query-parameters-to-create-a-pull-request)
          . Otherwise, the main template directly under [./github] is used.
          
          For example, to use a template file named `my_custom_template.md`, add the following query string at the end of the
          URL: `?template=my_custom_template.md`. A full URL may e.g. look like this:
          `https://github.com/my-username/my-repo/compare/main...my-branch?template=my_custom_template.md`.
          
          - Pull request template filenames are not case-sensitive, and can have an extension such as `.md` or `.txt`.
          - The YAML syntax used for issue forms is not supported for pull requests templates.
          
          By default, the template defined at [./github/pull_request_template.md](./github/pull_request_template.md)
          is used when opening a pull request. To use the extra templates in this directory,
          the `template` [query parameter](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/using-query-parameters-to-create-a-pull-request)
          must be added to the URL of the pull request form, defining the name of the template to use.
          For example, to use a template file named `my_custom_template.md`, add the following query string at the end of the
          URL: `?template=my_custom_template.md`. A full URL may e.g. look like this:
          https://github.com/my-username/my-repo/compare/main...my-branch?template=my_custom_template.md
        type: object
        additionalProperties:
          type: string
        properties:
          default:
            type: string
  discussion:
    description: |
      Configurations for [discussions](https://docs.github.com/en/discussions/collaborating-with-your-community-using-discussions/about-discussions).
    type: object
    additionalProperties: false
    properties:
      category:
        title: Discussion Categories
        description: |
          Information about available
          [discussion categories](https://docs.github.com/en/discussions/managing-discussions-for-your-community/managing-categories-for-discussions),
          and definition of [discussion category forms](https://docs.github.com/en/discussions/managing-discussions-for-your-community/creating-discussion-category-forms)
          to customize the templates that are available for community members to use
          when they open new discussions in the repository.

          To define a form for an existing discussion category,
          add a key-value pair where the key is the slug of the category name
          in the repository. For example, to create a template for the "New Releases" category,
          use the key `new-releases`.

          :::{admonition} Manual Action Required
          :class: attention

          Defining forms here will automatically
          [create discussion category forms](https://docs.github.com/en/discussions/managing-discussions-for-your-community/creating-discussion-category-forms)
          in the `.github/DISCUSSION_TEMPLATE/` directory of the repository.
          However, unlike issue forms, where adding a new template file in the `.github/ISSUE_TEMPLATE/` directory
          automatically adds it to the list of available issues, discussion category forms only work when a
          corresponding discussion category is already created in the repository.
          Moreover, creating new discussion categories is not yet supported by the GitHub API.
          This means that for each new discussion category form defined here, you must manually
          [create the corresponding discussion category](https://docs.github.com/en/discussions/managing-discussions-for-your-community/managing-categories-for-discussions#creating-a-category)
          in the repository. For example, if you define a form here under the key `new-releases`,
          you must also create a category named `New Releases`, or any other name that matches the slug.
          :::
        type: object
        additionalProperties:
          title: Discussion Category
          description: |
            Information about a discussion category.
          type: object
          additionalProperties: false
          properties:
            name:
              title: Name
              description: |
                Name of the discussion category.

                This is automatically fetched from the 
                [GitHub API](https://docs.github.com/en/graphql/reference/objects#discussioncategory).
              type: string
            id:
              title: ID
              description: |
                Node ID of the `DiscussionCategory` object in the GitHub API.

                This is automatically fetched from the 
                [GitHub API](https://docs.github.com/en/graphql/reference/objects#discussioncategory).
              type: string
            emoji:
              type: string
            description:
              type: string
            is_answerable:
              type: boolean
            created_at:
              $ref: https://jsonschemata.repodynamics.com/date/yyyy-mm-dd
            updated_at:
              $ref: https://jsonschemata.repodynamics.com/date/yyyy-mm-dd
            form:
              title: Category Form
              description: |
                Form definition for a specific discussion category, according to GitHub's
                [syntax for discussion category forms](https://docs.github.com/en/discussions/managing-discussions-for-your-community/syntax-for-discussion-category-forms),
                which is a subset of the [syntax for issue forms](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-issue-forms).
                
                Each YAML file defines a form for a specific discussion category, indicated by the
                filename, which must correspond with the slug for one of the discussion categories.
                For example, the template for the "New Announcements" category should be stored in
                `.github/DISCUSSION_TEMPLATE/new-announcements.yml`.
                
                To be recognized by GitHub, discussion category forms must be stored in the directory `/.github/DISCUSSION_TEMPLATE/`
                (i.e. this directory).
                
                Each YAML file defines a form for a specific discussion category, indicated by the
                filename, which must correspond with the slug for one of the discussion categories.
                For example, the template for the "New Announcements" category should be stored in `.github/DISCUSSION_TEMPLATE/new-announcements.yml`.
                Discussion forms, like issue forms, are written in YAML, using the
                GitHub [form schema](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema).
              type: object
              additionalProperties: false
              properties:
                title:
                  title: Title
                  description: A default title that will be pre-populated in the discussion submission form.
                  type: string
                labels:
                  title: Labels
                  description: Labels that will automatically be added to discussions created with this template.
                  type: array
                  uniqueItems: true
                  items:
                    title: Label
                    description: Name of an available label to add.
                    type: string
                body:
                  $ref: https://controlman.repodynamics.com/schema/gh-form-body
              examples:
                - title: "[General] " # A default title that will be pre-populated in the discussion submission form.
                  # Labels that will automatically be added to discussions created with this template.
                  labels: [ "General Introduction" ]
                  # Definition of the input types in the discussion form.
                  body:
                    - type: markdown
                      attributes:
                        value: |
                          This is text that will show up in the template!
                    - type: textarea
                      id: improvements
                      attributes:
                        label: Top 3 improvements
                        description: "What are the top 3 improvements we could make to this project?"
                        value: |
                          1.
                          2.
                          3.
                          ...
                        render: bash
                      validations:
                        required: true
                    - type: markdown
                      attributes:
                        value: |
                          ## Markdown header
                          And some more markdown
                    - type: input
                      id: has-id
                      attributes:
                        label: Suggestions
                        description: A description about suggestions to help you
                      validations:
                        required: true
                    - type: dropdown
                      id: download
                      attributes:
                        label: Which area of this project could be most improved?
                        options:
                          - Documentation
                          - Pull request review time
                          - Bug fix time
                          - Release cadence
                      validations:
                        required: true
                    - type: checkboxes
                      attributes:
                        label: Check that box!
                        options:
                          - label: This one!
                            required: true
                          - label: I won't stop you if you check this one, too
                    - type: markdown
                      attributes:
                        value: |
                          ### The thrilling conclusion
                          _to our template_
  code_owners:
    title: Code Owners
    description: |
      Configurations for the
      [CODEOWNERS](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners) file.
      
      If present, a CODEOWNERS file is automatically maintained at the given [`path`](#ccc-code-owners-path),
      using file ownership information defined for team members.
      For each pull request, GitHub will then automatically add the owners of each
      modified file in that pull request as reviewers.
      Note that you can also assign issue-form-specific review tasks to each role
      (cf. [`ccc.role.*.assignment.review`](#ccc-role---assignment-review)).
    type: object
    additionalProperties: false
    required: [ path ]
    properties:
      path:
        title: File Path
          Path to the
          [`CODEOWNERS`](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)
          file. This file must be named `CODEOWNERS` (case-sensitive, without extension)
          and placed either in the `.github` directory, the `docs` directory,
          or the root of the repository.
        type: string
        default: .github/CODEOWNERS
        pattern: ^(?:|.github/|docs/)CODEOWNERS$
        examples:
          - CODEOWNERS
          - .github/CODEOWNERS
          - docs/CODEOWNERS
      url:
        title: URL
        description: URL of the repository's `CODEOWNERS` file.
        default: ${{ repo.url.blob }}$/${{ .path }}$
        examples:
          - "https://github.com/RepoDynamics/PyPackIT/blob/main/CODEOWNERS"
        $ref: https://jsonschemata.repodynamics.com/url/https
  # VCS
  repo:
    description: |
      Configurations for the GitHub/Git repository.
      
      These include general GitHub repository metadata
      such as description, topics (keywords), and homepage URL,
      as well as security configurations, merge strategies,
      and section toggles (e.g., Discussions, Projects, Wiki).
      Git settings include `.gitignore` and `.gitattributes` files.

      Some keys are automatically retrieved from GitHub's REST
      [API response](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#get-a-repository)
      during configuration synchronization and are always set to the source repository's metadata,
      meaning that even in forked repositories,
      these keys will always reflect the source repository's settings:
      `id`, `node_id`, `name`, `full_name`, `created_at`, `default_branch`, and `url`.
    type: object
    default: { }
    additionalProperties: false
    properties:
      description:
        title: A short project description (cf. [`title`](#ccc-title)).
        description: |
          This is displayed on the GitHub repository's homepage,
          and is added to repository metadata to improve 
          project findability and visibility.
        type: [ string, 'null' ]
        default: |
          #{{ return get("title") }}#
        description_default: Project [title](#ccc-title).
        examples:
          - ${{ title }}$
          - Another description different from project title.
      topics:
        title: |
          Project
          [topics](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/classifying-your-repository-with-topics).
        description: |
          These keywords help others find your project on GitHub,
          and can include project's intended purpose, subject area,
          affinity groups, and other important qualities.
          Note that GitHub only accepts up to 20 topics.
        type: array
        uniqueItems: true
        maxItems: 20
        items:
          title: A project keyword.
          description: |
            It must start with an alphanumeric character,
            and can contain 50 or less ASCII alphanumeric characters and hyphens.
          type: string
          maxLength: 50
          pattern: ^[A-Za-z0-9][A-Za-z0-9\-]*$
      homepage:
        title: URL of the project's homepage.
        description: |
          This is displayed on the GitHub repository's homepage,
          helping users to easily find your project's website.
        anyOf:
          - $ref: https://jsonschemata.repodynamics.com/url/http-explicit
          - type: 'null'
        default: >-
          #{{ return get("web.url.home") }}#
      secret_scanning:
        title: Enable secret scanning.
        type: boolean
        default: true
      secret_scanning_push_protection:
        title: Enable secret scanning push protection.
        type: boolean
        default: true
      vulnerability_alerts:
        title: Enable vulnerability alerts.
        type: boolean
        default: true
      automated_security_fixes:
        title: Enable automated security fixes.
        type: boolean
        default: true
      private_vulnerability_reporting:
        title: Enable private vulnerability reporting.
        description: |
          https://docs.github.com/en/code-security/security-advisories/repository-security-advisories/configuring-private-vulnerability-reporting-for-a-repository#enabling-or-disabling-private-vulnerability-reporting-for-a-repository
        type: boolean
        default: true
      has_issues:
        title: Enable issues.
        type: boolean
        default: true
      has_discussions:
        title: Enable discussions.
        type: boolean
        default: true
      has_projects:
        title: Enable projects.
        type: boolean
        default: false
      has_wiki:
        title: Enable wiki pages.
        type: boolean
        default: false
      allow_squash_merge:
        title: Allow squash merges.
        type: boolean
        default: true
      allow_merge_commit:
        title: Allow merge commits.
        type: boolean
        default: false
      allow_rebase_merge:
        description: Allow rebase merge.
        type: boolean
        default: true
      allow_auto_merge:
        description: Allow automatic merge.
        type: boolean
        default: false
      delete_branch_on_merge:
        title: Delete head branch on merge.
        description: |
          https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-the-automatic-deletion-of-branches
        type: boolean
        default: false
      allow_update_branch:
        title: Allow head branch updates from base branch.
        type: boolean
        default: true
      squash_merge_commit_title:
        title: Default title of squash merge commit messages.
        enum: [ PR_TITLE, COMMIT_OR_PR_TITLE ]
      squash_merge_commit_message:
        title: Default body of squash merge commit messages.
        enum: [ PR_BODY, COMMIT_MESSAGES, BLANK ]
      merge_commit_title:
        title: Default title of merge commit messages.
        enum: [ PR_TITLE, MERGE_MESSAGE ]
      merge_commit_message:
        title: Default body of merge commit messages.
        enum: [ PR_TITLE, PR_BODY, BLANK ]
      archived:
        title: Archive the repository.
        type: boolean
        default: false
      gitattributes:
        title: The contents of the [`.gitattributes`](https://git-scm.com/docs/gitattributes) file.
        description: |
          These are definition of attributes for files and directories in the repository,
          such as data type (e.g., text or binary), line endings, diff settings, 
          and merge strategies, to manage how Git handles specific files.
          The data must be an array of objects, as explained below.

          :::{admonition} Learn More: `.gitattributes`
          :class: dropdown seealso

          - https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes
          - https://github.com/alexkaratarakis/gitattributes/blob/master/Common.gitattributes
          - https://github.com/alexkaratarakis/gitattributes/blob/master/Python.gitattributes
          :::
        type: array
        uniqueItems: true
        items:
          title: Attributes for a specific filetype.
          description: |
            This must be a key-value pair, where the key is a path or glob pattern,
            and the value is the attributes to set for the matched files,
            specified as an array of strings.
          type: object
          minProperties: 1
          maxProperties: 1
          additionalProperties:
            title: List of attributes to set for the matched files.
            $ref: https://jsonschemata.repodynamics.com/array/unique-strings
        default:
          # ------------------------------------------ Auto Detect -------------------------------------------
          # Auto-detect text files and perform LF normalization. This will handle all files NOT listed below.
          - "*": [ text=auto ]
          # ------------------------------------------ Explicit ----------------------------------------------
          - ".gitattributes": [ text, export-ignore ]
          - ".gitignore": [ text, export-ignore ]
          - "AUTHORS": [ text ]
          - "CHANGELOG": [ text ]
          - "CHANGES": [ text ]
          - "CODEOWNERS": [ text ]
          - "CONTRIBUTING": [ text ]
          - "COPYING": [ text ]
          - "copyright": [ text ]
          - "*COPYRIGHT*": [ text ]
          - "INSTALL": [ text ]
          - "license": [ text ]
          - "LICENSE*": [ text ]
          - "Makefile": [ text ]
          - "NEWS": [ text ]
          - "readme": [ text ]
          - "*README*": [ text ]
          - "TODO": [ text ]
          - "MANIFEST.in": [ text ]
          - "*.typed": [ text ]
          # ------------------------------------------ Documents ---------------------------------------------
          - "*.bibtex": [ text, diff=bibtex ]
          - "*.doc": [ diff=astextplain ]
          - "*.DOC": [ diff=astextplain ]
          - "*.docx": [ diff=astextplain ]
          - "*.DOCX": [ diff=astextplain ]
          - "*.dot": [ diff=astextplain ]
          - "*.DOT": [ diff=astextplain ]
          - "*.pdf": [ diff=astextplain ]
          - "*.PDF": [ diff=astextplain ]
          - "*.rtf": [ diff=astextplain ]
          - "*.RTF": [ diff=astextplain ]
          - "*.md": [ text, diff=markdown ]
          - "*.mdx": [ text, diff=markdown ]
          - "*.rst": [ text ]
          - "*.tex": [ text, diff=tex ]
          - "*.adoc": [ text ]
          - "*.textile": [ text ]
          - "*.mustache": [ text ]
          - "*.csv": [ text, eol=crlf ]
          - "*.tab": [ text ]
          - "*.tsv": [ text ]
          - "*.txt": [ text ]
          - "*.sql": [ text ]
          - "*.epub": [ diff=astextplain ]
          - "*.css": [ text, diff=css ]
          - "*.htm": [ text, diff=html ]
          - "*.html": [ text, diff=html ]
          # ------------------------------------------ Graphics ----------------------------------------------
          - "*.svg": [ text ]
          - "*.png": [ binary ]
          - "*.jpg": [ binary ]
          - "*.jpeg": [ binary ]
          - "*.gif": [ binary ]
          - "*.tif": [ binary ]
          - "*.tiff": [ binary ]
          - "*.ico": [ binary ]
          - "*.eps": [ binary ]
          # ------------------------------------------ Scripts -----------------------------------------------
          - "*.bash": [ text, eol=lf ]
          - "*.fish": [ text, eol=lf ]
          - "*.sh": [ text, eol=lf ]
          - "*.zsh": [ text, eol=lf ]
          # Below are explicitly windows files and should use crlf
          - "*.bat": [ text, eol=crlf ]
          - "*.cmd": [ text, eol=crlf ]
          - "*.ps1": [ text, eol=crlf ]
          # ------------------------------------------ Serialisation -----------------------------------------
          - "*.json": [ text ]
          - "*.toml": [ text ]
          - "*.xml": [ text ]
          - "*.yaml": [ text ]
          - "*.yml": [ text ]
          # ------------------------------------------ Archives ----------------------------------------------
          - "*.7z": [ binary ]
          - "*.gz": [ binary ]
          - "*.jar": [ binary ]
          - "*.rar": [ binary ]
          - "*.tar": [ binary ]
          - "*.tgz": [ binary ]
          - "*.zip": [ binary ]
          # ------------------------------------------ Preserve EOL ------------------------------------------
          # Text files where line endings should be preserved.
          - "*.patch": [ -text ]
          # ------------------------------------------ Python Source Files -----------------------------------
          - "*.pxd": [ text, diff=python ]
          - "*.py": [ text, diff=python ]
          - "*.py3": [ text, diff=python ]
          - "*.pyw": [ text, diff=python ]
          - "*.pyx": [ text, diff=python ]
          - "*.pyz": [ text, diff=python ]
          - "*.pyi": [ text, diff=python ]
          # ------------------------------------------ Python Binary Files -----------------------------------
          # Note: .db, .p, and .pkl files are associated with the python modules
          # ``pickle``, ``dbm.*``, ``shelve``, ``marshal``, ``anydbm``, and ``bsddb``, among others.
          - "*.db": [ binary ]
          - "*.p": [ binary ]
          - "*.pkl": [ binary ]
          - "*.pickle": [ binary ]
          - "*.pyc": [ binary, export-ignore ]
          - "*.pyo": [ binary, export-ignore ]
          - "*.pyd": [ binary ]
          # ------------------------------------------ Jupyter notebook --------------------------------------
          - "*.ipynb": [ text, eol=lf ]
      gitignore:
        title: The contents of the [`.gitignore`](https://git-scm.com/docs/gitignore) file.
        description: |
          These are definition of files and directories in the repository 
          to be excluded from version control by Git,
          preventing them from being pushed to the remote repository.
          The data must be an array of strings, where each string is a path or glob pattern to ignore.

          :::{admonition} Learn More: `.gitignore`
          :class: dropdown seealso

          - [Default `gitignore` templates](https://github.com/github/gitignore)
          :::
        $ref: https://jsonschemata.repodynamics.com/array/unique-strings
      id:
        title: Repository ID.
        default_auto: retrieved from [GitHub API](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#get-a-repository)
        type: integer
        format: int64
        examples:
          - 1296269
      node_id:
        title: Repository node ID.
        default_auto: retrieved from [GitHub API](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#get-a-repository)
        type: string
        examples:
          - MDEwOlJlcG9zaXRvcnkxMjk2MjY5
      owner:
        description: |
          GitHub username of the repository owner.
        type: string
      name:
        title: Repository name.
        default_auto: retrieved from [GitHub API](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#get-a-repository)
        type: string
        examples:
          - PyPackIT
      full_name:
        title: Repository full name, i.e., `OWNER-USERNAME/REPOSITORY-NAME`.
        default_auto: retrieved from [GitHub API](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#get-a-repository)
        type: string
        examples:
          - RepoDynamics/PyPackIT
      created_at:
        title: Repository creation date.
        default_auto: retrieved from [GitHub API](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#get-a-repository)
        examples:
          - 2024-12-31
        $ref: https://jsonschemata.repodynamics.com/date/yyyy-mm-dd
      default_branch:
        title: Default branch name.
        default_auto: retrieved from [GitHub API](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#get-a-repository)
        type: string
        examples:
          - main
      url:
        title: GitHub repository URLs.
        description: |
          These are all automatically generated URLs for various GitHub repository pages,
          such as the homepage, issues, pull requests, discussions, actions, releases, and security.
          You can use these to link to specific pages in your repository.
        default_auto: retrieved from [GitHub API](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#get-a-repository)
        type: object
        default: { }
        properties:
          home:
            title: Repository homepage.
            auto_default: retrieved from [GitHub API](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#get-a-repository)
            $ref: https://jsonschemata.repodynamics.com/url/https
          tree:
            title: URL of the default branch's tree view.
            default: ${{ repo.url.home }}$/tree/${{ branch.main.name }}$
            examples:
              - "https://github.com/RepoDynamics/PyPackIT/tree/main"
            $ref: https://jsonschemata.repodynamics.com/url/https
          blob:
            title: URL of the default branch's blob view.
            default: ${{ repo.url.home }}$/blob/${{ branch.main.name }}$
            examples:
              - "https://github.com/RepoDynamics/PyPackIT/blob/main"
            $ref: https://jsonschemata.repodynamics.com/url/https
          raw:
            title: URL of the default branch's raw file view.
            default: 'https://raw.githubusercontent.com/${{ repo.full_name }}$/${{ branch.main.name }}$'
            examples:
              - "https://raw.githubusercontent.com/RepoDynamics/PyPackIT/main"
            $ref: https://jsonschemata.repodynamics.com/url/https
          issues:
            title: GitHub Issues URLs.
            type: object
            default: { }
            additionalProperties: false
            properties:
              home:
                title: URL of the repository's GitHub Issues homepage.
                default: ${{ repo.url.home }}$/issues
                examples:
                  - "https://github.com/RepoDynamics/PyPackIT/issues"
                $ref: https://jsonschemata.repodynamics.com/url/https
              chooser:
                title: URL of repository's GitHub Issue template chooser.
                default: ${{ repo.url.issues.home }}$/new/choose
                examples:
                  - "https://github.com/RepoDynamics/PyPackIT/issues/new/choose"
                $ref: https://jsonschemata.repodynamics.com/url/https
              new:
                title: URLs for opening a new issue.
                description: |
                  For each issue form defined in [`issue.forms`](#ccc-issue.forms),
                  a key-value pair is automatically added here,
                  where the key is the [`id`](#ccc-issue.forms[i].id) of the form,
                  and the value is the URL for opening a new issue with that form.
                type: object
                default: |
                  #{{
                    issues_home_url = get("repo.url.issues.home")
                    return {
                      form["id"]: f"{issues_home_url}/new?template={idx + 1:02}_{form["id"]}.yaml"
                      for idx, form in enumerate(get("issue.forms", []))
                    }
                  }}#
                additionalProperties:
                  title: New Issue URL
                  description: URL for opening a new issue with a specific template.
                  examples:
                    - "https://github.com/RepoDynamics/PyPackIT/issues/new?template=bug_report.yaml"
                  $ref: https://jsonschemata.repodynamics.com/url/https
          pulls:
            title: GitHub Pull Requests URLs.
            type: object
            default: { }
            properties:
              home:
                title: URL of the repository's GitHub Pull Requests homepage.
                default: ${{ repo.url.home }}$/pulls
                $ref: https://jsonschemata.repodynamics.com/url/https
          discussions:
            title: GitHub Discussions URLs.
            type: object
            default: { }
            properties:
              home:
                title: URL of the repository's GitHub Discussions homepage.
                default: ${{ repo.url.home }}$/discussions
                examples:
                  - "https://github.com/RepoDynamics/PyPackIT/discussions"
                $ref: https://jsonschemata.repodynamics.com/url/https
              new:
                title: URLs for opening a new discussion.
                description: |
                  For each discussion category in [`discussion.category`](#ccc-discussion.category),
                  a key-value pair is automatically added here,
                  where the key is the same as in `discussion.category` (i.e., the slug of the category name),
                  and the value is the URL for opening a new discussion in that category.
                type: object
                default: |
                  #{{
                    base = get("repo.url.discussions.home")
                    return {
                      slug: f"{base}/new?category={slug}"
                      for slug in get("discussion.category", {}).keys()
                    }
                  }}#
                additionalProperties:
                  title: URL for opening a new discussion in a specific category.
                  examples:
                    - "https://github.com/RepoDynamics/PyPackIT/discussions/new?category=announcements"
                  $ref: https://jsonschemata.repodynamics.com/url/https
          actions:
            title: GitHub Actions URLs.
            type: object
            default: { }
            properties:
              home:
                title: URL of the repository's GitHub Actions homepage.
                default: ${{ repo.url.home }}$/actions
                examples:
                  - "https://github.com/RepoDynamics/PyPackIT/actions"
                $ref: https://jsonschemata.repodynamics.com/url/https
          releases:
            title: GitHub Releases URLs.
            type: object
            default: { }
            properties:
              home:
                title: URL of the repository's GitHub Releases homepage.
                default: ${{ repo.url.home }}$/releases
                examples:
                  - "https://github.com/RepoDynamics/PyPackIT/releases"
                $ref: https://jsonschemata.repodynamics.com/url/https
          security:
            title: GitHub Security URLs.
            type: object
            default: { }
            properties:
              home:
                title: URL of the repository's GitHub Security homepage.
                default: ${{ repo.url.home }}$/security
                examples:
                  - "https://github.com/RepoDynamics/PyPackIT/security"
                $ref: https://jsonschemata.repodynamics.com/url/https
              advisories:
                title: URL of the repository's security advisories.
                default: ${{ repo.url.security.home }}$/advisories
                examples:
                  - "https://github.com/RepoDynamics/PyPackIT/security/advisories"
                $ref: https://jsonschemata.repodynamics.com/url/https
              new_advisory:
                title: URL for creating a new security advisory.
                default: ${{ repo.url.security.advisories }}$/new
                examples:
                  - "https://github.com/RepoDynamics/PyPackIT/security/advisories/new"
                $ref: https://jsonschemata.repodynamics.com/url/https
          commits:
            title: GitHub commits URLs.
            type: object
            default: { }
            properties:
              home:
                title: URL of the repository's commits overview.
                default: ${{ repo.url.home }}$/commits
                examples:
                  - "https://github.com/RepoDynamics/PyPackIT/commits"
                $ref: https://jsonschemata.repodynamics.com/url/https
          deployments:
            type: object
            default: { }
            properties:
              home:
                description: URL of the repository's deployments overview.
                default: ${{ repo.url.home }}$/deployments
                examples:
                  - "https://github.com/RepoDynamics/PyPackIT/deployments"
                $ref: https://jsonschemata.repodynamics.com/url/https
  branch:
    description: |
      Configurations for repository branches.
      
      These include names/prefixes and protection rules for different branch types.
    type: object
    default: { }
    additionalProperties: false
    required: [ main, release, pre, dev, auto ]
    properties:
      main:
        description: Configurations for the default (a.k.a. main, trunk) branch of the repository.
        default:
          name: main
        $ref: https://controlman.repodynamics.com/schema/branch
      release:
        description: Configurations for release branches.
        default:
          name: release/v
        $ref: https://controlman.repodynamics.com/schema/branch
      pre:
        description: Configurations for pre-release branches.
        default:
          name: pre-release/v
        $ref: https://controlman.repodynamics.com/schema/branch
      dev:
        description: Configurations for development branches.
        default:
          name: dev/
        $ref: https://controlman.repodynamics.com/schema/branch
      auto:
        description: Configurations for auto-update branches.
        default:
          name: auto-update/
        $ref: https://controlman.repodynamics.com/schema/branch
  tag:
    description: |
      Configurations for git tags.
    type: object
    default: { }
    additionalProperties: false
    required: [ version ]
    properties:
      version:
        description: Configurations for version tags.
        type: object
        default: { }
        additionalProperties: false
        required: [ prefix, message ]
        properties:
          prefix:
            title: Prefix of version tags.
            description: |
              You must choose a prefix that does not conflict with other tags.
              For example, if you choose `v` (so version tags are `v1.0.0`, `v1.0.1`, etc.),
              then no other tags should start with `v`.
            type: string
            default: v
            examples:
              - version/
              - ver/
              - v/
              - v
          message:
            title: Message
            description: |
              Jinja template for the message of the version tag.
            $ref: https://jsonschemata.repodynamics.com/string/oneline
            default: "Release Version {{ version }}"
            examples:
              - "Release {{ version }}"
              - "v{{ version }}"
      release:
        description: |
          Configurations for release tags.
          Release tags are running tags that always point to the latest release
          of a specific major version.
        type: object
        additionalProperties: false
        required: [ prefix, message ]
        properties:
          prefix:
            description: |
              Prefix of release tags. You must choose a prefix that does not conflict with other tags.
              For example, if you choose `r` (so tags are `r0.1`, `r1`, `r2`, etc.),
              then no other tags should start with `r`.
            type: string
            default: r
            examples:
              - releases/
              - rel/
              - r-
              - 'r '
          message:
            title: Message
            description: |
              Jinja template for the message of the release tag.
            $ref: https://jsonschemata.repodynamics.com/string/oneline
            default: "Latest release ({{ version }}) of major version {{ release }}."
            examples:
              - "Release {{ release }}"
              - "r{{ release }}"
  file:
    description: |
      Configurations for individual files.
    type: object
    additionalProperties: false
    properties:
      duplicate:
        description: |
          Definition of duplicate locations for repository files.
          Files defined here will be duplicated to the specified destinations
          and dynamically kept in sync with the source.
          
          For each duplication, define a key-value pair where the key is an ID,
          and the value is a mapping with keys `source` and `destinations`,
          or `sources` and `destinations`.
        description_examples: |
          - Duplicate a file at `path/to/file.txt` to `path/to/backup/file.txt`:
            ```yaml
            backup_file:
              source: path/to/file.txt
              destinations:
                - path/to/backup/file.txt
            ```
          - Duplicate a file at `path/to/file.txt` to both 
            `path/to/backup1/backup_file.txt` and `path/to/backup2/backup_file.txt`:
            ```yaml
            backup_files:
              source: path/to/file.txt
              destinations:
                - path/to/backup1/backup_file.txt
                - path/to/backup2/backup_file.txt
          - Duplicate multiple files at `path/to/file1.txt` and `path/to/file2.txt` to `path/to/backup_dir`:
            ```yaml
            backup_files:
              sources:
                - path/to/file1.txt
                - path/to/file2.txt
              destinations:
                - path/to/backup_dir
          - Duplicate all text files in `path/to/text_files` to `path/to/backup_dir`:
            ```yaml
            backup_files:
              sources:
                - path/to/text_files/*.txt
              destinations:
                - path/to/backup_dir
            ```
        type: object
        additionalProperties:
          title: Duplicate Files
          type: object
          additionalProperties: false
          required: [ destinations ]
          properties:
            source:
              description: |
                Path to a single file to be duplicated.
              $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
            sources:
              description: |
                Paths or glob patterns for multiple files to be duplicated.
              type: array
              uniqueItems: true
              items:
                $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
            destinations:
              description: |
                  Paths to the locations where the file(s) should be duplicated.
                  When used with `source`, each path must be a full path to a file (including the filename).
                  When used with `sources`, each path must be a directory path,
                  where all source files are copied to, keeping their original filenames.
              type: array
              uniqueItems: true
              minItems: 1
              items:
                $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
          oneOf:
            - required: [ source ]
            - required: [ sources ]
  # CI
  control:
    description: |
      Configurations for the project's control center.
    type: object
    additionalProperties: false
    required: [ path, cache ]
    default: { }
    properties:
      path:
        title: Path to the control center directory.
        $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
        default: .control
      cache:
        title: Settings for cached data.
        description: |
          These include configuration extensions downloaded from external URLs
          and data obtained through web-APIs.

          :::{admonition} Not Extensible
          :class: attention

          These configurations are not extensible, 
          as they are used to define extensions and their caching settings. 
          :::

          :::{admonition} Local Override
          :class: tip dropdown

          When working with a local clone of the repository on your computer,
          you can override these configurations 
          by creating a `.local_cc_config.yaml` file with the same syntax
          in the root of the repository.
          This file is automatically added to the `.gitignore` file
          and thus will not be tracked by Git 
          or pushed to the remote repository.
          This allows you to maintain a local caching configuration 
          without affecting the remote repository.
          :::
        type: object
        additionalProperties: false
        default: { }
        required: [ retention_hours ]
        properties:
          retention_hours:
            title: Number of hours to keep different cached data.
            description: |
              After the specified duration,
              the cached data is considered stale
              and will be automatically synced with the source.
            default: { }
            $ref: https://controlman.repodynamics.com/schema/cache-retention-hours
      url:
        type: object
        description: URLs of project configuration resources.
        additionalProperties: false
        default: { }
        properties:
          metadata:
            title: URL of the project's metadata file.
            $ref: https://jsonschemata.repodynamics.com/url/https
            default: ${{ repo.url.raw }}$/.github/.repodynamics/metadata.json
          variables:
            title: URL of the project's variables file.
            $ref: https://jsonschemata.repodynamics.com/url/https
            default: ${{ repo.url.raw }}$/.github/.repodynamics/variables.json
          changelog:
            title: URL of the project's changelog file.
            $ref: https://jsonschemata.repodynamics.com/url/https
            default: ${{ repo.url.raw }}$/.github/.repodynamics/changelog.json
  workflow:
    description: |
      Configurations for the project's workflows
      and Continuous pipelines.
    type: object
    default: { }
    additionalProperties: false
    properties:
      web:
        type: object
        additionalProperties: false
        required: [ name, artifact, env, action ]
        default: { }
        properties:
          name:
            description: |
              Name of the GitHub workflow job.
              Note that each workflow job must have a unique name.
            $ref: https://jsonschemata.repodynamics.com/string/oneline
            default: Web (v{{ version }})
          artifact:
            description: Configuration for build artifacts.
            type: object
            additionalProperties: false
            default: { }
            properties:
              build:
                description: Sphinx-build artifact.
                $ref: https://controlman.repodynamics.com/schema/workflow-artifact
                default:
                  name: Website - v{{ version }}
              pages:
                description: GitHub-Pages artifact.
                $ref: https://controlman.repodynamics.com/schema/workflow-artifact
                default:
                  name: Website - v{{ version }} - GH-Pages
          env:
            description: Configuration for the GitHub deployment environment.
            $ref: https://controlman.repodynamics.com/schema/workflow-env
            default:
              name: GitHub Pages
              url: ${{ web.url.home }}$
          action:
            description: Type of action for build and deployment tasks.
            type: object
            additionalProperties: false
            default: { }
            properties:
              build:
                type: string
                enum: [ auto, disabled ]
                default: auto
              deploy:
                type: string
                enum: [ auto, disabled ]
                default: auto
      lint:
        type: object
        default: { }
        properties:
          name:
            type: string
            default: Lint ({{ pkg.name }} v{{ version }})
          action:
            description: Type of action for lint tasks.
            type: string
            enum: [ auto, disabled ]
            default: auto
      test:
        type: object
        default: { }
        properties:
          name:
            type: string
            default: Test ({{ source }} - v{{ version }})
          task_name:
            type: string
            default: 'py{{ python }} | {{ os }}'
          artifact:
            type: object
            additionalProperties: false
            default: { }
            properties:
              report:
                $ref: https://controlman.repodynamics.com/schema/workflow-artifact
                default:
                  name: Test Report - {{ source }} - v{{ version }} - py{{ python }} - {{ os }}
                  merge:
                    name: Test Reports - {{ source }} - v{{ version }}
                    pattern: Test Report -*
          action:
            description: Type of action for lint tasks.
            type: string
            enum: [ auto, disabled ]
            default: auto
      build:
        type: object
        default: { }
        properties:
          name:
            type: string
            default: Build ({{ pkg.name }} v{{ version }})
          artifact:
            type: object
            additionalProperties: false
            default: { }
            properties:
              sdist:
                $ref: https://controlman.repodynamics.com/schema/workflow-artifact
                default:
                  name: '{{ pkg.name }} v{{ version }} - sdist'
              wheel:
                $ref: https://controlman.repodynamics.com/schema/workflow-artifact
                default:
                  name: '{{ pkg.name }} v{{ version }} - wheel - {{ python }} - {{ platform }}'
                  merge:
                    name: '{{ pkg.name }} v{{ version }} - wheels'
                    pattern: '{{ pkg.name }} v{{ version }} - wheel - *'
              conda:
                $ref: https://controlman.repodynamics.com/schema/workflow-artifact
                default:
                  name: '{{ pkg.name }} v{{ version }} - conda - {{ python }} - {{ platform }}'
                  merge:
                    name: '{{ pkg.name }} v{{ version }} - conda'
                    pattern: '{{ pkg.name }} v{{ version }} - conda - *'
              readme:
                $ref: https://controlman.repodynamics.com/schema/workflow-artifact
                default:
                  name: '{{ pkg.name }} v{{ version }} - README'
          action:
            description: Type of action for lint tasks.
            type: string
            enum: [ auto, disabled ]
            default: auto
      binder:
        type: object
        additionalProperties: false
        required: [ name, env, action, path, index ]
        properties:
          name:
            description: |
              Name of the GitHub workflow job.
              Note that each workflow job must have a unique name.
            $ref: https://jsonschemata.repodynamics.com/string/oneline
            default: Docker (v{{ version }})
          artifact:
            description: Configuration for docker artifacts.
            type: object
            additionalProperties: false
            default: { }
            properties:
              dockerfile:
                description: Dockerfile artifact.
                $ref: https://controlman.repodynamics.com/schema/workflow-artifact
                default:
                  name: Dockerfile - v{{ version }}
          env:
            description: Configuration for the GitHub deployment environment.
            $ref: https://controlman.repodynamics.com/schema/workflow-env
            default:
              name: GitHub Container Registry
              url: ${{ ..index.url.home }}$
          action:
            description: Type of action for build and deployment tasks.
            type: object
            additionalProperties: false
            default: { }
            properties:
              build:
                type: string
                enum: [ auto, disabled ]
                default: auto
              deploy:
                type: string
                enum: [ auto, disabled ]
                default: auto
          path:
            type: object
            additionalProperties: false
            required: [ config ]
            properties:
              config:
                description: |
                  Path to the configuration directory
                  containing the environment files to build the docker image.
                  Note that this path cannot be the root directory, `.binder`, or `binder`.
                default: .docker
                $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
              dockerfile:
                description: |
                  Path to configuration directory
                  containing the Dockerfile.
                  Note that this path can only be the root directory, `.binder`, or `binder`,
                  as these are the only locations recognized by `mybinder`.
                type: string
                enum: [ ".", ".binder", "binder" ]
            if:
              required: [ dockerfile ]
            then:
              not:
                properties:
                  config:
                    enum: [ ".", ".binder", "binder" ]
            else:
              properties:
                config:
                  enum: [ ".", ".binder", "binder" ]
          image:
            description: |
              Refs:
              - https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry#labelling-container-images
              - https://github.com/opencontainers/image-spec/blob/main/annotations.md#pre-defined-annotation-keys
            type: object
            properties:
              label:
                type: object
                default:
                  org.opencontainers.image.source: ${{ repo.url.home }}$
                  org.opencontainers.image.description: '#{{ return get("title", get("name")) }}#'
                  org.opencontainers.image.licenses: '#{{ return get("license.expression") }}#'
                  org.opencontainers.image.created: '{{ now.isoformat() }}'
                  org.opencontainers.image.version: '{{ version }}'
                  org.opencontainers.image.title: '${{ name }}$ {{ version }}'
                additionalProperties:
                  type: string
              test_script:
                type: string
          index:
            type: object
            additionalProperties: false
            required: [ registry, namespace, name, username ]
            default: { }
            properties:
              registry:
                type: string
                default: ghcr.io
              username:
                type: string
                default: ${{ repo.owner }}$
              namespace:
                type: string
                default: ${{ repo.owner }}$
              name:
                type: string
                default: ${{ repo.name }}$
              url:
                type: object
                default: { }
                properties:
                  home:
                    $ref: https://jsonschemata.repodynamics.com/url/http-ftp-sftp
                    default: ${{ repo.url.home }}$/pkgs/container/${{ ..name }}$
      publish:
        type: object
        additionalProperties: false
        properties:
          pypi:
            $ref: https://controlman.repodynamics.com/schema/workflow-publish-pypi
          testpypi:
            $ref: https://controlman.repodynamics.com/schema/workflow-publish-pypi
          github:
            default: { }
            unevaluatedProperties: false
            allOf:
              - $ref: https://controlman.repodynamics.com/schema/workflow-publish
              - required: [ release, action ]
                properties:
                  release:
                    type: object
                    additionalProperties: false
                    required: [ name ]
                    default: { }
                    properties:
                      name:
                        type: string
                        default: >-
                          ${{ name }}$ #{{ return changelog.current_public.version }}#
                      body:
                        oneOf:
                          - type: string
                          - type: object
                          - type: array
                      draft:
                        description: |
                          Whether to create a draft release instead of a published one.
                        type: boolean
                        default: false
                      discussion_category_name:
                        description: |
                          Slug of an existing discussion category in the repository.
                          If specified, a discussion of the specified category is created
                          and linked to the release.
                        type: string
                        default: announcements
                      order:
                        description: |
                          Strategy to determine the latest release
                        type: string
                        enum: [ version, date ]
                        default: version
                  asset:
                    type: object
                    additionalProperties:
                      $ref: https://controlman.repodynamics.com/schema/release-asset
                  action:
                    type: string
                    enum: [ auto, disabled ]
                    default: auto
          zenodo:
            $ref: https://controlman.repodynamics.com/schema/workflow-publish-zenodo
          zenodo_sandbox:
            $ref: https://controlman.repodynamics.com/schema/workflow-publish-zenodo
          anaconda:
            description: Workflow configurations for publishing on an Anaconda channel.
            unevaluatedProperties: false
            allOf:
              - $ref: https://controlman.repodynamics.com/schema/workflow-publish
              - required: [ index, action ]
                properties:
                  index:
                    type: object
                    additionalProperties: false
                    required: [ channel ]
                    properties:
                      channel:
                        type: string
                  action:
                    description: Type of action for the main package and its test-suite.
                    type: object
                    default: { }
                    properties:
                      pkg:
                        type: string
                        enum: [ auto, disabled ]
                        default: auto
                      test:
                        type: string
                        enum: [ auto, disabled ]
                        default: auto
      schedule:
        description: |
          Configurations for scheduled jobs
          such as {term}`CCA`, {term}`CR`, {term}`CT`, and {term}`CM`.
          These are the Continuous pipelines triggered by the GitHub Actions
          [`schedule`](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule)
          event. For each job, define a key-value pair where the key is an ID for the job.
        type: object
        additionalProperties:
          title: Scheduled Job
          description: |
            Definition of a scheduled workflow job.
          type: object
          additionalProperties: false
          required: [ cron, job ]
          anyOf:
            - required: [ branch_types ]
            - required: [ branch_regex ]
          properties:
            cron:
              title: Crontab job
              description: |
                The [POSIX cron expression](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07)
                of the task's scheduled time.
                This must match one of the `cron` entries of the project's main workflow,
                as defined in the `.github/workflows/main.yaml` file under the
                [`on.schedule`](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onschedule) key.
              $ref: https://jsonschemata.repodynamics.com/string/oneline
            branch_types:
              description: |
                The branch types that trigger the job.
              type: array
              minItems: 1
              uniqueItems: true
              items:
                type: string
                enum: [ main, release, pre, dev ]
            branch_regex:
              description: |
                A regular expression that matches the branch names that trigger the job.
                You can either use this or `branch_types` to define the branches.
                If both are defined, the job will be triggered by branches that match both conditions.
              type: string
            job:
              description: |
                Jobs to be executed on the scheduled time, and their configurations.
              type: object
              additionalProperties: false
              minProperties: 1
              properties:
                sync:
                  description: |
                      Configurations for the Continuous Configuration Automation (CCA) pipeline.
                  type: object
                  additionalProperties: false
                  required: [ action ]
                  properties:
                    action:
                      description: |
                        - only `report` the results,
                        - report the results, apply changes (if any) in a new branch, and submit a `pull` request,
                        - report the results, and directly `commit` the changes (if any) to the target branch.
                        - report the results, and `amend` the changes (if any) to the target branch.
                      type: string
                      enum: [ report, issue, pull, commit, amend ]
                test:
                  description: |
                    Configurations for the Continuous Testing (CT) pipeline.
                  type: object
                  additionalProperties: false
                  required: [ action ]
                  properties:
                    action:
                      type: string
                      enum: [ report, issue ]
                refactor:
                  description: |
                      Configurations for the Continuous Refactoring (CR) pipeline.
                  type: object
                  additionalProperties: false
                  required: [ action ]
                  properties:
                    action:
                      type: string
                      enum: [ report, issue, pull, commit, amend ]
                lint:
                  description: |
                      Configurations for linting, security checks, and other code analysis tasks.
                  type: object
                  additionalProperties: false
                  required: [ action ]
                  properties:
                    action:
                      type: string
                      enum: [ report, issue ]
                announcement_expiry:
                  type: object
                  additionalProperties: false
                  required: [ action ]
                  properties:
                    action:
                      type: string
                      enum: [ report, issue, pull, commit, amend ]
                website:
                  description: |
                    Configurations for the website pipeline.
                  type: object
                  additionalProperties: false
                  required: [ action ]
                  properties:
                    action:
                      type: string
                      enum: [ build, deploy ]
  tool:
    description: |
      Configurations for tools used in the development workflow.
      
      These include pre-integrated tools as well as any additional tools
      that you can add to the project's workflow.
    type: object
    additionalProperties:
      title: Additional tools
      description: |
        Configurations for additional tools that can be added to the project's workflow.
      $ref: https://controlman.repodynamics.com/schema/tool
    properties:
      pre-commit:
        title: Pre-commit hooks.
        description: |
          [Pre-commit](https://pre-commit.com/) is a framework for managing and maintaining
          multi-language hooks.
          These configurations define the pre-commit hooks to be used in the project.
        $ref: https://controlman.repodynamics.com/schema/tool
      codecov:
        title: Codecov test coverage reporting.
        description: |
          [Codecov](https://about.codecov.io/) is an online platform
          that provides code coverage metrics for your project.
          After [signing up on Codecov](https://docs.codecov.com/docs/quick-start),
          these configurations will automatically control the generation of coverage reports
          and the submission of these reports to Codecov.
        type: object
        additionalProperties: false
        properties:
          config:
            title: Configurations for CodeCov.
            type: object
            additionalProperties: false
            properties:
              file:
                title: Configuration file.
                description: |
                  This will be used by CodeCov to generate coverage reports.
                  Learn more about the [Codecov YAML configuration file](https://docs.codecov.com/docs/codecov-yaml),
                type: object
                additionalProperties: false
                properties:
                  type:
                    title: Type of the configuration file.
                    description: |
                      CodeCov only supports YAML configuration files.
                    const: yaml
                    default: yaml
                  path:
                    title: Path to the configuration file.
                    description: |
                      CodeCov only looks for a `codecov.yml` or `.codecov.yml` file
                      either in the root of the repository, or in `.github/` and `dev/` directories.
                      (cf. [CodeCov documentation](https://docs.codecov.com/docs/codecov-yaml#can-i-name-the-file-codecovyml)).
                    type: string
                    pattern: ^(.github/|dev/)?.?codecov.yml$
                    default: .github/.codecov.yml
                  content:
                    title: Configurations for CodeCov.
                    description: |
                      For a full reference, see the
                      [Codecov YAML reference](https://docs.codecov.com/docs/codecovyml-reference).
      readthedocs:
        title: ReadTheDocs website hosting.
        description: |
          In addition to GitHub Pages, you can also host your project's documentation on ReadTheDocs.
          This includes some manual steps to set up the website on ReadTheDocs,
          but the rest of the process, including build configurations and preview links,
          can be controlled through these configurations.
        type: object
        additionalProperties: false
        required: [ config ]
        properties:
          config:
            title: Configurations for the project's website on ReadTheDocs.
            type: object
            additionalProperties: false
            required: [ file, workflow ]
            properties:
              file:
                title: Configuration file.
                description: |
                  This will be used by ReadTheDocs to build the website on readthedocs.io.
                properties:
                  type:
                    title: Type of the configuration file.
                    description: |
                      ReadTheDocs only supports YAML configuration files.
                    const: yaml
                    default: yaml
                  path:
                    title: Path to the configuration file.
                    description: |
                      By default, [ReadtheDocs](https://docs.readthedocs.io/en/stable/config-file/index.html#where-to-put-your-configuration-file)
                      only looks for a `.readthedocs.yaml` file in the root of the repository.
                      However, you can [change this manually](https://docs.readthedocs.io/en/stable/guides/setup/monorepo.html#how-to-use-a-readthedocs-yaml-file-in-a-sub-folder)
                      by setting another path on the ReadTheDocs website,
                      and then specifying that path here.
                    type: string
                    default: .readthedocs.yaml
                    examples:
                      - .github/.readthedocs.yaml
                  content:
                    title: Config
                    description: |
                      Configuration settings for the ReadTheDocs website.
                      See also: https://docs.readthedocs.io/en/stable/config-file/v2.html
                    type: object
              workflow:
                title: Workflow configurations for the ReadTheDocs website.
                description: |
                  These are used to create website preview links for pull requests.
                type: object
                additionalProperties: false
                required: [ name, platform, version_scheme, language ]
                properties:
                  name:
                    title: Name of the project on ReadTheDocs.
                    description: |
                      This is the slug name of the project.
                    type: string
                    default: ${{ repo.name }}$
                  platform:
                    title: ReadTheDocs hosting platform type.
                    type: string
                    enum: [ community, business ]
                    default: community
                  version_scheme:
                    title: Versioning scheme of the website.
                    description: |
                      See [ReadTheDocs documentation](https://docs.readthedocs.io/en/stable/versioning-schemes.html)
                      for more information.
                    type: object
                    default: { }
                    additionalProperties: false
                    required: [ single_version, translation ]
                    properties:
                      single_version:
                        title: Whether the website has a single version (vs. multiple versions).
                        type: boolean
                        default: false
                      translation:
                        title: Whether the website supports multiple languages.
                        type: boolean
                        default: false
                  language:
                    title: Language of the website.
                    type: string
                    default: en
  local:
    description: |
      Configurations for local clones of the project.
      
      From the seven [main directories](/manual/fundamentals/structure/index.md) in your repository
      that |{{ccc.name}}| manages and works with,
      the [GitHub directory](/manual/fundamentals/structure/github.md)
      and the [Docs directory](/manual/fundamentals/structure/docs.md)
      have fixed paths according to GitHub requirements,
      while the path to the other five directories can be customized.
      As discussed before,
      [Customizing the path to the control center directory](/manual/control/structure/index.md#location)
      requires a configuration file outside the control center directory.
      The path to the remaining four directories,
      i.e., the [source](/manual/fundamentals/structure/source.md),
      [tests](/manual/fundamentals/structure/tests.md),
      [website](/manual/fundamentals/structure/website.md), and
      [local](/manual/fundamentals/structure/local.md) directories,
      along with the paths to subdirectories of the local directory,
      can be customized using the `path.yaml` file
      in your repository's control center, as described in this section.

      All paths are relative to the root of the repository.

      The `local` key accepts an object with
      keys `root`, `cache`, and `report`. The `root` key must be set to a string defining
      the path to the local directory itself. The `cache` and `report` keys
      correspond to the cache and report subdirectories of the local directory;
      they accept an object with a key `root` that must be set to a string defining
      the path to the corresponding subdirectory, relative to the root of the local directory.
      In addition, they each define paths to other subdirectories of the corresponding cache/report subdirectory,
      each used for a specific tool. By default, the following keys are defined
      for both the `cache` and `report` subdirectories: `repodynamics`, `coverage`, `mypy`, `pylint`,
      `pytest`, and `ruff`. Each of these keys must be set to a string defining the path
      to the cache/report subdirectory for that tool,
      relative to the root of the corresponding cache/report subdirectory.

      You can also add other custom keys under `dir.local.cache` and `dir.local.report`
      for other tools that you use, and reference them in the corresponding configuration files.
      Note that you do not have to specify all keys in the `path.yaml` file;
      for all keys that are not specified, |{{ccc.name}}| will use the default values.
      Also, you can entirely omit the `path.yaml` file if you do not want to customize any paths.


      For example, if you only want to
      - change the path of the source directory to `my_source_directory`,
      - change the path of the cache subdirectory to `my_cache_directory`, and
      - add a new subdirectory `my_tool_subdirectory` under the report subdirectory
        for the tool `my_tool`,

      :::{admonition} Important Considerations
      :class: important

      - You must also manually create/rename/move the corresponding directories to match the set path,
        in the same commit where you create/modify/delete the `path.yaml` file.
      - All four main directories must be orthogonal to all other
        [main directories](/manual/fundamentals/structure/index.md) in your repository,
        meaning that they cannot be a subdirectory of any other main directory.
      :::

      |{{ccc.name}}| automatically manages a variety of files in your repository's main directories,
      and performs a number of tasks that require access to these files.
      For example, to run your tests and build your website, |{{ccc.name}}| needs to know
      the path to tests and website directories. In addition, these paths are used as
      substitutions in a number of other configuration files for your project,
      so that you do not have to manually update these files when you change a path.
      The following are just a few examples of configuration files where these paths are used:

      :::{code-block} toml
      :caption: 🗂 `package_python/build.toml`
      [tool.setuptools.packages.find]
      where = [ "${‎{ dir.pkg.source }}$" ]

      [tool.versioningit.onbuild]
      source-file = "${‎{ dir.pkg.source }}$/${‎{ package.name }}$/__init__.py"
      :::

      :::{code-block} toml
      :caption: 🗂 `package_python/tools/mypy.toml`
      [tool.mypy]
      cache_dir = "${‎{ dir.local.cache.mypy }}$"
      any_exprs_report = "${‎{ dir.local.report.mypy }}$"
      html_report = "${‎{ dir.local.report.mypy }}$"
      linecount_report = "${‎{ dir.local.report.mypy }}$"
      linecoverage_report = "${‎{ dir.local.report.mypy }}$"
      lineprecision_report = "${‎{ dir.local.report.mypy }}$"
      txt_report = "${‎{ dir.local.report.mypy }}$"
      :::


      :::{code-block} toml
      :caption: 🗂 `package_python/tools/ruff.toml`
      [tool.ruff]
      cache-dir = "${‎{ dir.local.cache.ruff }}$"
      :::

      :::{code-block} yaml
      :caption: 🗂 `ui/web.yaml`
      readthedocs:
        conda:
          environment: ${‎{ dir.web }}$/requirements.yaml
        sphinx:
          configuration: ${‎{ dir.web }}$/source/conf.py
      :::

      :::{code-block} text
      📦 <REPOSITORY-ROOT>
       ┃
       ┗ 🗂 .local
         ┃
         ┣ 🗂 cache
         ┃ ┃
         ┃ ┣ 🗂 coverage
         ┃ ┃
         ┃ ┣ 🗂 mypy
         ┃ ┃
         ┃ ┣ 🗂 pylint
         ┃ ┃
         ┃ ┣ 🗂 pytest
         ┃ ┃
         ┃ ┣ 🗂 repodynamics
         ┃ ┃
         ┃ ┗ 🗂 ruff
         ┃
         ┗ 🗂 report
           ┃
           ┣ 🗂 coverage
           ┃
           ┣ 🗂 mypy
           ┃
           ┣ 🗂 pylint
           ┃
           ┣ 🗂 pytest
           ┃
           ┣ 🗂 repodynamics
           ┃
           ┗ 🗂 ruff
      :::
    type: object
    additionalProperties: false
    default: { }
    properties:
      cache:
        type: object
        default: { }
        additionalProperties: false
        properties:
          path:
            title: Path to the local cache directory.
            $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
            default: .local/cache
      report:
        type: object
        default: { }
        additionalProperties: false
        properties:
          path:
            title: Path to the local report directory.
            $ref: https://jsonschemata.repodynamics.com/path/posix/absolute-from-cwd
            default: .local/report
  # Auto
  project:
    description: |
      Automatically generated data about the project.
      
      These are all read-only data,
      automatically generated during synchronization.
    readOnly: true
    type: object
    additionalProperties: true
    properties:
      file:
        type: object
        additionalProperties: false
        properties:
          config:
            type: object
            properties:
              meta:
                type: string
              license:
                type: string
              citation:
                type: string
              funding:
                type: string
              codeowners:
                type: string
              gitattributes:
                type: string
              gitignore:
                type: string
              issue_chooser:
                type: string
          web_config:
            type: object
            properties:
              env_conda:
                title: Website build environment file for conda.
                type: string
              env_pip:
                title: Website build environment file for pip.
                type: string
          tool_config:
            type: object
            additionalProperties:
              type: string
          tool_env_conda:
            type: object
            additionalProperties:
              type: string
          tool_env_pip:
            type: object
            additionalProperties:
              type: string
          discussion_form:
            type: object
            additionalProperties:
              type: string
          issue_form:
            type: object
            additionalProperties:
              type: string
          pull_template:
            type: object
            additionalProperties:
              type: string
          pkg_config:
            $ref: https://controlman.repodynamics.com/schema/dynamicfile-pkg
          test_config:
            $ref: https://controlman.repodynamics.com/schema/dynamicfile-pkg
          pkg_source:
            type: object
            additionalProperties:
              type: string
          test_source:
            type: object
            additionalProperties:
              type: string
          document:
            type: object
            additionalProperties:
              type: string
