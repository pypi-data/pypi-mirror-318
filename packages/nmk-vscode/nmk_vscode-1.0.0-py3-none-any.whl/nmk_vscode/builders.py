"""
Python module for **nmk-vscode** plugin builders.
"""

import json
from pathlib import Path

from nmk_base.common import TemplateBuilder


class JsonTemplateBuilder(TemplateBuilder):
    """
    Generic build logic to generate VSCode json config files
    """

    def contribute(self, settings: dict, update: dict):
        """
        Merge settings from **update** dictionary into **settings** one.
        Merge logic for existing settings is:

        * for lists: new settings are appended after existing ones
        * for dictionaries: existing dictionary is updated with new one content
        * for other types: existing values are replaces with new ones

        :param settings: Settings dictionary to be updated
        :param settings: Update dictionary to be merged into the existing one
        """

        for k, v in update.items():
            # Already exists in target model?
            if k in settings:
                # List: extend
                if isinstance(v, list):
                    settings[k].extend(v)
                # Map: update
                elif isinstance(v, dict):
                    settings[k].update(v)
                # Otherwise: replace
                else:
                    settings[k] = v
            else:
                # New key
                settings[k] = v

    def build_json(self, files: list[str], items: dict = None, keywords: dict = None):
        """
        Generate target json file by merging provided files, then items (if any)

        :param files: List of input json files to be rendered (as Jinja templates) then merged
        :param items: Dictionary to be merged in generated json file
        :param keywords: Keywords for Jinja rendering
        """

        # Iterate on files to merge them
        json_model = {}
        for file_p in map(Path, files):
            self.logger.debug(f"Loading json model fragment: {file_p}")
            self.contribute(json_model, json.loads(self.render_template(file_p, {} if keywords is None else keywords)))

        # Post-process with raw provided items (if any)
        if items is not None:
            self.logger.debug(f"Update json model from config: {items}")
            self.contribute(json_model, items)

        # Generate json_model file (with comment)
        output_lines = json.dumps(json_model, indent=4).splitlines(keepends=True)
        output_lines.insert(1, "    // !!! File generated by nmk-vscode plugin, don't edit !!!\n")
        with self.main_output.open("w") as f:
            f.writelines(output_lines)


class SettingsBuilder(JsonTemplateBuilder):
    """
    Builder for **vs.settings** task
    """

    def build(self, files: list[str], items: dict):
        """
        Build logic: merge provided settings files and items

        :param files: Settings files to be merged
        :param items: Settings items to be merged
        """
        self.build_json(files, items)


class LaunchBuilder(JsonTemplateBuilder):
    """
    Builder for **vs.launch** task
    """

    def build(self, files: list[str]):
        """
        Build logic: merge provided launch configuration files

        :param files: Launch configuration files to be merged
        """
        self.build_json(files)


class TasksBuilder(JsonTemplateBuilder):
    """
    Builder for **vs.tasks** task
    """

    def build(self, files: list[str], task_template: str, nmk_tasks: dict, shell_tasks: dict, default_task: str):
        """
        Build logic: merge provided automated tasks files, then add generated nmk automated tasks

        :param files: Automated tasks files to be merged
        :param task_template: Path to Jinja template for nmk tasks
        :param nmk_tasks: Dictionary for nmk tasks definitions
        :param shell_tasks: Dictionary for shell tasks definitions
        :param default_task: Name of task to be declared as the default one in generated file
        """

        # Handle default values in nmk tasks
        for props in nmk_tasks.values():
            props["group"] = props.get("group", "build")
            props["runOn"] = props.get("runOn", "default")

        # Build with keyword
        self.build_json([task_template] + files, keywords={"nmkTasks": nmk_tasks, "shellTasks": shell_tasks, "defaultTask": default_task})


class ExtensionsBuilder(JsonTemplateBuilder):
    """
    Builder for **vs.extensions** task
    """

    def build(self, names: list[str]):
        """
        Build logic: generated recommended extensions file from provided names

        :param names: Extension names to be added in the generated file
        """
        self.build_json([], {"recommendations": names})
