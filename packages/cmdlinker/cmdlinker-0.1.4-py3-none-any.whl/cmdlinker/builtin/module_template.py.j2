from loguru import logger
from typing import Union, Text
from cmdlinker.builtin.exception import CmdLinkerMutexException,CmdLinkerMulMutexException
from cmdlinker.builtin.ssh_utils import SSHClient
from cmdlinker.builtin.shell_utils import ShellClient
{% set entry_params = data.entry_params_meta %}

class Cmds:
    def __init__(self):
        self.index = 0
        self.CMD_LIST = []


class Runner:

    def __init__(self):
        self._mutexs = []
        self._gcs = []
        self._not_mutexs = []
        self.pre: Runner = object
        self.root: Runner = object
        self.next: Union[Runner] = object
        self.main_cmd: Text = None
        self.cmds: Cmds = None
        self.ssh_client: SSHClient = None
        self.sudo: bool = {{entry_params.sudo}}
        self.timeout: int = {{entry_params.timeout}}

    def _exclude(self, cmd_obj):
        if not cmd_obj.mark:
            logger.debug(f"命令对象：{cmd_obj.__class__.__name__}未被使用")
            return False
        else:
            return True

    def _get_execute_cmd(self, cmd_obj):
        if cmd_obj.need_value:
            return f"{cmd_obj.meta_data['original_cmd']} {cmd_obj.value}"
        else:
            return f"{cmd_obj.meta_data['original_cmd']}"

    def _get_log_desc(self):
        if self.pre == self.root:
            log_desc = "子"
        elif self.pre is None and self.root == self:
            log_desc = "根"
        else:
            log_desc = "父"
        return log_desc

    def cmd_checker(self):
        log_desc = self._get_log_desc()
        logger.info("==" * 20 + f"开启{log_desc}命令{self.__class__.__name__}合法性检查" + "==" * 20)
        for cmd_obj_str in vars(self).keys():
            cmd_obj = getattr(self, cmd_obj_str)
            if isinstance(cmd_obj, BaseCmd):
                if cmd_obj_str == "next":
                    continue
                if not self._exclude(cmd_obj):
                    continue
                if cmd_obj.mutex:
                    self._mutexs.append(cmd_obj)
                    logger.debug(f"{self.main_cmd}添加互斥对象：{cmd_obj},最新互斥对象列表：")
                else:
                    self._not_mutexs.append(cmd_obj)
                    logger.debug(f"{self.main_cmd}添加非互斥对象：{cmd_obj},最新非互斥对象列表：{self._not_mutexs}")
        if len(self._mutexs) > 1:
            raise CmdLinkerMulMutexException(self.__class__.__name__, self._mutexs)
        if len(self._mutexs) != 0 and len(self._not_mutexs) != 0:
            raise CmdLinkerMutexException(self.__class__.__name__, self._mutexs, self._not_mutexs)
        if self.pre == self.root:
            logger.debug(f"启用命令对象{self.__class__.__name__} 根命令: {self.root.__class__.__name__} 检查")
            self.pre.cmd_checker()
        elif self.pre is None and self.root == self:
            pass
        else:
            logger.debug(f"启用命令对象{self.__class__.__name__}父命令: {self.pre.__class__.__name__} 检查")
            self.pre.cmd_checker()
        self._not_mutexs = []
        self._mutexs = []
        logger.info("==" * 20 + f"{log_desc}命令{self.__class__.__name__}合法性检查通过" + "==" * 20)

    def runner(self):
        self.cmd_checker()
        cmd = self.exec_cmd()
        self.cmds.CMD_LIST = []
        return self.ssh_client.run_cmd(cmd, timeout=self.timeout)

    def collector(self):
        return self.cmds.CMD_LIST.sort(key=lambda cmd_obj: cmd_obj.index)

    def exec_cmd(self):
        self.cmds.CMD_LIST.sort(key=lambda cmd_obj: cmd_obj.index)
        cmd_list = [self.main_cmd] + [self._get_execute_cmd(cmd) for cmd in self.cmds.CMD_LIST]
        if self.sudo:
            cmd_list.insert(0, "sudo")
        logger.info(f"执行命令列表：{cmd_list}")
        cmd = " ".join(cmd_list)
        return cmd


class BaseCmd(Runner):
    def __init__(self):
        super().__init__()
        self.cmds: Cmds = None
        self.meta_data = None
        self.mutex = None
        self.need_value = None
        self.has_child_cmd = None
        self.gc = None
        self.child_cmd = None
        self.default_value = None
        self.value = None
        self.mark = None
        self.index = None
        self.level = 0
        self._mutexs = []
        self._gcs = []
        self._not_mutexs = []
        self.main_cmd = "{{entry_params.entry}}"
        self.pre: object = object
        self.root: object = object
        self.next: Union[object] = object
        {% if entry_params.mode =="SSH" %}self.ssh_client: SSHClient = None{% else %}self.shell_client: ShellClient = None{% endif %}

{% for sub_param in data.sub_params_meta %}
class {{sub_param.mapping_name.title()}}(BaseCmd):
    def __init__(self, root_obj, pre_obj):
        super().__init__()
        self.pre: {{sub_param.parent_cmd.title()}} = pre_obj
        self.root: {{sub_param.root_cmd.title()}} = root_obj
        self.next: Union[{{sub_param.mapping_name.title()}}] = self
        self.meta_data = {{sub_param}}
        self.level = 2
        self.mutex = {{sub_param.mutex}}
        self.need_value = {{sub_param.value}}
        self.has_child_cmd = {{sub_param.has_child_cmd}}
        self.child_cmds = {{sub_param.child_cmds}}
        self.gc = False
        {% for child_cmd in sub_param.child_cmds %}self._{{child_cmd}}: {{child_cmd.title()}} = {{child_cmd.title()}}(root_obj, self){% endfor %}
        self.default_value = {% if sub_param.default is string %}"{{sub_param.default}}"{% else %} {{sub_param.default}} {% endif %}
        self.value = self.default_value
        self.mark = False
    {% for child_cmd in sub_param.child_cmds %}
    {% set cmd_name = child_cmd.name %}
    def _set_{{cmd_name}}(self{% if child_cmd.value %}, value=None{% endif %}):
        self._{{cmd_name}}.mark = True
        self._{{cmd_name}}.index = self.cmds.index
        self.cmds.index += 1
        {% if entry_params.mode =="SSH" %}
        self._l.ssh_client = self.ssh_client
        {% else %}
        self._l.shell_client = self.shell_client
        {% endif %}
        self._{{cmd_name}}.cmds = self.cmds
        self.next = self._{{cmd_name}}
        self.cmds.CMD_LIST.append(self._{{cmd_name}})
        {% if child_cmd.value %}
        if self._{{child_cmd.name}}.need_value:
            self._{{child_cmd.name}}.value = value
        {% endif %}

    def tset_{{cmd_name}}(self{% if child_cmd.value %}, value=None{% endif %}):
        """
        传递TRANSMIT模式，可以获取子命令对象，可通过，root/pre/next，控制命令对象的根/父/子级
        """
        self._set_{{cmd_name}}({% if child_cmd.value %}value=value{% endif %})
        return self._{{child_cmd.name}}
    def hset_{{cmd_name}}({% if child_cmd.value %}value=None{% endif %}):
        """
        保持HOLD模式，该方法返回该对象本身，不返回子对象
        """
        self._set_{{cmd_name}}(self{% if child_cmd.value %}, value=value{% endif %})
        return self
    {% endfor %}
{% endfor %}
class {{entry_params.mapping_entry.title()}}(Runner):
    def __init__(self{% if entry_params.mode =="SSH" %}{% for key,value in entry_params.ssh_conf.items() %}, {{key}}={% if value is string %}"{{value}}"{% else %}{{value}}{% endif %}{% endfor %} {% endif %}):
        super().__init__()
        self.cmds: Cmds = Cmds()
        self.pre: object = None
        self.root: {{entry_params.class_name.title()}} = self
        self.next: Union[{% for sub_param in entry_params.child_cmds %}{{sub_param.name.title()}}, {% endfor %}] = None
        self.main_cmd = "{{entry_params.entry}}"
        self._mutexs = []
        self._gcs = []
        self._not_mutexs = []
        self.mode = "{{entry_params.mode}}"
        {% if entry_params.mode =="SSH" %}self.ssh_client = SSHClient(host, name, pwd, port){% else %}self.shell_client = ShellClient(){% endif %}{% for child_cmd in entry_params.child_cmds %}
        self._{{ child_cmd.name }}: {{child_cmd.name.title()}} = {{child_cmd.name.title()}}(self, self){% endfor %}{% for child_cmd in entry_params.child_cmds %}

    def _set_{{child_cmd.name}}(self{% if child_cmd.value %}, value=None{% endif %}):{% set cmd_name = child_cmd.name %}
        self._{{cmd_name}}.mark = True
        self._{{cmd_name}}.index = self.cmds.index
        self.cmds.index += 1
        self.next = self._{{cmd_name}}
        self.cmds.CMD_LIST.append(self._{{cmd_name}})
        self._{{cmd_name}}.cmds = self.cmds
        {% if entry_params.mode =="SSH" %}self._{{cmd_name}}.ssh_client = self.ssh_client{% else %}self._{{cmd_name}}.shell_client = self.shell_client{% endif %}
        {% if child_cmd.value %}
        if self._{{child_cmd.name}}.need_value:
            self._{{child_cmd.name}}.value = value
        {% endif %}
    def tset_{{cmd_name}}(self{% if child_cmd.value %}, value=None{% endif %}):
        """
        传递TRANSMIT模式，可以获取子命令对象，可通过，root/pre/next，控制命令对象的根/父/子级
        """
        self._set_{{cmd_name}}({% if child_cmd.value %}value=value{% endif %})
        return self._{{child_cmd.name}}

    def hset_{{cmd_name}}(self,{% if child_cmd.value %}value=None{% endif %}):
        """
        保持HOLD模式，该方法返回该对象本身，不返回子对象
        """
        self._set_{{cmd_name}}({% if child_cmd.value %}value=value{% endif %})
        return self{% endfor %}
    {% for child_cmd in entry_params.child_cmds %}
    def {{child_cmd.name}}(self) -> {{child_cmd.name.title()}}:
        return self._{{child_cmd.name}}
    {% endfor %}

