Metadata-Version: 2.1
Name: reposaurus
Version: 0.1.2
Summary: Just turns your repo into a text file innit...ü¶ñ
Home-page: https://github.com/yourusername/reposaurus
Author: Andy Thomas
Author-email: your.email@example.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Documentation
Requires-Python: >=3.6
Description-Content-Type: text/markdown

# ü¶ñ Reposaurus

A prehistoric tool for turning repositories into text files. Because documentation never goes extinct!

## Overview

Reposaurus scans your repository and creates a comprehensive text file containing your directory structure and file contents. It's perfect for:
- Creating documentation snapshots
- Sharing code context with AI tools
- Archiving project states
- Code review preparation

## Installation

```bash
pip install reposaurus
```

## Usage

Basic usage:
```bash
reposaurus           # Process current directory
reposaurus /my/path  # Process specific directory
```

This will create a `repository_contents.txt` file in your target directory.

## Features

- üìÅ Directory structure visualization
- üìù File content extraction
- üß† Smart file filtering (ignores build directories, binaries, etc.)
- ü¶ñ Works with any git repository

## File Filtering

Reposaurus automatically excludes:
- Development directories (.git, .vs, .idea, etc.)
- Build and dependency directories (bin, obj, node_modules, etc.)
- Cache directories (.cache, __pycache__, etc.)
- System files (.DS_Store, Thumbs.db)
- Binary and media files (.exe, .jpg, .mp3, etc.)
- Log and database files (.log, .sqlite, etc.)

## Development

### Setting up development environment

1. Clone the repository:
```bash
git clone https://github.com/yourusername/reposaurus.git
cd reposaurus
```

2. Create and activate virtual environment:
```bash
python -m venv .venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate
```

3. Install in editable mode:
```bash
pip install -e .
```

### Building and Publishing

1. Install build tools:
```bash
pip install build twine
```

2. Clean old builds:
```bash
rm -rf dist build *.egg-info
```

3. Build package:
```bash
python -m build
```

4. Upload to PyPI:
```bash
python -m twine upload dist/*
```

### Updating the Package

1. Update the version number in `setup.py`:
```python
setup(
    name="reposaurus",
    version="0.1.1",  # Increment this
    ...
)
```

2. Rebuild and upload:
```bash
rm -rf dist build *.egg-info
python -m build
python -m twine upload dist/*
```

## Version History

- 0.1.0 - Initial release
  - Basic repository scanning
  - File content extraction
  - Smart file filtering

## License

MIT License - See LICENSE file for details.

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## Authors

- Andy Thomas - Initial work

## Acknowledgments

- Inspired by the need to share repository contents with AI tools
- Built with love and a touch of prehistoric magic ü¶ñ‚ú®
