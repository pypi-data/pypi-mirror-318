name: Python CI

on:
  push:
    branches:
      - master # seulement sur la branche principal du project push et pr
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configurer Python dans le pipeline
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      # mettre à jour pip et installer les outils nécessaires avec nos dependances
      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          pip install coverage black flake8

      # on test le programme sur un push ou une pull request
      - name: Run tests with coverage
        run: |
          source venv/bin/activate
          coverage run -m unittest discover test
          coverage html
          coverage report

      # Artefacts de test covering generer et accesible dans github action sur github donc :)
      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

      #on regarde avec black de maniere non blocant en soit impeut repetitive avec la suite flake8 mais ici non bloquant et genere un rapport
      - name: Run black for code formatting
        run: |
          source venv/bin/activate
          black --check --diff . --exclude "venv|venc|\.git|__pycache__"

      - name: Run flake8 for PEP8 compliance
        run: |
          source venv/bin/activate
          flake8 . --max-line-length=88 --exclude=__pycache__,*.pyc > flake8_report.txt || true

      # Artefacts Flake8 generer et accesible dans github action sur github donc :)
      - name: Upload flake8 report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: flake8-report
          path: flake8_report.txt
