[build-system]
build-backend = 'setuptools.build_meta'
requires = ['setuptools>=75.1', "wheel"]

[project]
name = "nxlu"
description = "Natural Language Understanding of Network Topology"
readme = "README.md"
dynamic = ['version']
requires-python = ">=3.10"
keywords = ["networkx", "graph", "network", "algorithm", "llm"]
classifiers = [
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'Operating System :: OS Independent',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3 :: Only',
]
authors = [
    { name = "Derek Alexander", email = "dpysalexander@example.com" }
]

dependencies = [
    "numpy >=1.26",
    "networkx >=3.3",
    "scipy >=1.13",
    "psutil >=5.9",
    "transformers >=4.45",
    "torch >=2.2",
    "sentence-transformers >=3.1",
    "huggingface-hub >=0.24",
    "langchain >=0.3.2",
    "langchain_openai >=0.2",
    "langchain_community >=0.3",
    "langchain-ollama >=0.2",
    "langchain-anthropic >=0.2",
    "pydantic >=2.8",
    "setuptools >=75.1",
    "faiss-cpu>=1.9.0",
    "nest-asyncio >=1.6",
    "graspologic-native >=1.2.1"
]

[project.optional-dependencies]
llamaindex = [
    "llama-index >=0.11",
    "llama-index-llms-anthropic >=0.3",
    "llama-index-llms-openai >=0.2",
    "llama-index-llms-ollama >=0.3",
    "llama-index-embeddings-huggingface >=0.3.1"
]

dev = [
    'nltk>=3.2',
    'neo4j>=5.23.1',
]

test = [
    'pre-commit>=3.8.0',
    'pre-commit-hooks>=5.0.0',
    'black>=22.6.0',
    'ruff>=0.6.9',
    'pytest-sugar>=0.9.3',
    'pytest>=7.2',
    'pytest-cov>=2.7.1',
    'pytest-split>=0.7.0',
    'pytest-xdist>=1.32.0',
    'pytest-metadata>=2.0.2',
    'pytest-env>=1.1.5',
    'coverage>=7.6.1',
    'build>=1.2.2',
    'isort>=5.13.2'
]

doc = [
    "setuptools>=45.0.0",
    "pydata-sphinx-theme==0.15.4",
    "furo==2024.8.6",
    "sphinxcontrib-apidoc ~= 0.3.0",
    "sphinx-autobuild==2024.10.3",
    "sphinxcontrib-napoleon",
    "myst_parser>=4.0.0",
    "sphinx_autodoc_typehints>=2.4.4",
    "sphinx>=8.0.2,<9.0.0"
]

[project.entry-points."networkx.backends"]
nxlu = "nxlu.core.interface:BackendInterface"

[project.entry-points."networkx.backend_info"]
nxlu = "_nxlu.info:get_info"

[tool.setuptools]
zip-safe = false
license-files = ["LICENSE"]
include-package-data = true
packages = [
    'nxlu',
    "nxlu.core",
    "nxlu.data",
    "nxlu.explanation",
    "nxlu.processing",
    "nxlu.utils",
    '_nxlu',
]

platforms = [
    'Linux',
    'Mac OSX',
    'Windows',
    'Unix',
]

[tool.setuptools.dynamic]
version = { attr = "nxlu._version.__version__" }

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]

[tool.isort]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
float_to_top = true
profile = "black"
skip_gitignore = true
default_section = "THIRDPARTY"
known_first_party = "nxlu"
line_length = 88
honor_noqa = true
extend_skip_glob = [
    "nxlu/__init__.py",
    "nxlu/utils/config.py",
    "nxlu/doc/conf.py"
]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [
    "nxlu/processing/tests",
    "nxlu/utils/tests",
    "nxlu/tests",
    "nxlu/core/tests"
]
xfail_strict = true
markers = [
    "slow: Skipped unless --runslow passed",
]
log_cli = true
log_cli_format = "%(message)s"
log_cli_level = "info"
filterwarnings = [
    # See: https://docs.python.org/3/library/warnings.html#describing-warning-filters
    # and: https://docs.pytest.org/en/7.2.x/how-to/capture-warnings.html#controlling-warnings
    # "error",
]
python_files = [
    "test_*.py",
]
python_functions = [
    "test_*",
]

[tool.coverage.run]
branch = true
source = ["nxlu"]
omit = ["nxlu/config.py", "nxlu/constants.py", "nxlu/data/*", "nxlu/processing/tests/*", "nxlu/utils/tests/*", "nxlu/tests/*", "nxlu/core/tests/*"]

[tool.coverage.report]
ignore_errors = false
precision = 1
fail_under = 0
skip_covered = false
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.ruff]
# https://github.com/charliermarsh/ruff/
line-length = 88
target-version = "py310"
show-fixes = true
unsafe-fixes = true

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "nxlu/constants.py",
    "doc/conf.py",
    "venv"]

[tool.ruff.lint]
unfixable = [
    "F841",  # unused-variable (Note: can leave useless expression)
    "B905",  # zip-without-explicit-strict (Note: prefer `zip(x, y, strict=True)`)
]
select = [
    "ALL",
]
external = [
    # noqa codes that ruff doesn't know about: https://github.com/charliermarsh/ruff#external
]
ignore = [
    "ISC001",
    # Would be nice to fix these
    "B905",  # `zip()` without an explicit `strict=` parameter (Note: possible since py39 was dropped; we should do this!)
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method

    "G004",   # Uses f-string
#
    "S101",   # Allow asserts

    # Maybe consider
    # "SIM300",  # Yoda conditions are discouraged, use ... instead (Note: we're not this picky)
    # "SIM401",  # Use dict.get ... instead of if-else-block (Note: if-else better for coverage and sometimes clearer)
    # "TRY004",  # Prefer `TypeError` exception for invalid type (Note: good advice, but not worth the nuisance)
    "B020",  # Found for loop that reassigns the iterable it is iterating with each iterable value (too strict)
    "B904",  # Bare `raise` inside exception clause (like TRY200; sometimes okay)
    "S310",  # Audit URL open for permitted schemes (Note: we don't download URLs in normal usage)
    "S301",  # `Pickle` and modules that wrap it can be unsafe, but it's only a security risk if the pickled file was actually being stored in the package and it's not.

    "D205", # Require a blank line between summary line and description

    "S311", # Standard pseudo-random generators are acceptable for now
    "N812", # Import casing
    "S108", # Use of /tmp is fine

    # Intentionally ignored
    "A003",  # Class attribute ... is shadowing a python builtin
    "ANN101",  # Missing type annotation for `self` in method
    "ARG004",  # Unused static method argument: `...`
    "COM812",  # Trailing comma missing
    "D203",  # 1 blank line required before class docstring (Note: conflicts with D211, which is preferred)
    "D400",  # First line should end with a period (Note: prefer D415, which also allows "?" and "!")
    "F403",  # `from .classes import *` used; unable to detect undefined names (Note: used to match networkx)
    "N801",  # Class name ... should use CapWords convention (Note:we have a few exceptions to this)
    "N802",  # Function name ... should be lowercase
    "N803",  # Argument name ... should be lowercase (Maybe okay--except in tests)
    "N806",  # Variable ... in function should be lowercase
    "N807",  # Function name should not start and end with `__`
    "N818",  # Exception name ... should be named with an Error suffix (Note: good advice)
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments to function call
    "PLR0915",  # Too many statements
    "PLR2004",  # Magic number used in comparison, consider replacing magic with a constant variable
    "PLW2901",  # Outer for loop variable ... overwritten by inner assignment target (Note: good advice, but too strict)
    "RET502",  # Do not implicitly `return None` in function able to return non-`None` value
    "RET503",  # Missing explicit `return` at the end of function able to return non-`None` value
    "RET504",  # Unnecessary variable assignment before `return` statement
    "RUF018",  # Avoid assignment expressions in `assert` statements
    "S110",  # `try`-`except`-`pass` detected, consider logging the exception (Note: good advice, but we don't log)
    "S112",  # `try`-`except`-`continue` detected, consider logging the exception (Note: good advice, but we don't log)
    "SIM102",  # Use a single `if` statement instead of nested `if` statements (Note: often necessary)
    "SIM105",  # Use contextlib.suppress(...) instead of try-except-pass (Note: try-except-pass is much faster)
    "SIM108",  # Use ternary operator ... instead of if-else-block (Note: if-else better for coverage and sometimes clearer)
    "TRY003",  # Avoid specifying long messages outside the exception class (Note: why?)
    "UP038",  # Use `X | Y` in `isinstance` call instead of `(X, Y)` (Note: tuple is faster for now)

    "NPY002", # Permit old numpy generator

    "F841",  # Local variables can be assigned to but never used in tests

    "SIM117", # Multiple nested `with` statesments are allowed for multi-context test mocks
    # Ignored categories
    "C90",  # mccabe (Too strict, but maybe we should make things less complex)
    "I",  # isort (Should we replace `isort` with this?)
    "ANN",  # flake8-annotations
    "BLE",  # flake8-blind-except (Maybe consider)
    "FBT",  # flake8-boolean-trap (Why?)
    "DJ",  # flake8-django (We don't use django)
    "EM",  # flake8-errmsg (Perhaps nicer, but too much work)
    # "ICN",  # flake8-import-conventions (Doesn't allow "_" prefix such as `_np`)
    "PYI",  # flake8-pyi (We don't have stub files yet)
    "SLF",  # flake8-self (We can use our own private variables--sheesh!)
    "TID",  # flake8-tidy-imports (Rely on isort and our own judgement)
    # "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments (Sometimes helpful, but too strict)
    "TD",  # flake8-todos (Maybe okay to add some of these)
    "FIX",  # flake8-fixme (like flake8-todos)
    "ERA",  # eradicate (We like code in comments!)
    "PD",  # pandas-vet (Intended for scripts that use pandas, not libraries)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports (w/o defining `__all__`)
# Allow assert, print, RNG, and no docstring
"nxlu/**/tests/*py" = ["S101", "S311", "T201", "D103", "D100"]
"_nxlu/__init__.py" = ["E501"]
"nxlu/__init__.py" = ["E402"]  # Allow module level import not at top of file

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.pydocstyle]
convention = "numpy"
