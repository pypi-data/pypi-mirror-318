{"version":3,"file":"lib_index_js.ae4abd8db7012004f4eb.js","mappings":"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","sources":["webpack://@elyra/code-viewer-extension/./src/CodeViewerWidget.ts","webpack://@elyra/code-viewer-extension/./src/index.ts"],"sourcesContent":["/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CodeEditor, CodeEditorWrapper } from '@jupyterlab/codeeditor';\nimport { StackedLayout, Widget } from '@lumino/widgets';\n\nexport class CodeViewerWidget extends Widget {\n  /**\n   * Construct a new code viewer widget.\n   */\n  constructor(options: CodeViewerWidget.IOptions) {\n    super();\n    this.model = options.model;\n\n    const editorWidget = new CodeEditorWrapper({\n      factory: options.factory,\n      model: options.model\n    });\n    this.editor = editorWidget.editor;\n    this.editor.setOption('readOnly', true);\n\n    const layout = (this.layout = new StackedLayout());\n    layout.addWidget(editorWidget);\n  }\n\n  static getCodeViewer(\n    options: CodeViewerWidget.INoModelOptions\n  ): CodeViewerWidget {\n    const model = new CodeEditor.Model({ mimeType: options.mimeType });\n    model.sharedModel.source = options.content;\n    return new CodeViewerWidget({ factory: options.factory, model });\n  }\n\n  getContent = (): string => this.model.sharedModel.getSource();\n  getMimeType = (): string => this.model.mimeType;\n\n  model: CodeEditor.IModel;\n  editor: CodeEditor.IEditor;\n}\n\n/**\n * The namespace for code viewer widget.\n */\nexport namespace CodeViewerWidget {\n  /**\n   * The options used to create an code viewer widget.\n   */\n  export interface IOptions {\n    /**\n     * A code editor factory.\n     */\n    factory: CodeEditor.Factory;\n\n    /**\n     * The content model for the viewer.\n     */\n    model: CodeEditor.IModel;\n  }\n\n  /**\n   * The options used to create an code viewer widget without a model.\n   */\n  export interface INoModelOptions {\n    /**\n     * A code editor factory.\n     */\n    factory: CodeEditor.Factory;\n\n    /**\n     * The content to display in the viewer.\n     */\n    content: string;\n\n    /**\n     * The mime type for the content.\n     */\n    mimeType?: string;\n  }\n}\n","/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ILayoutRestorer,\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { MainAreaWidget, WidgetTracker } from '@jupyterlab/apputils';\nimport { CodeEditor, IEditorServices } from '@jupyterlab/codeeditor';\nimport { textEditorIcon } from '@jupyterlab/ui-components';\nimport { toArray } from '@lumino/algorithm';\n\nimport { CodeViewerWidget } from './CodeViewerWidget';\n\nconst ELYRA_CODE_VIEWER_NAMESPACE = 'elyra-code-viewer-extension';\n\n/**\n * The command IDs used by the code-viewer plugin.\n */\nconst CommandIDs = {\n  openViewer: 'elyra-code-viewer:open'\n};\n\n/**\n * Initialization data for the code-viewer extension.\n */\nconst extension: JupyterFrontEndPlugin<void> = {\n  id: ELYRA_CODE_VIEWER_NAMESPACE,\n  autoStart: true,\n  requires: [IEditorServices],\n  optional: [ILayoutRestorer],\n  activate: (\n    app: JupyterFrontEnd,\n    editorServices: IEditorServices,\n    restorer: ILayoutRestorer\n  ) => {\n    console.log('Elyra - code-viewer extension is activated!');\n\n    const tracker = new WidgetTracker<MainAreaWidget<CodeViewerWidget>>({\n      namespace: ELYRA_CODE_VIEWER_NAMESPACE\n    });\n\n    // Handle state restoration\n    if (restorer) {\n      void restorer.restore(tracker, {\n        command: CommandIDs.openViewer,\n        args: (widget) => ({\n          content: widget.content.getContent(),\n          label: widget.content.title.label,\n          mimeType: widget.content.getMimeType(),\n          widgetId: widget.content.id\n        }),\n        name: (widget) => widget.content.id\n      });\n    }\n\n    const openCodeViewer = async (args: {\n      content: string;\n      label?: string;\n      mimeType?: string;\n      extension?: string;\n      widgetId?: string;\n    }): Promise<CodeViewerWidget> => {\n      const func = editorServices.factoryService.newDocumentEditor;\n      const factory: CodeEditor.Factory = (options) => {\n        return func(options);\n      };\n\n      // Derive mimetype from extension\n      let mimetype = args.mimeType;\n      if (!mimetype && args.extension) {\n        mimetype = editorServices.mimeTypeService.getMimeTypeByFilePath(\n          `temp.${args.extension.replace(/\\\\.$/, '')}`\n        );\n      }\n\n      const widget = CodeViewerWidget.getCodeViewer({\n        factory,\n        content: args.content,\n        mimeType: mimetype\n      });\n      widget.title.label = args.label || 'Code Viewer';\n      widget.title.caption = widget.title.label;\n\n      // Get the fileType based on the mimetype to determine the icon\n      const fileType = toArray(app.docRegistry.fileTypes()).find((fileType) => {\n        return mimetype ? fileType.mimeTypes.includes(mimetype) : undefined;\n      });\n      widget.title.icon = fileType?.icon ?? textEditorIcon;\n\n      if (args.widgetId) {\n        widget.id = args.widgetId;\n      }\n      const main = new MainAreaWidget({ content: widget });\n      await tracker.add(main);\n      app.shell.add(main, 'main');\n      return widget;\n    };\n\n    app.commands.addCommand(CommandIDs.openViewer, {\n      execute: (args: any) => {\n        return openCodeViewer(args);\n      }\n    });\n  }\n};\n\nexport default extension;\n"],"names":[],"sourceRoot":""}