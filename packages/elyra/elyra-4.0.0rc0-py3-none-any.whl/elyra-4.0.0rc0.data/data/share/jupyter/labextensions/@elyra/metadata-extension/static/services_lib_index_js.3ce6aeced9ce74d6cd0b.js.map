{"version":3,"file":"services_lib_index_js.3ce6aeced9ce74d6cd0b.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;AAEH,6EAA4B;AAE5B,0FAA0B;AAC1B,4FAA2B;AAC3B,4FAA2B;;;;;;;;;;;;ACpB3B;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;AAGH,wFAA4C;AAE5C,MAAM,2BAA2B,GAAG,iBAAiB,CAAC;AACtD,MAAM,yBAAyB,GAAG,eAAe,CAAC;AAClD,MAAM,8BAA8B,GAAG,mBAAmB,CAAC;AAE3D;;GAEG;AACH,MAAa,eAAe;IAC1B;;;;;;;OAOG;IACH,MAAM,CAAO,WAAW,CAAC,WAAmB;;YAC1C,OAAO,yBAAc,CAAC,cAAc,CAClC,2BAA2B,GAAG,WAAW,CAC1C,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;QAC9D,CAAC;KAAA;IAED;;;;;;;;OAQG;IACH,MAAM,CAAO,YAAY,CACvB,WAAmB,EACnB,WAAgB;;YAEhB,OAAO,yBAAc,CAAC,eAAe,CACnC,2BAA2B,GAAG,WAAW,EACzC,WAAW,CACZ,CAAC;QACJ,CAAC;KAAA;IAED;;;;;;;;;OASG;IACH,MAAM,CAAO,WAAW,CACtB,WAAmB,EACnB,IAAY,EACZ,WAAgB;;YAEhB,OAAO,yBAAc,CAAC,cAAc,CAClC,GAAG,2BAA2B,GAAG,WAAW,IAAI,IAAI,EAAE,EACtD,WAAW,CACZ,CAAC;QACJ,CAAC;KAAA;IAED;;;;;;;OAOG;IACH,MAAM,CAAO,cAAc,CAAC,WAAmB,EAAE,IAAY;;YAC3D,OAAO,yBAAc,CAAC,iBAAiB,CACrC,GAAG,2BAA2B,GAAG,WAAW,IAAI,IAAI,EAAE,CACvD,CAAC;QACJ,CAAC;KAAA;IAID;;;;;;;OAOG;IACH,MAAM,CAAO,SAAS,CAAC,WAAmB;;YACxC,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE;gBACjC,gDAAgD;gBAChD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;aAClE;YAED,OAAO,yBAAc,CAAC,cAAc,CAClC,yBAAyB,GAAG,WAAW,CACxC,CAAC,IAAI,CAAC,CAAC,cAAc,EAAE,EAAE;gBACxB,IAAI,cAAc,CAAC,WAAW,CAAC,EAAE;oBAC/B,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,cAAc,CAAC,WAAW,CAAC,CAAC;iBAC7D;gBAED,OAAO,cAAc,CAAC,WAAW,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;IAED;;;;;OAKG;IACH,MAAM,CAAO,YAAY;;YACvB,IAAI;gBACF,MAAM,YAAY,GAAG,MAAM,yBAAc,CAAC,cAAc,CACtD,8BAA8B,CAC/B,CAAC;gBACF,MAAM,OAAO,GAAG,EAAE,CAAC;gBAEnB,KAAK,MAAM,WAAW,IAAI,YAAY,CAAC,cAAc,CAAC,EAAE;oBACtD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;oBACjD,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC;iBACzB;gBACD,OAAO,OAAO,CAAC;aAChB;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC9B;QACH,CAAC;KAAA;;AArHH,0CAsHC;AAjDgB,2BAAW,GAAqB,EAAE,CAAC;;;;;;;;;;;;AC/FpD;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;AAEH,wFAA4C;AAE5C,MAAM,8BAA8B,GAAG,4BAA4B,CAAC;AASpE;;GAEG;AACH,MAAa,aAAa;IACxB;;;;OAIG;IACH,MAAM,CAAO,UAAU,CAAC,SAAiB;;YACvC,IAAI;gBACF,MAAM,QAAQ,GAAG,MAAM,yBAAc,CAAC,cAAc,CAClD,8BAA8B,GAAG,SAAS,CAC3C,CAAC;gBACF,iDAAiD;gBACjD,OAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;aACvC;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC9B;QACH,CAAC;KAAA;CACF;AAjBD,sCAiBC;;;;;;;;;;;;AC/CD;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;;;;;AAGH,8HAA+C;AAC/C,2HAAwD;AAExD;;GAEG;AACH,MAAa,cAAc;IACzB;;;;;;;;;;;;;;;;OAgBG;IACH,MAAM,CAAO,cAAc,CACzB,WAAmB,EACnB,iBAA+B;;YAE/B,OAAO,IAAI,CAAC,iBAAiB,CAC3B,WAAW,EACX,EAAE,MAAM,EAAE,KAAK,EAAE,EACjB,iBAAiB,CAClB,CAAC;QACJ,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACH,MAAM,CAAO,eAAe,CAC1B,WAAmB,EACnB,WAAgB,EAChB,iBAA+B;;YAE/B,OAAO,IAAI,CAAC,iBAAiB,CAC3B,WAAW,EACX,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,EACrC,iBAAiB,CAClB,CAAC;QACJ,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACH,MAAM,CAAO,cAAc,CACzB,WAAmB,EACnB,WAAgB,EAChB,iBAA+B;;YAE/B,OAAO,IAAI,CAAC,iBAAiB,CAC3B,WAAW,EACX,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,WAAW,EAAE,EACpC,iBAAiB,CAClB,CAAC;QACJ,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;OAgBG;IACH,MAAM,CAAO,iBAAiB,CAC5B,WAAmB,EACnB,iBAA+B;;YAE/B,OAAO,IAAI,CAAC,iBAAiB,CAC3B,WAAW,EACX,EAAE,MAAM,EAAE,QAAQ,EAAE,EACpB,iBAAiB,CAClB,CAAC;QACJ,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;;;;;;OAwBG;IACH,MAAM,CAAO,iBAAiB,CAC5B,WAAmB,EACnB,OAA0D,EAC1D,iBAA+B;;YAE/B,uEAAuE;YACvE,oEAAoE;YACpE,MAAM,QAAQ,GAAG,2BAAgB,CAAC,YAAY,EAAE,CAAC;YACjD,MAAM,UAAU,GAAG,kBAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;YAE9D,MAAM,EAAE,IAAI,GAAG,MAAM,KAAqB,OAAO,EAAvB,WAAW,UAAK,OAAO,EAA3C,QAAiC,CAAU,CAAC;YAElD,OAAO,CAAC,GAAG,CAAC,aAAa,WAAW,CAAC,MAAM,eAAe,UAAU,EAAE,CAAC,CAAC;YAExE,IAAI,iBAAiB,EAAE;gBACrB,iBAAiB,CAAC,MAAM,EAAE,CAAC;aAC5B;YAED,MAAM,iBAAiB,GAAiB,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACtE,2BAAgB,CAAC,WAAW,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC,IAAI,CAClE,CAAC,QAAa,EAAE,EAAE;oBAChB,IAAI,iBAAiB,EAAE;wBACrB,iBAAiB,CAAC,OAAO,EAAE,CAAC;qBAC7B;oBAED,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI;oBACnB,yDAAyD;oBACzD,CAAC,MAAW,EAAE,EAAE;wBACd,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;4BAC3B,OAAO,CAAC,IAAI,CAAC,CAAC;yBACf;wBACD,IAAI,QAAQ,CAAC,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,MAAM,IAAI,GAAG,EAAE;4BACnD,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC;yBACvB;wBAED,OAAO,CAAC,MAAM,CAAC,CAAC;oBAClB,CAAC;oBACD,wCAAwC;oBACxC,CAAC,MAAW,EAAE,EAAE;wBACd,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;4BACtD,QAAQ,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC;4BACtC,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC;yBACzB;6BAAM,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;4BAClC,OAAO,CAAC,EAAE,CAAC,CAAC;yBACb;6BAAM;4BACL,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC;yBACvB;oBACH,CAAC,CACF,CAAC;gBACJ,CAAC;gBACD,mDAAmD;gBACnD,CAAC,MAAW,EAAE,EAAE;oBACd,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACtB,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC;gBACxB,CAAC,CACF,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,MAAM,cAAc,GAAQ,MAAM,iBAAiB,CAAC;YACpD,OAAO,cAAc,CAAC;QACxB,CAAC;KAAA;CACF;AA/MD,wCA+MC;;;;;;;;;;;;;;;;;;;ACtOD;AACgH;AACjB;AAC/F,8BAA8B,mFAA2B,CAAC,4FAAqC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,2GAA2G,2IAA2I,0gBAA0gB;AACvwB;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBvC,MAAqG;AACrG,MAA2F;AAC3F,MAAkG;AAClG,MAAqH;AACrH,MAA8G;AAC9G,MAA8G;AAC9G,MAAyG;AACzG;AACA;;AAEA;;AAEA,4BAA4B,qGAAmB;AAC/C,wBAAwB,kHAAa;;AAErC,uBAAuB,uGAAa;AACpC;AACA,iBAAiB,+FAAM;AACvB,6BAA6B,sGAAkB;;AAE/C,aAAa,0GAAG,CAAC,sFAAO;;;;AAImD;AAC3E,OAAO,iEAAe,sFAAO,IAAI,sFAAO,UAAU,sFAAO,mBAAmB,EAAC","sources":["webpack://@elyra/metadata-extension/../services/src/index.ts","webpack://@elyra/metadata-extension/../services/src/metadata.ts","webpack://@elyra/metadata-extension/../services/src/parsing.ts","webpack://@elyra/metadata-extension/../services/src/requests.ts","webpack://@elyra/metadata-extension/../services/style/index.css","webpack://@elyra/metadata-extension/../services/style/index.css?471b"],"sourcesContent":["/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '../style/index.css';\n\nexport * from './parsing';\nexport * from './metadata';\nexport * from './requests';\n","/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IDictionary } from './parsing';\nimport { RequestHandler } from './requests';\n\nconst ELYRA_METADATA_API_ENDPOINT = 'elyra/metadata/';\nconst ELYRA_SCHEMA_API_ENDPOINT = 'elyra/schema/';\nconst ELYRA_SCHEMASPACE_API_ENDPOINT = 'elyra/schemaspace';\n\n/**\n * A service class for accessing the elyra api.\n */\nexport class MetadataService {\n  /**\n   * Service function for making GET calls to the elyra metadata API.\n   *\n   * @param schemaspace - the metadata schemaspace being accessed\n   *\n   * @returns a promise that resolves with the requested metadata or\n   * an error dialog result\n   */\n  static async getMetadata(schemaspace: string): Promise<any> {\n    return RequestHandler.makeGetRequest(\n      ELYRA_METADATA_API_ENDPOINT + schemaspace\n    ).then((metadataResponse) => metadataResponse[schemaspace]);\n  }\n\n  /**\n   * Service function for making POST calls to the elyra metadata API.\n   *\n   * @param schemaspace - the metadata schemaspace being accessed\n   * @param requestBody - the body of the request\n   *\n   * @returns a promise that resolves with the newly created metadata or\n   * an error dialog result\n   */\n  static async postMetadata(\n    schemaspace: string,\n    requestBody: any\n  ): Promise<any> {\n    return RequestHandler.makePostRequest(\n      ELYRA_METADATA_API_ENDPOINT + schemaspace,\n      requestBody\n    );\n  }\n\n  /**\n   * Service function for making PUT calls to the elyra metadata API.\n   *\n   * @param schemaspace - the metadata schemaspace being accessed\n   * @param name - the metadata name being updated\n   * @param requestBody - the body of the request\n   *\n   * @returns a promise that resolves with the updated metadata or\n   * an error dialog result\n   */\n  static async putMetadata(\n    schemaspace: string,\n    name: string,\n    requestBody: any\n  ): Promise<any> {\n    return RequestHandler.makePutRequest(\n      `${ELYRA_METADATA_API_ENDPOINT}${schemaspace}/${name}`,\n      requestBody\n    );\n  }\n\n  /**\n   * Service function for making DELETE calls to the elyra metadata API.\n   *\n   * @param schemaspace - the metadata schemaspace being accessed\n   * @param name - the metadata name being updated\n   *\n   * @returns void or an error dialog result\n   */\n  static async deleteMetadata(schemaspace: string, name: string): Promise<any> {\n    return RequestHandler.makeDeleteRequest(\n      `${ELYRA_METADATA_API_ENDPOINT}${schemaspace}/${name}`\n    );\n  }\n\n  private static schemaCache: IDictionary<any> = {};\n\n  /**\n   * Service function for making GET calls to the elyra schema API.\n   *\n   * @param schemaspace - the schema schemaspace being requested\n   *\n   * @returns a promise that resolves with the requested schemas or\n   * an error dialog result\n   */\n  static async getSchema(schemaspace: string): Promise<any> {\n    if (this.schemaCache[schemaspace]) {\n      // Deep copy cached schema to mimic request call\n      return JSON.parse(JSON.stringify(this.schemaCache[schemaspace]));\n    }\n\n    return RequestHandler.makeGetRequest(\n      ELYRA_SCHEMA_API_ENDPOINT + schemaspace\n    ).then((schemaResponse) => {\n      if (schemaResponse[schemaspace]) {\n        this.schemaCache[schemaspace] = schemaResponse[schemaspace];\n      }\n\n      return schemaResponse[schemaspace];\n    });\n  }\n\n  /**\n   * Service function for making GET calls to the elyra schema API.\n   *\n   * @returns a promise that resolves with the requested schemas or\n   * an error dialog result\n   */\n  static async getAllSchema(): Promise<any> {\n    try {\n      const schemaspaces = await RequestHandler.makeGetRequest(\n        ELYRA_SCHEMASPACE_API_ENDPOINT\n      );\n      const schemas = [];\n\n      for (const schemaspace of schemaspaces['schemaspaces']) {\n        const schema = await this.getSchema(schemaspace);\n        schemas.push(...schema);\n      }\n      return schemas;\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n}\n","/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RequestHandler } from './requests';\n\nconst ELYRA_FILE_PARSER_API_ENDPOINT = 'elyra/contents/properties/';\n\n/**\n * An interface for typing json dictionaries in typescript\n */\nexport interface IDictionary<T> {\n  [key: string]: T;\n}\n\n/**\n * A utilities class for parsing notebook files.\n */\nexport class ContentParser {\n  /**\n   * Takes in a file_path and finds all env vars accessed in that file.\n   * @param file_path - relative path to file\n   * @returns A string array of the env vars accessed in the given file\n   */\n  static async getEnvVars(file_path: string): Promise<any> {\n    try {\n      const response = await RequestHandler.makeGetRequest(\n        ELYRA_FILE_PARSER_API_ENDPOINT + file_path\n      );\n      // Only return environment var names (not values)\n      return Object.keys(response.env_vars);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n}\n","/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Dialog } from '@jupyterlab/apputils';\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n\n/**\n * A service class for making requests to the jupyter lab server.\n */\nexport class RequestHandler {\n  /**\n   * Make a GET request to the jupyter lab server.\n   *\n   * All errors returned by the server are handled by displaying a relevant\n   * error dialog. If provided a `longRequestDialog` then the dialog is displayed\n   * to users while waiting for the server response. On success a promise that\n   * resolves to the server response is returned.\n   *\n   * @param requestPath - The url path for the request.\n   * This path is appended to the base path of the server for the request.\n   *\n   * @param longRequestDialog - A optional Dialog param.\n   * A warning Dialog to display while waiting for the request to return.\n   *\n   * @returns a promise that resolves with the server response on success or\n   * an error dialog result in cases of failure.\n   */\n  static async makeGetRequest<T = any>(\n    requestPath: string,\n    longRequestDialog?: Dialog<any>\n  ): Promise<T> {\n    return this.makeServerRequest(\n      requestPath,\n      { method: 'GET' },\n      longRequestDialog\n    );\n  }\n\n  /**\n   * Make a POST request to the jupyter lab server.\n   *\n   * All errors returned by the server are handled by displaying a relevant\n   * error dialog. If provided a `longRequestDialog` then the dialog is displayed\n   * to users while waiting for the server response. On success a promise that\n   * resolves to the server response is returned.\n   *\n   * @param requestPath - The url path for the request.\n   * This path is appended to the base path of the server for the request.\n   *\n   * @param requestBody - The body of the request.\n   * Will be included in the RequestInit object passed to `makeServerRequest`\n   *\n   * @param longRequestDialog - A optional Dialog param.\n   * A warning Dialog to display while waiting for the request to return.\n   *\n   * @returns a promise that resolves with the server response on success or\n   * an error dialog result in cases of failure.\n   */\n  static async makePostRequest<T = any>(\n    requestPath: string,\n    requestBody: any,\n    longRequestDialog?: Dialog<any>\n  ): Promise<T> {\n    return this.makeServerRequest(\n      requestPath,\n      { method: 'POST', body: requestBody },\n      longRequestDialog\n    );\n  }\n\n  /**\n   * Make a PUT request to the jupyter lab server.\n   *\n   * All errors returned by the server are handled by displaying a relevant\n   * error dialog. If provided a `longRequestDialog` then the dialog is displayed\n   * to users while waiting for the server response. On success a promise that\n   * resolves to the server response is returned.\n   *\n   * @param requestPath - The url path for the request.\n   * This path is appended to the base path of the server for the request.\n   *\n   * @param requestBody - The body of the request.\n   * Will be included in the RequestInit object passed to `makeServerRequest`\n   *\n   * @param longRequestDialog - A optional Dialog param.\n   * A warning Dialog to display while waiting for the request to return.\n   *\n   * @returns a promise that resolves with the server response on success or\n   * an error dialog result in cases of failure.\n   */\n  static async makePutRequest<T = any>(\n    requestPath: string,\n    requestBody: any,\n    longRequestDialog?: Dialog<any>\n  ): Promise<T> {\n    return this.makeServerRequest(\n      requestPath,\n      { method: 'PUT', body: requestBody },\n      longRequestDialog\n    );\n  }\n\n  /**\n   * Make a DELETE request to the jupyter lab server.\n   *\n   * All errors returned by the server are handled by displaying a relevant\n   * error dialog. If provided a `longRequestDialog` then the dialog is displayed\n   * to users while waiting for the server response. On success a promise that\n   * resolves to the server response is returned.\n   *\n   * @param requestPath - The url path for the request.\n   * This path is appended to the base path of the server for the request.\n   *\n   * @param longRequestDialog - A optional Dialog param.\n   * A warning Dialog to display while waiting for the request to return.\n   *\n   * @returns a promise that resolves with the server response on success or\n   * an error dialog result in cases of failure.\n   */\n  static async makeDeleteRequest<T = any>(\n    requestPath: string,\n    longRequestDialog?: Dialog<any>\n  ): Promise<T> {\n    return this.makeServerRequest(\n      requestPath,\n      { method: 'DELETE' },\n      longRequestDialog\n    );\n  }\n\n  /**\n   * Make a request to the jupyter lab server.\n   *\n   * The method of request is set in the `method` value in `requestInit`.\n   * All errors returned by the server are handled by displaying a relevant\n   * error dialog. If provided a `longRequestDialog` then the dialog is displayed\n   * to users while waiting for the server response. On success a promise that\n   * resolves to the server response is returned.\n   *\n   * @param requestPath - The url path for the request.\n   * This path is appended to the base path of the server for the request.\n   *\n   * @param requestInit - The initialization options for the request.\n   * A RequestInit object to be passed directly to `ServerConnection.makeRequest`\n   * that must include a value for `method`.\n   * This is based on \"@typescript/lib/lib.dom.d/RequestInit\"\n   * @see {@link https://github.com/Microsoft/TypeScript/blob/master/lib/lib.dom.d.ts#L1558}\n   * and {@link https://fetch.spec.whatwg.org/#requestinit}\n   *\n   * @param longRequestDialog - A optional Dialog param.\n   * A warning Dialog to display while waiting for the request to return.\n   *\n   * @returns a promise that resolves with the server response on success or\n   * an error dialog result in cases of failure.\n   */\n  static async makeServerRequest<T = any>(\n    requestPath: string,\n    options: RequestInit & { type?: 'blob' | 'json' | 'text' },\n    longRequestDialog?: Dialog<any>\n  ): Promise<T> {\n    // use ServerConnection utility to make calls to Jupyter Based services\n    // which in this case are in the extension installed by this package\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, requestPath);\n\n    const { type = 'json', ...requestInit } = options;\n\n    console.log(`Sending a ${requestInit.method} request to ${requestUrl}`);\n\n    if (longRequestDialog) {\n      longRequestDialog.launch();\n    }\n\n    const getServerResponse: Promise<any> = new Promise((resolve, reject) => {\n      ServerConnection.makeRequest(requestUrl, requestInit, settings).then(\n        (response: any) => {\n          if (longRequestDialog) {\n            longRequestDialog.resolve();\n          }\n\n          response[type]().then(\n            // handle cases where the server returns a valid response\n            (result: any) => {\n              if (response.status === 405) {\n                resolve(null);\n              }\n              if (response.status < 200 || response.status >= 300) {\n                return reject(result);\n              }\n\n              resolve(result);\n            },\n            // handle 404 if the server is not found\n            (reason: any) => {\n              if (response.status === 404 || response.status === 409) {\n                response['requestPath'] = requestPath;\n                return reject(response);\n              } else if (response.status === 204) {\n                resolve({});\n              } else {\n                return reject(reason);\n              }\n            }\n          );\n        },\n        // something unexpected went wrong with the request\n        (reason: any) => {\n          console.error(reason);\n          return reject(reason);\n        }\n      );\n    });\n\n    const serverResponse: any = await getServerResponse;\n    return serverResponse;\n  }\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\n * Copyright 2018-2025 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./../services/style/index.css\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;EAcE\",\"sourcesContent\":[\"/*\\n * Copyright 2018-2025 Elyra Authors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js!./index.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js!./index.css\";\n       export default content && content.locals ? content.locals : undefined;\n"],"names":[],"sourceRoot":""}