import time
import uuid
from typing import List, Optional, Union, Dict, Iterable, Any

from pydantic import BaseModel
from typing_extensions import Literal
from dataclasses import dataclass
from loguru import logger
from ._session import HFBrowerSession
from ._hf import HuggingFaceAutomation

@dataclass
class ChatMessage:
    role: str
    content: str


@dataclass
class ChatChoice:
    index: int
    message: ChatMessage
    finish_reason: str


@dataclass
class Usage:
    prompt_tokens: Optional[int] = None
    completion_tokens: Optional[int] = None
    total_tokens: Optional[int] = None


@dataclass
class ChatCompletion:
    id: str
    object: str
    created: int
    model: str
    choices: List[ChatChoice]
    usage: Optional[Usage] = None




class ChoiceDeltaToolCallFunction(BaseModel):
    arguments: Optional[str] = None
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: Optional[str] = None
    """The name of the function to call."""
class ChoiceDeltaToolCall(BaseModel):
    index: int

    id: Optional[str] = None
    """The ID of the tool call."""

    function: Optional[ChoiceDeltaToolCallFunction] = None

    type: Optional[Literal["function"]] = None
    """The type of the tool. Currently, only `function` is supported."""


class ChoiceDelta(BaseModel):
    content: Optional[str] = None
    """The contents of the chunk message."""


    refusal: Optional[str] = None
    """The refusal message generated by the model."""

    role: Optional[Literal["system", "user", "assistant", "tool"]] = None
    """The role of the author of this message."""

    tool_calls: Optional[List[ChoiceDeltaToolCall]] = None


class Choice(BaseModel):
    delta: ChoiceDelta
    """A chat completion delta generated by streamed model responses."""

    finish_reason: Optional[Literal["stop", "length", "tool_calls", "content_filter", "function_call"]] = None
    """The reason the model stopped generating tokens.

    This will be `stop` if the model hit a natural stop point or a provided stop
    sequence, `length` if the maximum number of tokens specified in the request was
    reached, `content_filter` if content was omitted due to a flag from our content
    filters, `tool_calls` if the model called a tool, or `function_call`
    (deprecated) if the model called a function.
    """

    index: int
    """The index of the choice in the list of choices."""

    logprobs: Optional[str] = None
    """Log probability information for the choice."""


class ChatCompletionChunk(BaseModel):
    id: str
    """A unique identifier for the chat completion. Each chunk has the same ID."""

    choices: List[Choice]
    """A list of chat completion choices.

    Can contain more than one elements if `n` is greater than 1. Can also be empty
    for the last chunk if you set `stream_options: {"include_usage": true}`.
    """

    created: int
    """The Unix timestamp (in seconds) of when the chat completion was created.

    Each chunk has the same timestamp.
    """

    model: str
    """The model to generate the completion."""

    object: Literal["chat.completion.chunk"]
    """The object type, which is always `chat.completion.chunk`."""

    service_tier: Optional[Literal["scale", "default"]] = None
    """The service tier used for processing the request.

    This field is only included if the `service_tier` parameter is specified in the
    request.
    """

    system_fingerprint: Optional[str] = None
    """
    This fingerprint represents the backend configuration that the model runs with.
    Can be used in conjunction with the `seed` request parameter to understand when
    backend changes have been made that might impact determinism.
    """

    usage: Optional[Usage] = None
    """
    An optional field that will only be present when you set
    `stream_options: {"include_usage": true}` in your request. When present, it
    contains a null value except for the last chunk which contains the token usage
    statistics for the entire request.
    """

class ChatHFClient:
    def __init__(self, browser_session: Optional[HFBrowerSession] = None,headless=True):
        """Initialize with browser session"""
        self.session = browser_session or HFBrowerSession(headless=headless)
        self.hf = HuggingFaceAutomation(self.session)
        logger.info("HFChat initialized with browser session")
        self.completions = self.Completions(self.hf)

    class Completions:
        def __init__(self, hf: HuggingFaceAutomation):
            self.hf = hf

        def create(
            self,
            messages: List[Dict[str, str]],
            model: str = "huggingface",
            temperature: float = 1.0,
            stream: bool = False,
            web_search: bool = False,
            max_wait_time: int = 300,
            **kwargs
        ) -> Union[ChatCompletion, Iterable[ChatCompletionChunk]]:
            """Create a chat completion - OpenAI compatible interface"""
            logger.info(f"Creating chat completion with model: {model}")

            # Convert messages to prompt
            prompt = "\n".join(f"{m['role']}: {m['content']}" for m in messages)

            try:
                if stream:
                    logger.debug("Using streaming response")
                    return self._create_streaming(prompt, web_search, max_wait_time)
                else:
                    logger.debug("Using normal response")
                    return self._create_normal(prompt, web_search, max_wait_time)
            except Exception as e:
                logger.error(f"Error in chat completion: {str(e)}")
                raise

        def _create_normal(self, prompt: str, web_search: bool, max_wait_time: int) -> ChatCompletion:
            """Handle normal (non-streaming) response"""
            try:
                response = self.hf.complete(
                    query=prompt,
                    web_search=web_search,
                    max_wait_time=max_wait_time
                )

                return ChatCompletion(
                    id=f"chatcmpl-{uuid.uuid4()}",
                    object="chat.completion",
                    created=int(time.time()),
                    model="huggingface",
                    choices=[
                        ChatChoice(
                            index=0,
                            message=ChatMessage(
                                role="assistant",
                                content=response
                            ),
                            finish_reason="stop"
                        )
                    ],
                    usage=Usage()
                )
            except Exception as e:
                logger.error(f"Error in normal response: {str(e)}")
                raise

        def _create_streaming(self, prompt: str, web_search: bool, max_wait_time: int) -> Iterable[ChatCompletionChunk]:
            """Handle streaming response"""
            try:
                chat_id = f"chatcmpl-{uuid.uuid4()}"
                created_time = int(time.time())

                for chunk in self.hf._stream_single_query(
                    query=prompt,
                    web_search=web_search,
                    max_wait_time=max_wait_time
                ):
                    if chunk:  # Only yield non-empty chunks
                        yield ChatCompletionChunk(
                            id=chat_id,
                            object="chat.completion.chunk",
                            created=created_time,
                            model="huggingface",
                            choices=[
                                Choice(
                                    index=0,
                                    delta=ChoiceDelta(
                                        content=chunk,
                                        role="assistant"
                                    ),
                                    finish_reason=None,
                                    logprobs=None
                                )
                            ],
                            system_fingerprint=None,
                            usage=None
                        )

                # Send final chunk
                yield ChatCompletionChunk(
                    id=chat_id,
                    object="chat.completion.chunk",
                    created=created_time,
                    model="huggingface",
                    choices=[
                        Choice(
                            index=0,
                            delta=ChoiceDelta(),
                            finish_reason="stop",
                            logprobs=None
                        )
                    ],
                    system_fingerprint=None,
                    usage=None
                )

            except Exception as e:
                logger.error(f"Error in streaming response: {str(e)}")
                raise

    def close(self):
        """Clean up resources"""
        try:
            if self.session:
                self.session.close()
                logger.info("Chat session closed")
        except Exception as e:
            logger.error(f"Error closing session: {str(e)}")
#
# if __name__ == '__main__':
#     # Initialize like OpenAI
#     client = ChatHFClient(headless=True)  # or HFChat(your_browser_session)
#
#     # Use like OpenAI
#     # response = client.completions.create(
#     #     messages=[
#     #         {"role": "user", "content": "what is 2+3?"}
#     #     ],
#     #     web_search=True  # HuggingFace specific option
#     # )
#     # print(response)
#
#
#     # Streaming like OpenAI
#     for chunk in client.completions.create(
#         messages=[
#             {"role": "user", "content": "telll me about narendra modi in 25 words"}
#         ],
#         stream=True,
#         web_search=False
#     ):
#         print(chunk.choices[0].delta.content,end="",flush=True)