# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.chatbot_response import ChatbotResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ChatbotClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def chatbot(
        self, *, unique_code: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Check if the current user has access to the chatbot.

        Parameters
        ----------
        unique_code : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.chatbot.chatbot(
            unique_code="unique_code",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/chatbot/chat/completions",
            method="GET",
            params={
                "unique_code": unique_code,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_all_user_chatbots(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ChatbotResponse]:
        """
        Get all chatbots belonging to the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ChatbotResponse]
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.chatbot.get_all_user_chatbots()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/chatbot/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ChatbotResponse],
                    parse_obj_as(
                        type_=typing.List[ChatbotResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_chatbot(
        self, *, chatbot_name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ChatbotResponse:
        """
        Create a new chatbot for the current user.

        Parameters
        ----------
        chatbot_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChatbotResponse
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.chatbot.create_chatbot(
            chatbot_name="chatbot_name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/chatbot/",
            method="POST",
            json={
                "chatbot_name": chatbot_name,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ChatbotResponse,
                    parse_obj_as(
                        type_=ChatbotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_chatbots(
        self, chatbot_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ChatbotResponse]:
        """
        Fetch chatbots with optional filters:
        - `id`: Fetch a specific chatbot by its ID.

        Parameters
        ----------
        chatbot_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ChatbotResponse]
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.chatbot.get_chatbots(
            chatbot_id="chatbot_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/chatbot/{jsonable_encoder(chatbot_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ChatbotResponse],
                    parse_obj_as(
                        type_=typing.List[ChatbotResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_chatbot(
        self, chatbot_id: str, *, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ChatbotResponse:
        """
        Update a specific chatbot.

        Parameters
        ----------
        chatbot_id : str

        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChatbotResponse
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.chatbot.update_chatbot(
            chatbot_id="chatbot_id",
            name="name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/chatbot/{jsonable_encoder(chatbot_id)}",
            method="PUT",
            json={
                "name": name,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ChatbotResponse,
                    parse_obj_as(
                        type_=ChatbotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_chatbot(self, chatbot_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a specific chatbot.

        Parameters
        ----------
        chatbot_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.chatbot.delete_chatbot(
            chatbot_id="chatbot_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/chatbot/{jsonable_encoder(chatbot_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncChatbotClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def chatbot(
        self, *, unique_code: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Check if the current user has access to the chatbot.

        Parameters
        ----------
        unique_code : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.chatbot.chatbot(
                unique_code="unique_code",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/chatbot/chat/completions",
            method="GET",
            params={
                "unique_code": unique_code,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_all_user_chatbots(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ChatbotResponse]:
        """
        Get all chatbots belonging to the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ChatbotResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.chatbot.get_all_user_chatbots()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/chatbot/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ChatbotResponse],
                    parse_obj_as(
                        type_=typing.List[ChatbotResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_chatbot(
        self, *, chatbot_name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ChatbotResponse:
        """
        Create a new chatbot for the current user.

        Parameters
        ----------
        chatbot_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChatbotResponse
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.chatbot.create_chatbot(
                chatbot_name="chatbot_name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/chatbot/",
            method="POST",
            json={
                "chatbot_name": chatbot_name,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ChatbotResponse,
                    parse_obj_as(
                        type_=ChatbotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_chatbots(
        self, chatbot_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ChatbotResponse]:
        """
        Fetch chatbots with optional filters:
        - `id`: Fetch a specific chatbot by its ID.

        Parameters
        ----------
        chatbot_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ChatbotResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.chatbot.get_chatbots(
                chatbot_id="chatbot_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/chatbot/{jsonable_encoder(chatbot_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ChatbotResponse],
                    parse_obj_as(
                        type_=typing.List[ChatbotResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_chatbot(
        self, chatbot_id: str, *, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ChatbotResponse:
        """
        Update a specific chatbot.

        Parameters
        ----------
        chatbot_id : str

        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChatbotResponse
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.chatbot.update_chatbot(
                chatbot_id="chatbot_id",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/chatbot/{jsonable_encoder(chatbot_id)}",
            method="PUT",
            json={
                "name": name,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ChatbotResponse,
                    parse_obj_as(
                        type_=ChatbotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_chatbot(self, chatbot_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a specific chatbot.

        Parameters
        ----------
        chatbot_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.chatbot.delete_chatbot(
                chatbot_id="chatbot_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/chatbot/{jsonable_encoder(chatbot_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
