{# Copyright 2024-2025 Yaroslav Petrov <yaroslav.v.petrov@gmail.com>
   
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. #}
from .models import *
from asyncapi_python.amqp import BaseApplication, Consumer
from asyncapi_python.amqp.message_handler_params import MessageHandlerParams
from typing import Callable, Awaitable, Union
from pydantic import RootModel


class Application(BaseApplication):
    """{{ title }}
    
    {{ description }}

    Version: {{ version }}
    """

    def __init__(self, amqp_uri: str, check_impl: bool = True):
        super().__init__(amqp_uri)
        self.consumer = ConsumerWrapper(self._consumer, check_impl)

    async def start(self, blocking: bool = True):
        await self.consumer.start()
        await super().start(blocking=blocking)
    
    {% for op in ops if op.action == "send" -%}
    {%- set in_type = "Union[" + (op.input_types | join(", ")) + "]" -%}
    {%- set out_type = "Union[" + (op.output_types | join(", ") if op.output_types else "None") + "]" -%}
    {%- set callback_type = "Callable[["+ in_type + "], Awaitable[" + out_type + "]" + "]" -%}
    {%- set send_method = "publish" if out_type == "None" else "request" -%}
    {%- set routing_key_literal = '"' + op.routing_key + '"' if op.routing_key else "None" -%}
    async def {{ op.field_name }}(self, message: {{ in_type }}) -> {{ out_type }}:
        self._assert_started()
        return await self._producer.{{ send_method }}(
            message=message,
            exchange={{ '"' + op.exchange + '"' if op.exchange else "None" }},
            routing_key={{ routing_key_literal }},
            {%- if send_method == "request" %}
            output_types={{ "[" + op.output_types | join(", ") + "]" }},
            {%- endif %}
        )
    {% endfor %}

class ConsumerWrapper:
    def __init__(self, consumer: Consumer, check_impl: bool):
        self._inner = consumer
        self._check_impl = check_impl
        self._impls: set[str] = set()
        self._required_impls: set[str] = set([
            {%- for op in ops if op.action == "receive" %}
            "{{ op.field_name }}",
            {%- endfor %}
        ])
    
    async def start(self):
        if not self._check_impl:
            return
        if diff := self._required_impls - self._impls:
            raise AssertionError(
                f"The following operations have not been implemented: {diff}"
            )

    
    {% for op in ops if op.action == "receive" %}
    {%- set in_type = "Union[" + (op.input_types | join(", ")) + "]" -%}
    {%- set out_type = "Union[" + (op.output_types | join(", ") if op.output_types else "None") + "]" -%}
    {%- set callback_type = "Callable[["+ in_type + "], Awaitable[" + out_type + "]" + "]" -%}
    {%- set routing_key_literal = '"' + op.routing_key + '"' if op.routing_key else "None" -%}
    def {{ op.field_name }}(self, callback: {{ callback_type }}) -> None:
        if "{{ op.field_name }}" in self._impls:
            raise AssertionError("Operation {{ op.field_name }} is implemented more than once")
        self._impls.add("{{ op.field_name }}")
        self._inner.on(
            params=MessageHandlerParams.model_validate(
                {%- if op.exchange %}
                {
                    "kind": "exchange", 
                    "type": "fanout",
                    "name": "{{ op.exchange }}",
                    "routing_key": {{ routing_key_literal }},
                }
                {%- else %}
                {"kind": "queue", "name": "{{op.routing_key}}"}
                {%- endif %}
            ),
            input_types={{ "[" + op.input_types | join(", ") + "]" }},
            output_types={{ "[" + op.output_types | join(", ") + "]" }},
            callback=callback,
        )
    {% endfor %}