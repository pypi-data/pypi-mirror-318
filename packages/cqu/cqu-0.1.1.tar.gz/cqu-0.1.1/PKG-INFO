Metadata-Version: 2.1
Name: cqu
Version: 0.1.1
Summary: CQU is a Classical and Quantum Machine Learning Library that is built on top of Qiskit and PyTorch, giving easy access to both classical and quantum machine learning algorithms through simple interfaces. It is designed to be easy to use and to be easily extensible, including a Preprocessor class that allows for easy integration of new data preprocessing techniques.
Home-page: https://github.com/Manoj-E-S/qml-anomaly-detection
Author: Manoj E S, Ian Sushruth Tauro, Kunal L, Aravind S N
Author-email: Manoj E S <johndoe@gmail.com>, Ian Sushruth Tauro <sushruth127@gmail.com>, Kunal L <kunalsalvak@gmail.com>, Aravind S N <aravindsn002@gmail.com>
Project-URL: Github, https://github.com/Manoj-E-S/qml-anomaly-detection
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10.0
Description-Content-Type: text/markdown
Requires-Dist: qiskit
Requires-Dist: torch

# CQU - Classical And Quantum ML

**cqu** is a classical and quantum machine learning library that can be used to quickly and easily reap benefits of both classical and quantum machine learning algorithms!

- Example usage
```
from cqu.preprocessing import Preprocessor, MissingValueStrategies
from cqu.quantum_embedding import QuantumClassifier

pp = Preprocessor("path/to/dataset")
strategies = { 
    'v3': MissingValueStrategies.FILL_MEDIAN, 
    'time': MissingValueStrategies.FILL_NOCB, 
    'class': MissingValueStrategies.DROP_ROWS 
}
pp.clean_missing(strategies)

dataset = pp.dataframe[['v3', 'v10', 'v11', 'class']]

qc = QuantumClassifier()
qc.train(dataset, "class")

test_df = pd.DataFrame(np.random.rand(5))
prediction = qc.predict(test_df).flatten()

if prediction[0] == 1:
    print("Prediction: Fraud")
else:
    print("Prediction: Non-fraud")
```
