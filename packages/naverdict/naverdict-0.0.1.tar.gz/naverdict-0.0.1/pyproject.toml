[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "naverdict"
dynamic = ["version"]
requires-python= ">=3.10"
description = "Access Naver dictionary using Python"
readme = { file = "README.md", content-type = "text/markdown" }
authors = [
    { name = "Reinier Koops", email = "reinier.koops@outlook.com" }
]
license = { file = "LICENSE.md" }
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
]
dependencies = [
    "beautifulsoup4>=4.0.0",
    "selenium>=4.0.0",
    "webdriver_manager>=4.0.0",
    "requests>=2.0.0",
    "click>=8.0.0",
]

[project.scripts]
naverdict = "naverdict.cli:main"

[project.urls]
Repository = "https://github.com/ReinierKoops/naverdict.git"
Changelog = "https://github.com/ReinierKoops/naverdict/releases"

[project.optional-dependencies]
dev = [
    "black>=24.0.0",
    "pytest>=8.0.0",
    "isort>=5.0.0",
    "pre-commit>=4.0.0",
    "ruff>=0.8.0",
]

[tool.setuptools.packages.find]
exclude = ["tests"]

[tool.setuptools.dynamic]
version = {attr = "naverdict.__version__"}

[tool.ruff]
line-length = 88
extend-exclude = ["docs", "mkdocs.yml", ".github", "*md", "LICENSE", ".pre-commit-config.yaml", ".gitignore", "data", "*.css", "*.zip", "MANIFEST.in"]
force-exclude = true

[tool.ruff.lint]
# D100 requires all Python files (modules) to have a "public" docstring even if all functions within have a docstring.
# D104 requires __init__ files to have a docstring
# D200
# D202 No blank lines allowed after function docstring
# D212
# D411 Missing blank line before section
# D412 No blank lines allowed between a section header and its content
# D417 Missing argument descriptions in the docstring # Only ignored because of false positive when using multiline args.
# E203
# E731 do not assign a lambda expression, use a def
# W293 blank line contains whitespace
ignore = ["D100", "D104", "D200", "D202", "D212", "D411", "D412", "D417", "E203", "E731", "W293"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.isort]
line_length = "88"
profile = "black"
filter_files = true

[tool.codespell]
skip = "**.egg-info*"

[tool.black]
line-length = 88