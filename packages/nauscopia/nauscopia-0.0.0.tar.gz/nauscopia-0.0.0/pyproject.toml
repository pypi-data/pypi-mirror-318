[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=42", # At least v42 of setuptools required.
  "versioningit<4",
]

[project]
name = "nauscopia"
description = "Computer vision utilities for maritime SAR purposes."
readme = "README.md"
keywords = [
  "computer vision",
  "cv",
  "deep learning",
  "object detection",
  "real-time video processing",
  "sar",
  "scene parsing",
  "search and rescue",
  "semantic segmentation",
  "swiss army knife",
  "toolbox",
  "yolo",
]
license = { file = "LICENSE" }
maintainers = [
  { name = "Andreas Motl", email = "andreas.motl@panodata.org" },
]

authors = [
  { name = "Florian Vahl", email = "florian@flova.de" },
  { name = "Petrosilius", email = "petrosilius@posteo.de" },
]
requires-python = ">=3.9,<3.13"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Manufacturing",
  "Intended Audience :: Science/Research",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: European Union Public Licence 1.2 (EUPL 1.2)",
  "License :: OSI Approved :: GNU Affero General Public License v3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Education",
  "Topic :: File Formats",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dynamic = [
  "version",
]
dependencies = [
  "attrs<25",
  "click<9",
  "colorlog<7",
  "numpy<2",
  "opencv-python<4.11",
  "platformdirs<5",
  "requests<3",
  "tqdm<5",
  "yolov10-onnx==0.3.0",
]
optional-dependencies.all = [
  "nauscopia[develop,docs,release,test]",
]
optional-dependencies.develop = [
  "mypy<1.12",
  "pip",
  "poethepoet<1",
  "pyproject-fmt<3",
  "ruff<0.9",
  "validate-pyproject<0.19",
]
optional-dependencies.docs = [
  "furo",
  "myst-parser[linkify]<5",
  "sphinx<8.1",
  "sphinx-autobuild==2024.10.3",
  "sphinx-copybutton<0.6",
  "sphinx-design-elements<0.5",
]
optional-dependencies.release = [
  "build<2",
  "keyring",
  "twine<6",
]
optional-dependencies.test = [
  "pytest<9",
  "pytest-cov<6",
  "requests-cache<1.3",
]
urls.changelog = "https://codeberg.org/sarcam/nauscopia/src/branch/main/CHANGES.md"
urls.documentation = "https://sarcam.flova.de/"
urls.homepage = "https://sarcam.flova.de/"
urls.repository = "https://codeberg.org/sarcam/nauscopia"
scripts.nauscopia = "nauscopia.api.cli:cli"

[tool.setuptools.packages.find]
namespaces = false

# ===================
# Tasks configuration
# ===================

[tool.ruff]
line-length = 100

lint.select = [
  # flake8-unused-arguments
  "ARG",
  # pyupgrade
  # "UP",
  # flake8-commas
  "COM",
  # Pycodestyle
  "E",
  # eradicate
  "ERA",
  # Pyflakes
  "F",
  # isort
  "I",
  # flake8-quotes
  "Q",
  # return
  "RET",
  # Bandit
  "S",
  # print
  "T20",
  # future-annotations
  # "FA",
  # flake8-type-checking
  "TCH",
  "W",
  # flake8-2020
  "YTT",
  # flake8-use-pathlib
  # "PTH"
]

lint.extend-ignore = [
  # The following rule may cause conflicts when used with the formatter: `COM812`.
  "COM812",
  # TEMPORARY: Found commented-out code.
  "ERA001",
  # Unnecessary variable assignment before `return` statement
  "RET504",
  # Unnecessary `elif` after `return` statement
  "RET505",
]

lint.per-file-ignores."docs/conf.py" = [ "ERA001" ] # Allow commented-out code.
lint.per-file-ignores."tests/*" = [ "S101" ]        # Allow use of `assert`.

[tool.pytest.ini_options]
addopts = "-rA --verbosity=3 --cov --cov-report=term-missing --cov-report=xml"
minversion = "2.0"
log_level = "DEBUG"
log_cli_level = "DEBUG"
log_format = "%(asctime)-15s [%(name)-36s] %(levelname)-8s: %(message)s"
testpaths = [
  "nauscopia",
  "tests",
]
xfail_strict = true
markers = [
]

[tool.coverage.run]
branch = false
omit = [
  "tests/*",
]
source = [ "nauscopia" ]

[tool.coverage.report]
fail_under = 0
show_missing = true

[tool.mypy]
packages = [ "nauscopia" ]
exclude = [
]
ignore_missing_imports = true
check_untyped_defs = false
implicit_optional = true
install_types = true
no_implicit_optional = true
non_interactive = true
show_error_codes = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.0"

[tool.poe.tasks]

check = [
  "lint",
  "test",
]

docs-autobuild = [
  { cmd = "sphinx-autobuild --open-browser --watch=docs docs docs/_build" },
]
docs-html = [
  { cmd = "sphinx-build -W --keep-going docs docs/_build" },
]
docs-linkcheck = [
  { cmd = "sphinx-build -W --keep-going -b linkcheck docs docs/_build" },
]

format = [
  { cmd = "ruff format ." },
  # Configure Ruff not to auto-fix (remove!):
  # unused imports (F401), unused variables (F841), `print` statements (T201), and commented-out code (ERA001).
  { cmd = "ruff check --fix --ignore=ERA --ignore=F401 --ignore=F841 --ignore=T20 --ignore=ERA001 ." },
  { cmd = "pyproject-fmt --keep-full-version pyproject.toml" },
]

lint = [
  { cmd = "ruff format --check ." },
  { cmd = "ruff check ." },
  { cmd = "validate-pyproject pyproject.toml" },
  { cmd = "mypy" },
]

release = [
  { cmd = "python -m build" },
  { cmd = "twine upload dist/*.tar.gz dist/*.whl" },
]

test = { cmd = "pytest" }
