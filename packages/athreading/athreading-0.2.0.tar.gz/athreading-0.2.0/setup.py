# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['athreading']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'athreading',
    'version': '0.2.0',
    'description': 'Asynchronous threading package for Python',
    'long_description': '# athreading\n\n[![Test and build](https://github.com/calgray/athreading/actions/workflows/ci.yml/badge.svg)](https://github.com/calgray/athreading/actions/workflows/ci.yml)\n[![PyPI version](https://img.shields.io/pypi/v/athreading.svg)](https://pypi.python.org/pypi/athreading)\n[![PyPI python versions](https://img.shields.io/pypi/pyversions/athreading.svg?style=flat&logo=python&logoColor=white)](https://pypi.python.org/pypi/athreading)\n[![License](https://img.shields.io/badge/license-BSD_3--clause-blue.svg)](https://opensource.org/license/bsd-3-clause/)\n[![Codecov](https://codecov.io/gh/calgray/athreading/branch/main/graph/badge.svg)](https://app.codecov.io/github/calgray/athreading)\n\n[![Code style](https://img.shields.io/badge/code_style-black-000000.svg)](https://github.com/psf/black)\n[![Checked with mypy](https://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n[![Pydocstyle](https://img.shields.io/badge/pydocstyle-enabled-AD4CD3)](http://www.pydocstyle.org/en/stable/)\n\n`athreading` is a Python library that allows you to run synchronous I/O functions asynchronously using `asyncio` via background threads. It provides decorators to adapt synchronous functions and generators, enabling them to operate without blocking the event loop.\n\n## Features\n\n- **`@athreading.call`**: Converts a synchronous function into an asynchronous function.\n- **`@athreading.iterate`**: Converts a synchronous iterator into an asynchronous iterator.\n- **`@athreading.generate`**: Converts a synchronous generator into an asynchronous generator.\n\n*Note*: Due to Python\'s Global Interpreter Lock (GIL), this library does not provide multi-threaded CPU parallelism unless using Python 3.9 with `nogil` or Python 3.13 with free threading enabled.\n\n## Installation\n\n`athreading` can be installed using pip:\n\n```bash\npip install athreading\n```\n\n## Usage\n\n`athreading` enables running synchronous functions and iterators asynchronously using `asyncio`.\n\n### 1. Converting a Synchronous Function\n\nThe `@athreading.call` decorator to convert a synchronous function into an asynchronous function.\n\n```python\nimport athreading\nimport time\nimport math\nimport asyncio\n\n@athreading.call\ndef compute_sqrt(x):\n    time.sleep(0.5)  # Simulate a blocking I/O operation\n    return math.sqrt(x)\n\nasync def amain():\n    results = await asyncio.gather(\n        compute_sqrt(2),\n        compute_sqrt(3),\n        compute_sqrt(4)\n    )\n    print(results)\n\nasyncio.run(amain())\n```\n\nIn this example, `compute_sqrt` is a synchronous function that sleeps for 0.5 seconds to simulate a blocking I/O operation. By decorating it with `@athreading.call`, it can be awaited within an asynchronous context, allowing multiple calls to run concurrently without blocking the event loop.\n\n### 2. Converting a Synchronous Iterator\n\nThe `@athreading.iterate` decorator transforms a synchronous iterator into an asynchronous iterator.\n\n```python\nimport athreading\nimport time\nimport datetime\nimport asyncio\n\n@athreading.iterate\ndef time_generator(n, label):\n    for _ in range(n):\n        time.sleep(0.5)  # Simulate a blocking I/O operation\n        yield f"{label}: {datetime.datetime.now()}"\n\nasync def amain():\n    async def print_stream(label):\n        async with time_generator(10, label) as stream:\n            async for current_time in stream:\n                print(current_time)\n\n    await asyncio.gather(\n        print_stream("Stream 1"),\n        print_stream("Stream 2"),\n        print_stream("Stream 3"),\n    )\n\nasyncio.run(amain())\n```\n\nThis example demonstrates running three asynchronous streams concurrently. Each stream processes the `time_generator` function independently, and the decorator ensures iteration occurs without blocking the event loop.\n\n### 3. Converting a Synchronous Generator\n\nThe `@athreading.generate` decorator converts a synchronous generator function into an asynchronous generator function that supports `asend`.\n\n```python\nimport athreading\nimport time\nimport asyncio\n\n@athreading.generate\ndef controlled_counter(start, step):\n    current = start\n    while True:\n        time.sleep(0.5)  # Simulate a blocking I/O operation\n        received = yield current\n        current = received if received is not None else current + step\n\nasync def amain():\n    async with controlled_counter(0, 1) as async_gen:\n        print(await async_gen.asend(None))  # Start the generator\n        print(await async_gen.asend(None))  # Advance with default step\n        print(await async_gen.asend(10))   # Send a new value to control the counter\n        print(await async_gen.asend(None))  # Continue from the new value\n\nasyncio.run(amain())\n```\n\nThis example demonstrates how `@athreading.generate` transforms a synchronous generator into an asynchronous generator. The `asend` method sends values to control the generator\'s state dynamically, enabling interactive workflows while avoiding blocking the event loop.\n\n## Maintenance\n\nThis is a minimal Python library that uses [poetry](https://python-poetry.org) for packaging and dependency management. It also provides [pre-commit](https://pre-commit.com/) hooks (for [isort](https://pycqa.github.io/isort/), [Black](https://black.readthedocs.io/en/stable/), [Flake8](https://flake8.pycqa.org/en/latest/) and [mypy](https://mypy.readthedocs.io/en/stable/)) and automated tests using [pytest](https://pytest.org/) and [GitHub Actions](https://github.com/features/actions). Pre-commit hooks are automatically kept updated with a dedicated GitHub Action, this can be removed and replace with [pre-commit.ci](https://pre-commit.ci) if using an public repo. It was developed by the [Imperial College Research Computing Service](https://www.imperial.ac.uk/admin-services/ict/self-service/research-support/rcs/).\n\n### Testing\n\nTo modify, test and request changes to this repository:\n\n1. [Download and install Poetry](https://python-poetry.org/docs/#installation) following the instructions for the target OS.\n2. Clone `git@github.com:calgray/athreading.git` and make it the working directory.\n3. Set up the virtual environment:\n\n   ```bash\n   poetry install\n   ```\n\n4. Activate the virtual environment (alternatively, ensure any python-related command is preceded by `poetry run`):\n\n   ```bash\n   poetry shell\n   ```\n\n5. Install the git hooks:\n\n   ```bash\n   pre-commit install\n   ```\n\n6. Run the tests:\n\n   ```bash\n   pytest\n   ```\n\n### Publishing\n\nThe GitHub workflow includes an action to publish on release.\n\nTo run this action, uncomment the commented portion of `publish.yml`, and modify the steps for the desired behaviour (ie. publishing a Docker image, publishing to PyPI, deploying documentation etc.)\n\n## License\n\nThis project is licensed under the BSD-3-Clause License.\n\nFor more information and examples, please visit the [athreading GitHub repository](https://github.com/calgray/athreading).\n',
    'author': 'Callan Gray',
    'author_email': 'cal.j.gray@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
