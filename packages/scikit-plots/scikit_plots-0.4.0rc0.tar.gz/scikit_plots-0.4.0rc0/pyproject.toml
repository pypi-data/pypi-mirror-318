# This file is the modern replacement for setup.py, used to configure how your Python package is built.
# 
# https://packaging.python.org/en/latest/discussions/setup-py-deprecated/#setup-py-deprecated
#
# https://packaging.python.org/en/latest/specifications/pyproject-toml/
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#a-full-example
# 
# The [build-system] section specifies the build system requirements.
# "setuptools.build_meta" is the default backend used by setuptools for building projects.
# You can add other build like 'mesonpy' dependencies as needed.
# 
# https://setuptools.pypa.io/en/stable/userguide/pyproject_config.html
# https://setuptools.pypa.io/en/stable/userguide/declarative_config.html#metadata
# 
# SciPy probably the most complex project using Meson and meson-python.
# It combines CPython extensions and libraries written in C, C++, Fortran, Cython, and Pythran.
#
# https://mesonbuild.com/meson-python/tutorials/introduction.html
# https://mesonbuild.com/meson-python/projects-using-meson-python.html
#
# https://setuptools.pypa.io/en/stable/build_meta.html#dynamic-build-dependencies-and-other-build-meta-tweaks
[build-system]
# backend-path = ["_custom_build"]
build-backend = "mesonpy"                   # Specifies the Python backend to use for building the package.
requires = [                                # Building an env isolated one
  "meson-python>=0.16.0",                   # A PEP 517 backend for building Python packages with Meson.
  "meson>=1.5.0",                           # The Meson build system itself to coordinate the compilation of code.
  "ninja>=1.11.0",                          # The Ninja build system used to compile code
  "cython>=3.0.8",                          # C/C++ Cython bindings
  "pybind11>=2.13.0",                       # C/C++ Pybind bindings
  # numpy requirement for wheel builds for distribution on PyPI - building
  # against 2.x yields wheels that are also compatible with numpy 1.x at
  # runtime.
  # Note that building against numpy 1.x works fine too - users and
  # redistributors can do this by installing the numpy version they like and
  # disabling build isolation.
  "numpy>=2.0.0",                           # Numpy C-Api Headers and python module
  # Add other dependencies here if needed
  "scipy>=1.6.0",
  "pythran>=0.14.0",
  "aggdraw",                                # visualkeras dep
]

# The [project] section contains metadata about your project.
# https://setuptools.pypa.io/en/stable/userguide/pyproject_config.html
# https://setuptools.pypa.io/en/stable/userguide/pyproject_config.html#dynamic-metadata
[project]
name = "scikit-plots"                       # The name of your project
dynamic = ["version"]                       # Determined dynamically, inside one of meson.build, setup.cfg, setuptools.dynamic
description = "An intuitive library to add plotting functionality to scikit-learn objects."

# Keywords to describe your project, useful for searchability
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#keywords
# https://packaging.python.org/en/latest/specifications/core-metadata/#keywords
keywords = [
  "data science",
  "machine learning",
  "visualization",
  "matplotlib",
  "scikit-learn",
  "xgboost",
  "catboost",
  "tensorflow",
  "keras",
  "pytorch",
  "transformers",
]

# Classifiers help users understand the maturity, audience,
# and compatible environments for your project.
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#classifiers
# https://packaging.python.org/en/latest/specifications/core-metadata/#classifier-multiple-use
# https://pypi.org/pypi?%3Aaction=list_classifiers
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  'License :: OSI Approved :: BSD License',
  'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  'Programming Language :: C',
  'Programming Language :: C++',
  'Programming Language :: Cython',
  'Programming Language :: Fortran',
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.5",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.14",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Scientific/Engineering :: Visualization",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules"
]

# The readme file this is what users will see on your project's PyPI page.
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#readme
# [[project.readme]]  # Usage individually, If Needed
# file = "README.md"
# content-type = "text/x-rst"
# readme = "README.md"
readme = {file = "README.md", content-type = "text/markdown"}

# License information is critical. It's recommended to specify the license file.
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#license
# https://packaging.python.org/en/latest/specifications/core-metadata/#license-file-multiple-use
# TODO: add `license-files` once PEP 639 is accepted (see meson-python#88)
# at that point, no longer include them in `py3.install_sources()`
# [[project.license]]  # Usage individually, If Needed
license = {file = "LICENSE"}  # Primary license file

# [tool.meson-python]
# license-files field to be used only if the license field contains a valid SPDX license expression.
# license = 'BSD-3-Clause'  # 'MIT', 'Apache-2.0', 'GPL-3.0-or-later', 
# license-files = ['LICEN[CS]E*', 'LICENSE']  # must valid glob patterns

# List the authors of the project
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#authors-maintainers
# [[project.authors]]  # Usage individually, If Needed
authors = [
  # {name = "scikit-plots developers", email=""},
  # {name = "Reiichiro Nakano et al.", email = "reiichiro.s.nakano@gmail.com"},
  # {name = "Prateek Sharma", email = "s.prateek3080@gmail.com"},
  # ...
]
# Project maintainers
# [[project.maintainers]]  # Usage individually, If Needed
maintainers = [
  {name = "scikit-plots developers", email=""},
]

# Specify the minimum Python version required
# https://packaging.python.org/en/latest/specifications/core-metadata/#requires-python
requires-python = ">=3.9"

# Replace these with the actual dependencies from requirements.txt
# https://setuptools.pypa.io/en/stable/userguide/dependency_management.html#declaring-required-dependency
dependencies = [
  # Core dependencies required for the project to run
  "numpy>=1.23.5",
  "scipy>=1.6.0",
  "matplotlib>=3.5",
  "pandas>=1.5.1",
  "scikit-learn>=1.1",
  "joblib>=1.2.0", 
  "threadpoolctl>=3.1.0", 
  "aggdraw",
]

# Development dependencies (for linting, type checking, and general dev tools)
# https://setuptools.pypa.io/en/stable/userguide/dependency_management.html#optional-dependencies
# https://peps.python.org/pep-0508/
# https://peps.python.org/pep-0735/#deferred-ideas
[project.optional-dependencies]
dev = [
  "numpydoc>=1.2.0",                        # Numpy-style docstrings
  "mypy>=1.9.0",                            # Type checking
  "pycodestyle",                            # PEP-8 compliance
  "ruff>=0.5.1",                            # Linting
  "cython-lint>=0.12.2",                    # Linting for Cython
  "black>=24.3.0",                          # Code formatting
  "doit>=0.36.0",                           # Task automation
  "typing_extensions",                      # Backports for older Python versions
  "pydevtool",                              # Development tools
  "types-psutil",                           # Type stubs for psutil
  "rich-click",                             # Enhanced CLI
]
# Build dependencies (for packaging and building extensions)
build = [
  "pre-commit",                             # Git hook scripts are useful for identifying simple issues before submission to code review. ".pre-commit-config.yaml"
  "meson-python>=0.16.0",                   # A PEP 517 backend for building Python packages with Meson.
  "meson>=1.5.0",                           # The Meson build system itself to coordinate the compilation of code.
  "ninja>=1.11.0",                          # The ninja build system used to compile code
  "Cython>=3.0.8",                          # Cython bindings for extensions
  "pybind11>=2.13.2",                       # Python bindings
  "numpy>=1.23.5",
  "scipy>=1.6.0",
  "pythran>=0.14.0",                        # Static Python compiler
  "pandas>=1.5.1",
  "matplotlib>=3.5",
  "build",                                  # Standard Python build tool
  "twine",                                  # Upload to PyPI
]
# Testing dependencies
test = [
  "pytest>=7.1.2",                          # Core testing framework
  "pytest-cov>=2.9.0",                      # Coverage reports
  "pytest-xdist",                           # Use Multiple CPUs to speed up
  "pytest-mpl",                             # Matplotlib testing
  "hypothesis>=6.30",                       # Property-based testing
  "matplotlib>=3.5",                        # Plotting for tests
  "pandas>=1.5.1",                          # Data analysis for tests
  "pyarrow>=12.0.0",                        # Arrow format
  "polars>=0.20.30",                        # DataFrame library
  "pyamg>=4.0.0",                           # Algebraic multigrid solvers
  "pooch>=1.6.0",                           # Data downloading
  "scikit-learn>=1.1",                      # Machine learning
  "scikit-image>=0.17.2",                   # Image processing
  "catboost",                               # Gradient boosting
  "tensorflow",                             # Deep learning
  "aggdraw",
]
# Documentation dependencies
docs = [
  "pooch>=1.6.0",                           # Data management
  "packaging>=21",                          # Package utilities
  "numpydoc>=1.2.0",                        # Numpy-style docstrings
  "jinja2",                                 # Templating engine
  "sphinx>=5.0.0,<9.0.0",                   # Documentation generator
  "sphinx-rtd-theme",                       # ReadTheDocs theme
  "pydata-sphinx-theme",                    # PyData theme
  "sphinx-gallery",                         # Gallery examples
  "sphinx-prompt",                          # Shell prompts
  "sphinxext-opengraph",                    # Social media metadata
  "sphinx-copybutton",                      # Copy button for code blocks
  "sphinxcontrib-sass",                     # SASS support
  "sphinx-design",                          # Modern design elements
  "sphinx-remove-toctrees",                 # Customize toctrees
  "myst-parser",                            # Markdown support
  "myst-nb",                                # Jupyter Notebook integration
  "jupytext",                               # Text-based Notebook formats
  "jupyter-sphinx",                         # Jupyter integration
  "jupyterlite-sphinx",                     # JupyterLite integration
  "jupyterlite-pyodide-kernel",             # Pyodide support
  "intersphinx_registry",                   # Intersphinx management
  "colorspacious",                          # Color management
  "sphinxcontrib-svg2pdfconverter",         # SVG to PDF conversion
  "sphinxcontrib-inlinesyntaxhighlight",    # Inline syntax highlighting
  "sphinx-tabs",                            # Tabbed content
  "sphinx-tags",                            # Tagging support
  "matplotlib>=3.5",                        # Visualization
  "plotly>=5.10",                           # Interactive plotting
  "seaborn>=0.11",                          # Statistical plotting
  "pandas>=1.5",                            # Data analysis
  "polars>=0.20.30",                        # DataFrame library
  "pyarrow>=12.0.0",                        # Arrow format
  "Pillow>=9.1",                            # Image processing
  "scikit-image>=0.17.2",                   # Image processing
  "scikit-learn>=1.1",                      # Machine learning
  "tensorflow>=2.10",                       # Deep learning
]
# Maintenance tools
maintenance = [
  "conda-lock==2.5.7",                      # Dependency lock files for Conda
]
# Specialized dependencies for specific hardware
cpu = [
  "numpy",                                  # CPU-based numerical computing
  "jax",                                    # import jax.numpy as jnp
  # "jaxlib",                                 # import jax.numpy as jnp
]
gpu = [
  # https://jax.readthedocs.io/en/latest/installation.html#installation
  # "jax[cuda] -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html",             # import jax.numpy as jnp
  # "jax[cuda11_cudnn805] -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html",  # import jax.numpy as jnp
  # "jax[cuda12]",                          # import jax.numpy as jnp
  "cupy",                                   # GPU-based numerical computing
  "torch",                                  # PyTorch
]
tpu = [
  "tensorflow",                             # TPU-accelerated machine learning
  # JAXlib is a library by DeepMind that provides the low-level bindings for JAX and allows you to perform tensor computations on TPU, GPU, and CPU.
  # https://jax.readthedocs.io/en/latest/installation.html#installation
  # "jax[tpu] -f https://storage.googleapis.com/jax-releases/libtpu_releases.html"
  "jax[tpu]",                               # TPU-accelerated machine learning
  # "dm-haiku",                               # neural network library built on top of JAX by Google Research
  # "flax",                                   # Flax is another JAX-based library but with a more comprehensive set of tools for defining neural networks.
]

# Links to important pages related to the project
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#urls
# https://packaging.python.org/en/latest/specifications/well-known-project-urls/#well-known-labels
# https://packaging.python.org/en/latest/specifications/core-metadata/#deprecated-fields
[project.urls]
# homepage (Homepage)
homepage        = "https://scikit-plots.github.io"
# source (Source Code), repository, sourcecode, github
repository      = "https://github.com/scikit-plots/scikit-plots"
# download (Download), equivalent to Download-URL
download        = "https://github.com/scikit-plots/scikit-plots"
# changelog (Changelog), changes, whatsnew, history
# The changelog, really useful for ongoing users of your project
changelog       = "https://scikit-plots.github.io/dev/whats_new/index.html"
# releasenotes (Release Notes)
# documentation (Documentation), docs
documentation   = "https://scikit-plots.github.io"
# issues (Issue Tracker), "Bug Tracker"
# bugs, issue, tracker, issuetracker, bugtracker
issues          = "https://github.com/scikit-plots/scikit-plots/issues"
# funding (Funding), sponsor, donate, donation
# Donate        = "https://github.com/scikit-plots/scikit-plots#donate"
# Forum         = "https://github.com/orgs/scikit-plots/discussions"
# Forked        = "https://github.com/reiinakano/scikit-plot"

# Advanced plugins: Creating executable scripts
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#advanced-plugins
# https://setuptools.pypa.io/en/stable/userguide/entry_point.html#entry-points-syntax
# [project.scripts]
# my-script = "my_package.module:function"
# [project.scripts]
# spam-cli = "spam:main_cli"
# [project.gui-scripts]
# spam-gui = "spam:main_gui"
# [project.entry-points."spam.magical"]
# tomatoes = "spam:main_tomatoes"

# Configuration for the pytest testing framework
[tool.pytest.ini_options]
minversion = "6.0"  # Specify the minimum version of pytest
addopts = "-ra -q"  # Add command-line options
testpaths = [
  "scikitplot",
]  # Directories where tests are located
# filterwarnings = [
#   "error",
#   'default:.*pyamg, which cannot \(yet\) be imported with NumPy >=2:RuntimeWarning'
# ]

# Black is a code formatter; this section configures its behavior.
[tool.black]
line-length = 100  # Maximum line length 88
target-version = ['py35', 'py310', 'py314']  # Python versions to target
preview = true     # Enable Black's preview features
exclude = '''
/(
    \.eggs         # exclude a few common directories in the
  | \.git          # root of the project
  | \.mypy_cache
  | \.vscode
  | builddir
  | build
  | dist
  | docs/build
  | docs/_build
  | docs/auto_examples
  | scikitplot/externals
  | asv_benchmarks/env
  | auto_building_tools/
)/
'''

[tool.ruff]
# max line length for black
line-length = 88
target-version = "py38"
exclude=[
  ".git",
  "__pycache__",
  "dist",
  "doc/build",
  "build",
]

[tool.ruff.lint]
# This enables us to use CPY001: copyright header check
preview = true
# This enables us to use the explicit preview rules that we want only
explicit-preview-rules = true
# all rules can be found here: https://beta.ruff.rs/docs/rules/
select = ["E", "F", "W", "I", "CPY001"]
ignore=[
    # space before : (needed for how black formats slicing)
    "E203",
    # do not assign a lambda expression, use a def
    "E731",
    # do not use variables named 'l', 'O', or 'I'
    "E741",
    # E721 is in preview (july 2024) and gives many false positives.
    # Use `is` and `is not` for type comparisons, or `isinstance()` for
    # isinstance checks
    "E721",
    # F841 is in preview (july 2024), and we don't care much about it.
    # Local variable ... is assigned to but never used
    "F841",
]

[tool.ruff.lint.flake8-copyright]
notice-rgx = "\\#\\ Authors:\\ The\\ scikit\\-plots\\ developers\\\r?\\\n\\#\\ SPDX\\-License\\-Identifier:\\ BSD\\-3\\-Clause"

[tool.ruff.lint.per-file-ignores]
# It's fine not to put the import at the top of the file in the examples
# folder.
"galleries/*"=["E402"]
"docs/conf.py"=["E402"]
"docs/*"=["CPY001"]
"**/tests/*"=["CPY001"]
"tools/*"=["CPY001"]
".spin/*"=["CPY001"]
".github/*"=["CPY001"]
# __doc__ is too long (>4096 chars) and therefore false positive on copyright check
# "examples/model_selection/plot_precision_recall.py"=["CPY001"]
# __all__ has un-imported names
# "scikitplot/__init__.py"=["F822"]


[tool.cython-lint]
# Ignore the same error codes as ruff
# + E501 (line too long) because keeping it < 88 in cython
# often makes code less readable.
ignore = [
    # multiple spaces/tab after comma
    'E24',
    # space before : (needed for how black formats slicing)
    'E203',
    # line too long
    'E501',
    # do not assign a lambda expression, use a def
    'E731',
    # do not use variables named 'l', 'O', or 'I'
    'E741',
    # line break before binary operator
    'W503',
    # line break after binary operator
    'W504',
]

[tool.cibuildwheel]
# Note: the below skip command doesn't do much currently, the platforms to
# build wheels for in CI are controlled in `.github/workflows/wheels.yml` and
# `tools/ci/cirrus_wheels.yml`.
build-frontend = "build"
skip = "cp36-* cp37-* cp-38* pp37-* *-manylinux_i686 *_ppc64le *_s390x *_universal2"
# cibuildwheel to represent
# {project} might be used for higher-level tasks, like referencing the project root.
# {package} is used to refer to the specific package directory
before-build = "bash {project}/tools/wheels/cibw_before_build.sh {project}"
# The build will use openblas64 everywhere, except on arm64 macOS >=14.0 (uses Accelerate)
config-settings = "setup-args=-Duse-ilp64=true setup-args=-Dallow-noblas=false build-dir=build"
before-test = "pip install -r {project}/requirements/test_requirements.txt"
test-command = "bash {project}/tools/wheels/cibw_test_command.sh {project}"

[tool.cibuildwheel.linux]
# environment = {}
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"
musllinux-x86_64-image = "musllinux_1_2"

# Linux-specific environment variables
[tool.cibuildwheel.linux.environment]
# /project will be the $PWD equivalent inside the docker used to build the wheel
LD_LIBRARY_PATH = "/project/.openblas/lib:$LD_LIBRARY_PATH"
PKG_CONFIG_PATH = "/project/.openblas"
CIBW_ENVIRONMENT = "PKG_CONFIG_PATH=/project/.openblas"
# RUNNER_OS is a GitHub Actions specific env var; define it here so it works on Cirrus CI too
RUNNER_OS="Linux"

[tool.cibuildwheel.macos]
# universal2 wheels are not supported (see gh-21233), use `delocate-fuse` if you need them
# note that universal2 wheels are not built, they're listed in the tool.cibuildwheel.skip
# section
# Not clear why the DYLD_LIBRARY_PATH is not passed through from the environment
repair-wheel-command = [
  "export DYLD_LIBRARY_PATH=$PWD/.openblas/lib",
  "echo DYLD_LIBRARY_PATH $DYLD_LIBRARY_PATH",
  "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}",
]

# macOS-specific environment variables
[tool.cibuildwheel.macos.environment]
# /project will be the $PWD equivalent inside the docker used to build the wheel
DYLD_LIBRARY_PATH = "/project/.openblas/lib"
PKG_CONFIG_PATH = "/project/.openblas"
CIBW_ENVIRONMENT_MACOS = "PKG_CONFIG_PATH=/project/.openblas"


[tool.cibuildwheel.windows]
# config-settings = "setup-args=--vsenv setup-args=-Dallow-noblas=false build-dir=build"
repair-wheel-command = "bash -el ./tools/wheels/repair_windows.sh {wheel} {dest_dir}"

# [[tool.cibuildwheel.overrides]]
# select = [
#   "*-win32",
##   "*-win_amd64"
# ]
# config-settings = "setup-args=--vsenv setup-args=-Dallow-noblas=true build-dir=build"
# repair-wheel-command = ""  # Leave empty if no repair script is needed

# Windows-specific environment variables
[tool.cibuildwheel.windows.environment]
# /project will be the $PWD equivalent inside the docker used to build the wheel
PATH = "{project}/.openblas/lib;$PATH"
PKG_CONFIG_PATH = "{project}/.openblas"
CIBW_ENVIRONMENT_WINDOWS = "PKG_CONFIG_PATH={project}/.openblas"

[tool.cibuildwheel.pyodide]
config-settings = "build-dir=build setup-args=--cross-file=$PWD/tools/ci/emscripten/emscripten.meson.cross setup-args=-Dblas=none setup-args=-Dlapack=none"

[[tool.cibuildwheel.overrides]]
select = "*pyodide*"
before-test = "pip install -r {project}/requirements/emscripten_test_requirements.txt"
# Pyodide ensures that the wheels are already repaired by auditwheel-emscripten
repair-wheel-command = ""
test-command = "python -m pytest --pyargs numpy -m 'not slow'"

# [tool.meson-python]
# meson = 'vendored-meson/meson/meson.py'

# [tool.meson-python.args]
# install = ['--tags=runtime,python-runtime,tests,devel']

# [tool.spin]
# package = 'numpy'

# [tool.spin.meson]
# cli = 'vendored-meson/meson/meson.py'

# [tool.spin.commands]
# "Build" = [
#   ".spin/cmds.py:build",
#   ".spin/cmds.py:test",
#   ".spin/cmds.py:mypy",
#   ".spin/cmds.py:config_openblas",
#   ".spin/cmds.py:lint",
# ]
# "Environments" = [
#   "spin.cmds.meson.run",
#   ".spin/cmds.py:ipython",
#   ".spin/cmds.py:python",
#   "spin.cmds.meson.gdb",
#   "spin.cmds.meson.lldb"
# ]
# "Documentation" = [
#   ".spin/cmds.py:docs",
#   ".spin/cmds.py:changelog",
#   ".spin/cmds.py:notes",
#   ".spin/cmds.py:check_docs",
#   ".spin/cmds.py:check_tutorials",
# ]
# "Metrics" = [".spin/cmds.py:bench"]