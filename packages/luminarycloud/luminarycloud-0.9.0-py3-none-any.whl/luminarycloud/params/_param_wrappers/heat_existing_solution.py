# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id

from .initialization_heat import InitializationHeat


@dataclass(kw_only=True)
class HeatExistingSolution(InitializationHeat):
    """Apply the starting values from an existing solution for the same mesh."""

    solution_id: str = ""
    "ID for the existing solution to use for initialization."

    def _to_proto(self) -> clientpb.InitializationHeat:
        _proto = super()._to_proto()
        _proto.initialization_type = enum.InitializationType.EXISTING_SOLUTION
        if self.solution_id is not None:
            _proto.existing_solution_id = self.solution_id
        return _proto

    def _from_proto(self, proto: clientpb.InitializationHeat) -> None:
        super()._from_proto(proto)
        assert proto.initialization_type == enum.InitializationType.EXISTING_SOLUTION
        self.solution_id = proto.existing_solution_id
        return None
