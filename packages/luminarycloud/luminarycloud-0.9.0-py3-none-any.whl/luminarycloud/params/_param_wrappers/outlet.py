# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id

from .boundary_conditions_fluid import BoundaryConditionsFluid
from .outlet_pressure import OutletPressure
from .outlet_strategy import OutletStrategy
from .outlet_target_corrected_mass_flow_rate import OutletTargetCorrectedMassFlowRate
from .outlet_target_mass_flow_rate import OutletTargetMassFlowRate


@dataclass(kw_only=True)
class Outlet(BoundaryConditionsFluid):
    """Outlet boundary condition."""

    outlet_strategy: OutletStrategy = field(default_factory=OutletPressure)
    "Outlet strategy."
    pressure_constraint: enum.OutletPressureConstraint = (
        enum.OutletPressureConstraint.OUTLET_LOCAL_CONSTRAINT
    )
    "Mode of imposing pressure at the outlet."

    def _to_proto(self) -> clientpb.BoundaryConditionsFluid:
        _proto = super()._to_proto()
        _proto.physical_boundary = enum.PhysicalBoundary.OUTLET
        if isinstance(self.outlet_strategy, OutletPressure):
            _proto.outlet_strategy = clientpb.OUTLET_PRESSURE
            _proto.outlet_pressure.value = self.outlet_strategy.pressure
        if isinstance(self.outlet_strategy, OutletTargetMassFlowRate):
            _proto.outlet_strategy = clientpb.OUTLET_TARGET_MASS_FLOW_RATE
            _proto.outlet_pressure.value = self.outlet_strategy.pressure
            _proto.outlet_target_mass_flow_rate.value = self.outlet_strategy.target_mass_flow_rate
        if isinstance(self.outlet_strategy, OutletTargetCorrectedMassFlowRate):
            _proto.outlet_strategy = clientpb.OUTLET_TARGET_CORRECTED_MASS_FLOW_RATE
            _proto.outlet_pressure.value = self.outlet_strategy.pressure
            _proto.outlet_target_mass_flow_rate.value = self.outlet_strategy.target_mass_flow_rate
            _proto.outlet_reference_pressure.value = self.outlet_strategy.reference_pressure
            _proto.outlet_reference_temperature.value = self.outlet_strategy.reference_temperature
        _proto.outlet_pressure_constraint = self.pressure_constraint
        return _proto

    def _from_proto(self, proto: clientpb.BoundaryConditionsFluid) -> None:
        super()._from_proto(proto)
        assert proto.physical_boundary == enum.PhysicalBoundary.OUTLET
        if proto.outlet_strategy == clientpb.INVALID_OUTLET_STRATEGY:
            raise ValueError("Invalid outlet_strategy")
        elif proto.outlet_strategy == clientpb.OUTLET_PRESSURE:
            self.outlet_strategy = OutletPressure()
            self.outlet_strategy.pressure = proto.outlet_pressure.value
        elif proto.outlet_strategy == clientpb.OUTLET_TARGET_MASS_FLOW_RATE:
            self.outlet_strategy = OutletTargetMassFlowRate()
            self.outlet_strategy.pressure = proto.outlet_pressure.value
            self.outlet_strategy.target_mass_flow_rate = proto.outlet_target_mass_flow_rate.value
        elif proto.outlet_strategy == clientpb.OUTLET_TARGET_CORRECTED_MASS_FLOW_RATE:
            self.outlet_strategy = OutletTargetCorrectedMassFlowRate()
            self.outlet_strategy.pressure = proto.outlet_pressure.value
            self.outlet_strategy.target_mass_flow_rate = proto.outlet_target_mass_flow_rate.value
            self.outlet_strategy.reference_pressure = proto.outlet_reference_pressure.value
            self.outlet_strategy.reference_temperature = proto.outlet_reference_temperature.value
        self.pressure_constraint = enum.OutletPressureConstraint(proto.outlet_pressure_constraint)
        return None
