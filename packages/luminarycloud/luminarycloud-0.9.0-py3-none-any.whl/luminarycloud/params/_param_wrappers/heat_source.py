# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id

from .heat_source_type import HeatSourceType
from .heat_source_type_power import HeatSourceTypePower
from .heat_source_type_power_per_unit_of_volume import HeatSourceTypePowerPerUnitOfVolume


@dataclass(kw_only=True)
class HeatSource(ParamGroupWrapper[clientpb.HeatSource]):
    """"""

    name: str = field(default_factory=create_unique_id, init=False)
    ""
    volumes: list[str] = field(default_factory=list)
    "Ids of the zones the heat source is applied to."
    heat_source_type: HeatSourceType = field(default_factory=HeatSourceTypePower)
    "Heat source specification."

    def _to_proto(self) -> clientpb.HeatSource:
        _proto = clientpb.HeatSource()
        if self.name is not None:
            _proto.heat_source_id = self.name
        if self.volumes is not None:
            _proto.heat_source_zone_ids.extend(self.volumes)
        if isinstance(self.heat_source_type, HeatSourceTypePower):
            _proto.heat_source_type = clientpb.HEAT_SOURCE_TYPE_POWER
            if self.heat_source_type.power is not None:
                _proto.heat_source_power.value = self.heat_source_type.power
        if isinstance(self.heat_source_type, HeatSourceTypePowerPerUnitOfVolume):
            _proto.heat_source_type = clientpb.HEAT_SOURCE_TYPE_POWER_PER_UNIT_OF_VOLUME
            if self.heat_source_type.power_per_unit_volume is not None:
                _proto.heat_source_power_per_unit_volume.value = (
                    self.heat_source_type.power_per_unit_volume
                )
        return _proto

    def _from_proto(self, proto: clientpb.HeatSource) -> None:
        self.name = proto.heat_source_id
        self.volumes.extend(proto.heat_source_zone_ids)
        if proto.heat_source_type == clientpb.INVALID_HEAT_SOURCE_TYPE:
            raise ValueError("Invalid heat_source_type")
        elif proto.heat_source_type == clientpb.HEAT_SOURCE_TYPE_POWER:
            self.heat_source_type = HeatSourceTypePower()
            self.heat_source_type.power = proto.heat_source_power.value
        elif proto.heat_source_type == clientpb.HEAT_SOURCE_TYPE_POWER_PER_UNIT_OF_VOLUME:
            self.heat_source_type = HeatSourceTypePowerPerUnitOfVolume()
            self.heat_source_type.power_per_unit_volume = (
                proto.heat_source_power_per_unit_volume.value
            )
        return None
