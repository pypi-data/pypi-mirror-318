# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id

from .boussinesq_approximation import BoussinesqApproximation
from .boussinesq_off import BoussinesqOff
from .boussinesq_on import BoussinesqOn
from .ideal_gas import IdealGas
from .incompressible_fluid import IncompressibleFluid
from .incompressible_fluid_with_energy import IncompressibleFluidWithEnergy
from .material_model import MaterialModel
from .prescribed_conductivity import PrescribedConductivity
from .prescribed_prandtl_number import PrescribedPrandtlNumber
from .prescribed_viscosity import PrescribedViscosity
from .sutherland import Sutherland
from .thermal_conductivity_model import ThermalConductivityModel
from .viscosity_model import ViscosityModel


@dataclass(kw_only=True)
class MaterialFluid(ParamGroupWrapper[clientpb.MaterialFluid]):
    """Configuration for Fluid materials"""

    reference_pressure: float = 0.0
    "Reference pressure for the simulation. Unless otherwise stated, all pressure values are relative to this field (i.e. gauge pressures)."
    material_model: MaterialModel = field(default_factory=IdealGas)
    "Material model."
    thermal_conductivity_model: ThermalConductivityModel = field(
        default_factory=PrescribedPrandtlNumber
    )
    "Model for the laminar thermal conductivity of a fluid."
    boussinesq_approximation: BoussinesqApproximation = field(default_factory=BoussinesqOn)
    "Introduce a body force due to thermal expansion without modifying the material density."
    viscosity_model: ViscosityModel = field(default_factory=Sutherland)
    "Models available for the dynamic viscosity of the fluid."

    def _to_proto(self) -> clientpb.MaterialFluid:
        _proto = clientpb.MaterialFluid()
        _proto.reference_pressure.value = self.reference_pressure
        if isinstance(self.material_model, IdealGas):
            _proto.density_relationship = clientpb.IDEAL_GAS
            _proto.molecular_weight.value = self.material_model.molecular_weight
            _proto.specific_heat_cp.value = self.material_model.specific_heat_cp
        if isinstance(self.material_model, IncompressibleFluid):
            _proto.density_relationship = clientpb.CONSTANT_DENSITY
            _proto.constant_density_value.value = self.material_model.density
        if isinstance(self.material_model, IncompressibleFluidWithEnergy):
            _proto.density_relationship = clientpb.CONSTANT_DENSITY_ENERGY
            _proto.constant_density_value.value = self.material_model.density
            _proto.specific_heat_cp.value = self.material_model.specific_heat_cp
        if isinstance(self.thermal_conductivity_model, PrescribedPrandtlNumber):
            _proto.laminar_thermal_conductivity = clientpb.LAMINAR_CONSTANT_THERMAL_PRANDTL
            _proto.laminar_constant_thermal_prandtl_constant.value = (
                self.thermal_conductivity_model.prandtl_number
            )
        if isinstance(self.thermal_conductivity_model, PrescribedConductivity):
            _proto.laminar_thermal_conductivity = clientpb.LAMINAR_CONSTANT_THERMAL_CONDUCTIVITY
            _proto.laminar_constant_thermal_conductivity_constant.value = (
                self.thermal_conductivity_model.conductivity
            )
        if isinstance(self.boussinesq_approximation, BoussinesqOff):
            _proto.boussinesq_approximation = clientpb.BOUSSINESQ_OFF
        if isinstance(self.boussinesq_approximation, BoussinesqOn):
            _proto.boussinesq_approximation = clientpb.BOUSSINESQ_ON
            _proto.boussinesq_temp_ref.value = self.boussinesq_approximation.reference_temperature
            _proto.thermal_expansion_coefficient.value = (
                self.boussinesq_approximation.thermal_expansion_coefficient
            )
        if isinstance(self.viscosity_model, Sutherland):
            _proto.laminar_viscosity_model_newtonian = clientpb.SUTHERLAND
            _proto.sutherland_viscosity_ref.value = self.viscosity_model.reference_viscosity
            _proto.sutherland_viscosity_temp_ref.value = self.viscosity_model.reference_temperature
            _proto.sutherland_constant.value = self.viscosity_model.sutherland_constant
        if isinstance(self.viscosity_model, PrescribedViscosity):
            _proto.laminar_viscosity_model_newtonian = clientpb.LAMINAR_CONSTANT_VISCOSITY
            _proto.laminar_constant_viscosity_constant.value = self.viscosity_model.viscosity
        return _proto

    def _from_proto(self, proto: clientpb.MaterialFluid) -> None:
        self.reference_pressure = proto.reference_pressure.value
        if proto.density_relationship == clientpb.INVALID_DENSITY_RELATIONSHIP:
            raise ValueError("Invalid material_model")
        elif proto.density_relationship == clientpb.IDEAL_GAS:
            self.material_model = IdealGas()
            self.material_model.molecular_weight = proto.molecular_weight.value
            self.material_model.specific_heat_cp = proto.specific_heat_cp.value
        elif proto.density_relationship == clientpb.CONSTANT_DENSITY:
            self.material_model = IncompressibleFluid()
            self.material_model.density = proto.constant_density_value.value
        elif proto.density_relationship == clientpb.CONSTANT_DENSITY_ENERGY:
            self.material_model = IncompressibleFluidWithEnergy()
            self.material_model.density = proto.constant_density_value.value
            self.material_model.specific_heat_cp = proto.specific_heat_cp.value
        if proto.laminar_thermal_conductivity == clientpb.INVALID_LAMINAR_THERMAL_CONDUCTIVITY:
            raise ValueError("Invalid thermal_conductivity_model")
        elif proto.laminar_thermal_conductivity == clientpb.LAMINAR_CONSTANT_THERMAL_PRANDTL:
            self.thermal_conductivity_model = PrescribedPrandtlNumber()
            self.thermal_conductivity_model.prandtl_number = (
                proto.laminar_constant_thermal_prandtl_constant.value
            )
        elif proto.laminar_thermal_conductivity == clientpb.LAMINAR_CONSTANT_THERMAL_CONDUCTIVITY:
            self.thermal_conductivity_model = PrescribedConductivity()
            self.thermal_conductivity_model.conductivity = (
                proto.laminar_constant_thermal_conductivity_constant.value
            )
        if proto.boussinesq_approximation == clientpb.INVALID_BOUSSINESQ_APPROXIMATION:
            raise ValueError("Invalid boussinesq_approximation")
        elif proto.boussinesq_approximation == clientpb.BOUSSINESQ_OFF:
            self.boussinesq_approximation = BoussinesqOff()
        elif proto.boussinesq_approximation == clientpb.BOUSSINESQ_ON:
            self.boussinesq_approximation = BoussinesqOn()
            self.boussinesq_approximation.reference_temperature = proto.boussinesq_temp_ref.value
            self.boussinesq_approximation.thermal_expansion_coefficient = (
                proto.thermal_expansion_coefficient.value
            )
        if (
            proto.laminar_viscosity_model_newtonian
            == clientpb.INVALID_LAMINAR_VISCOSITY_MODEL_NEWTONIAN
        ):
            raise ValueError("Invalid viscosity_model")
        elif proto.laminar_viscosity_model_newtonian == clientpb.SUTHERLAND:
            self.viscosity_model = Sutherland()
            self.viscosity_model.reference_viscosity = proto.sutherland_viscosity_ref.value
            self.viscosity_model.reference_temperature = proto.sutherland_viscosity_temp_ref.value
            self.viscosity_model.sutherland_constant = proto.sutherland_constant.value
        elif proto.laminar_viscosity_model_newtonian == clientpb.LAMINAR_CONSTANT_VISCOSITY:
            self.viscosity_model = PrescribedViscosity()
            self.viscosity_model.viscosity = proto.laminar_constant_viscosity_constant.value
        return None
