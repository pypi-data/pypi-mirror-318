# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id


@dataclass(kw_only=True)
class BoundaryConditionsHeat(ParamGroupWrapper[clientpb.BoundaryConditionsHeat]):
    """Boundary conditions for a heat transfer physics solver."""

    surfaces: list[str] = field(default_factory=list)
    ""
    name: str = ""
    ""

    def _to_proto(self) -> clientpb.BoundaryConditionsHeat:
        _proto = clientpb.BoundaryConditionsHeat()
        if self.surfaces is not None:
            _proto.surfaces.extend(self.surfaces)
        if self.name is not None:
            _proto.boundary_condition_name = self.name
        return _proto

    def _from_proto(self, proto: clientpb.BoundaryConditionsHeat) -> None:
        self.surfaces.extend(proto.surfaces)
        self.name = proto.boundary_condition_name
        return None
