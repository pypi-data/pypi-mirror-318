# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id

from .turbulence import Turbulence
from .custom_spalart_allmaras_constants import CustomSpalartAllmarasConstants
from .default_spalart_allmaras_constants import DefaultSpalartAllmarasConstants
from .spalart_allmaras_constants import SpalartAllmarasConstants


@dataclass(kw_only=True)
class SpalartAllmaras(Turbulence):
    """'Standard' Spalart-Allmaras one-equation turbulence model."""

    qcr: enum.QcrSa = enum.QcrSa.QCR_OFF
    "Modification of the traditional linear Boussinesq relation for the Spalart-Allmaras turbulence model via the quadratic constitutive relation (QCR)."
    rotation_correction: enum.RotationCorrectionSa = (
        enum.RotationCorrectionSa.ROTATION_CORRECTION_OFF
    )
    "Apply a rotation correction to the Spalart-Allmaras turbulence model."
    spalart_allmaras_constants: SpalartAllmarasConstants = field(
        default_factory=DefaultSpalartAllmarasConstants
    )
    "Apply default constants for the RANS turbulence model or choose to customize."

    def _to_proto(self) -> clientpb.Turbulence:
        _proto = super()._to_proto()
        _proto.turbulence_model = enum.TurbulenceModel.SPALART_ALLMARAS
        _proto.qcr_sa = self.qcr
        _proto.rotation_correction_sa = self.rotation_correction
        if isinstance(self.spalart_allmaras_constants, DefaultSpalartAllmarasConstants):
            _proto.turbulence_model_constants = clientpb.DEFAULT_TURB_CONSTANTS
        if isinstance(self.spalart_allmaras_constants, CustomSpalartAllmarasConstants):
            _proto.turbulence_model_constants = clientpb.CUSTOM_TURB_CONSTANTS
            _proto.c_rot.value = self.spalart_allmaras_constants.c_rot
            _proto.C_sa_des.value = self.spalart_allmaras_constants.c_des
            _proto.c_b_1.value = self.spalart_allmaras_constants.c_b_1
            _proto.sigma.value = self.spalart_allmaras_constants.sigma
            _proto.c_b_2.value = self.spalart_allmaras_constants.c_b_2
            _proto.kappa.value = self.spalart_allmaras_constants.kappa
            _proto.c_w_2.value = self.spalart_allmaras_constants.c_w_2
            _proto.c_w_3.value = self.spalart_allmaras_constants.c_w_3
            _proto.c_v_1.value = self.spalart_allmaras_constants.c_v_1
            _proto.c_t_3.value = self.spalart_allmaras_constants.c_t_3
            _proto.c_t_4.value = self.spalart_allmaras_constants.c_t_4
            _proto.c_r_1.value = self.spalart_allmaras_constants.c_r_1
        return _proto

    def _from_proto(self, proto: clientpb.Turbulence) -> None:
        super()._from_proto(proto)
        assert proto.turbulence_model == enum.TurbulenceModel.SPALART_ALLMARAS
        self.qcr = enum.QcrSa(proto.qcr_sa)
        self.rotation_correction = enum.RotationCorrectionSa(proto.rotation_correction_sa)
        if proto.turbulence_model_constants == clientpb.INVALID_TURBULENCE_MODEL_CONSTANTS:
            raise ValueError("Invalid spalart_allmaras_constants")
        elif proto.turbulence_model_constants == clientpb.DEFAULT_TURB_CONSTANTS:
            self.spalart_allmaras_constants = DefaultSpalartAllmarasConstants()
        elif proto.turbulence_model_constants == clientpb.CUSTOM_TURB_CONSTANTS:
            self.spalart_allmaras_constants = CustomSpalartAllmarasConstants()
            self.spalart_allmaras_constants.c_rot = proto.c_rot.value
            self.spalart_allmaras_constants.c_des = proto.C_sa_des.value
            self.spalart_allmaras_constants.c_b_1 = proto.c_b_1.value
            self.spalart_allmaras_constants.sigma = proto.sigma.value
            self.spalart_allmaras_constants.c_b_2 = proto.c_b_2.value
            self.spalart_allmaras_constants.kappa = proto.kappa.value
            self.spalart_allmaras_constants.c_w_2 = proto.c_w_2.value
            self.spalart_allmaras_constants.c_w_3 = proto.c_w_3.value
            self.spalart_allmaras_constants.c_v_1 = proto.c_v_1.value
            self.spalart_allmaras_constants.c_t_3 = proto.c_t_3.value
            self.spalart_allmaras_constants.c_t_4 = proto.c_t_4.value
            self.spalart_allmaras_constants.c_r_1 = proto.c_r_1.value
        return None
