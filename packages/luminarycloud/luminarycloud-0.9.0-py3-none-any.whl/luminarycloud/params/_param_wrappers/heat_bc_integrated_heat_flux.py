# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id

from .boundary_conditions_heat import BoundaryConditionsHeat


@dataclass(kw_only=True)
class HeatBcIntegratedHeatFlux(BoundaryConditionsHeat):
    """Integrated heat flux."""

    heat_flux: float = 0.0
    "Total heat flux (power) at wall boundary surfaces. Negative values increase temperatures at the wall while positive values decrease it. Enter 0 for an adiabatic wall."

    def _to_proto(self) -> clientpb.BoundaryConditionsHeat:
        _proto = super()._to_proto()
        _proto.heat_physical_boundary = enum.HeatPhysicalBoundary.HEAT_BC_INTEGRATED_HEAT_FLUX
        _proto.fixed_integrated_heat_flux.value = self.heat_flux
        return _proto

    def _from_proto(self, proto: clientpb.BoundaryConditionsHeat) -> None:
        super()._from_proto(proto)
        assert (
            proto.heat_physical_boundary == enum.HeatPhysicalBoundary.HEAT_BC_INTEGRATED_HEAT_FLUX
        )
        self.heat_flux = proto.fixed_integrated_heat_flux.value
        return None
