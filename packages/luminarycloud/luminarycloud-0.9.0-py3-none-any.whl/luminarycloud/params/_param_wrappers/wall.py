# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id

from .boundary_conditions_fluid import BoundaryConditionsFluid
from .no_slip import NoSlip
from .prescribed_heat_flux import PrescribedHeatFlux
from .prescribed_temperature import PrescribedTemperature
from .slip import Slip
from .wall_energy import WallEnergy
from .wall_model import WallModel
from .wall_momentum import WallMomentum


@dataclass(kw_only=True)
class Wall(BoundaryConditionsFluid):
    """Wall boundary condition."""

    wall_momentum: WallMomentum = field(default_factory=NoSlip)
    "Condition applied to the momentum equations at a solid wall boundary."
    wall_energy: WallEnergy = field(default_factory=PrescribedHeatFlux)
    "Condition applied to the energy equation at a solid wall boundary."

    def _to_proto(self) -> clientpb.BoundaryConditionsFluid:
        _proto = super()._to_proto()
        _proto.physical_boundary = enum.PhysicalBoundary.WALL
        if isinstance(self.wall_momentum, NoSlip):
            _proto.wall_momentum = clientpb.NO_SLIP
            if self.wall_momentum.enable_roughness is not None:
                _proto.roughness_control = self.wall_momentum.enable_roughness
            _proto.equivalent_sand_grain_roughness.value = (
                self.wall_momentum.equivalent_sand_grain_roughness
            )
        if isinstance(self.wall_momentum, Slip):
            _proto.wall_momentum = clientpb.SLIP
        if isinstance(self.wall_momentum, WallModel):
            _proto.wall_momentum = clientpb.WALL_MODEL
            if self.wall_momentum.enable_roughness is not None:
                _proto.roughness_control = self.wall_momentum.enable_roughness
            _proto.equivalent_sand_grain_roughness.value = (
                self.wall_momentum.equivalent_sand_grain_roughness
            )
        if isinstance(self.wall_energy, PrescribedHeatFlux):
            _proto.wall_energy = clientpb.FIXED_HEAT_FLUX
            _proto.fixed_heat_flux.value = self.wall_energy.heat_flux
        if isinstance(self.wall_energy, PrescribedTemperature):
            _proto.wall_energy = clientpb.FIXED_TEMPERATURE
            _proto.fixed_temperature.value = self.wall_energy.temperature
        return _proto

    def _from_proto(self, proto: clientpb.BoundaryConditionsFluid) -> None:
        super()._from_proto(proto)
        assert proto.physical_boundary == enum.PhysicalBoundary.WALL
        if proto.wall_momentum == clientpb.INVALID_WALL_MOMENTUM:
            raise ValueError("Invalid wall_momentum")
        elif proto.wall_momentum == clientpb.NO_SLIP:
            self.wall_momentum = NoSlip()
            self.wall_momentum.enable_roughness = proto.roughness_control
            self.wall_momentum.equivalent_sand_grain_roughness = (
                proto.equivalent_sand_grain_roughness.value
            )
        elif proto.wall_momentum == clientpb.SLIP:
            self.wall_momentum = Slip()
        elif proto.wall_momentum == clientpb.WALL_MODEL:
            self.wall_momentum = WallModel()
            self.wall_momentum.enable_roughness = proto.roughness_control
            self.wall_momentum.equivalent_sand_grain_roughness = (
                proto.equivalent_sand_grain_roughness.value
            )
        if proto.wall_energy == clientpb.INVALID_WALL_ENERGY:
            raise ValueError("Invalid wall_energy")
        elif proto.wall_energy == clientpb.FIXED_HEAT_FLUX:
            self.wall_energy = PrescribedHeatFlux()
            self.wall_energy.heat_flux = proto.fixed_heat_flux.value
        elif proto.wall_energy == clientpb.FIXED_TEMPERATURE:
            self.wall_energy = PrescribedTemperature()
            self.wall_energy.temperature = proto.fixed_temperature.value
        return None
