# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id

from .adjoint_controls_fluid import AdjointControlsFluid
from .basic_fluid import BasicFluid
from .bc_komega_variables import BcKomegaVariables
from .bc_sa_variable import BcSaVariable
from .bc_turbulent_viscosity_and_intensity_komega import BcTurbulentViscosityAndIntensityKomega
from .bc_turbulent_viscosity_ratio_and_intensity_komega import (
    BcTurbulentViscosityRatioAndIntensityKomega,
)
from .bc_turbulent_viscosity_ratio_sa import BcTurbulentViscosityRatioSa
from .bc_turbulent_viscosity_sa import BcTurbulentViscositySa
from .boundary_conditions_fluid import BoundaryConditionsFluid
from .custom_komega_sst_constants import CustomKomegaSstConstants
from .custom_spalart_allmaras_constants import CustomSpalartAllmarasConstants
from .default_komega_sst_constants import DefaultKomegaSstConstants
from .default_spalart_allmaras_constants import DefaultSpalartAllmarasConstants
from .farfield import Farfield
from .fluid_existing_solution import FluidExistingSolution
from .fluid_farfield_values import FluidFarfieldValues
from .fluid_prescribed_values import FluidPrescribedValues
from .init_farfield_values_komega import InitFarfieldValuesKomega
from .init_farfield_values_sa import InitFarfieldValuesSa
from .init_sa_variable import InitSaVariable
from .init_turbulent_viscosity_and_intensity_komega import InitTurbulentViscosityAndIntensityKomega
from .init_turbulent_viscosity_ratio_and_intensity_komega import (
    InitTurbulentViscosityRatioAndIntensityKomega,
)
from .init_turbulent_viscosity_ratio_sa import InitTurbulentViscosityRatioSa
from .init_turbulent_viscosity_sa import InitTurbulentViscositySa
from .initialization_fluid import InitializationFluid
from .inlet import Inlet
from .komega_boundary_conditions import KomegaBoundaryConditions
from .komega_initialization import KomegaInitialization
from .komega_sst import KomegaSst
from .komega_sst_constants import KomegaSstConstants
from .mass_flow_inlet import MassFlowInlet
from .no_slip import NoSlip
from .outlet import Outlet
from .outlet_pressure import OutletPressure
from .outlet_strategy import OutletStrategy
from .outlet_target_corrected_mass_flow_rate import OutletTargetCorrectedMassFlowRate
from .outlet_target_mass_flow_rate import OutletTargetMassFlowRate
from .periodic_pair import PeriodicPair
from .physical_behavior import PhysicalBehavior
from .porous_behavior import PorousBehavior
from .prescribed_heat_flux import PrescribedHeatFlux
from .prescribed_temperature import PrescribedTemperature
from .sliding_interfaces import SlidingInterfaces
from .slip import Slip
from .solution_controls_fluid import SolutionControlsFluid
from .spalart_allmaras import SpalartAllmaras
from .spalart_allmaras_boundary_conditions import SpalartAllmarasBoundaryConditions
from .spalart_allmaras_constants import SpalartAllmarasConstants
from .spalart_allmaras_initialization import SpalartAllmarasInitialization
from .spatial_discretization_fluid import SpatialDiscretizationFluid
from .symmetry import Symmetry
from .total_pressure_inlet import TotalPressureInlet
from .turbulence import Turbulence
from .turbulence_boundary_conditions import TurbulenceBoundaryConditions
from .turbulence_initialization import TurbulenceInitialization
from .velocity_components_inlet import VelocityComponentsInlet
from .velocity_magnitude_inlet import VelocityMagnitudeInlet
from .wall import Wall
from .wall_energy import WallEnergy
from .wall_model import WallModel
from .wall_momentum import WallMomentum


@dataclass(kw_only=True)
class Fluid(ParamGroupWrapper[clientpb.Fluid]):
    """Configuration for a fluid flow physics solver - simulates the flow of liquids and gases."""

    basic_fluid: Optional[BasicFluid] = field(default_factory=BasicFluid)
    "Basic settings for a fluid flow physics solver."
    turbulence: Optional[Turbulence] = field(default_factory=SpalartAllmaras)
    "Turbulence settings for a fluid flow physics solver."
    solution_controls_fluid: Optional[SolutionControlsFluid] = field(
        default_factory=SolutionControlsFluid
    )
    "Solution controls for a fluid flow physics solver."
    adjoint_controls_fluid: Optional[AdjointControlsFluid] = field(
        default_factory=AdjointControlsFluid
    )
    ""
    spatial_discretization_fluid: Optional[SpatialDiscretizationFluid] = field(
        default_factory=SpatialDiscretizationFluid
    )
    "Spatial discretization settings for a fluid flow physics solver."
    boundary_conditions_fluid: list[BoundaryConditionsFluid] = field(default_factory=list)
    "Boundary conditions for a fluid flow physics solver."
    sliding_interfaces: list[SlidingInterfaces] = field(default_factory=list)
    "Defines the two sides that form a sliding interface. The two sides are abutting, possibly in combination with a periodic transformation, and should have the same normal grid velocity. The tangential grid velocity can, and usually will, be different. Each side of the sliding interface can be composed out of an arbitrary number of surfaces."
    periodic_pair: list[PeriodicPair] = field(default_factory=list)
    "Defines the input options needed for periodic boundaries. We assume each periodic BC can have translational OR rotational periodicity. To transform a point on boundary A to its periodically matching point on boundary B, we first subtract the center of rotation from the point coordinates to get the distance vector from the center to the point of interest, then we apply rotation around the periodicity axis and add back the center of rotation to get the coordinates of the transformed point."
    initialization_fluid: Optional[InitializationFluid] = field(
        default_factory=FluidPrescribedValues
    )
    "Type of initial condition for the field variables."
    physical_behavior: list[PhysicalBehavior] = field(default_factory=list)
    "Physical behavior settings for a fluid flow physics solver."
    porous_behavior: list[PorousBehavior] = field(default_factory=list)
    "Porous model settings for a fluid flow physics solver."

    def _to_proto(self) -> clientpb.Fluid:
        _proto = clientpb.Fluid()
        if self.basic_fluid is not None:
            _proto.basic_fluid.CopyFrom(self.basic_fluid._to_proto())
        if self.turbulence is not None:
            _proto.turbulence.CopyFrom(self.turbulence._to_proto())
        if self.solution_controls_fluid is not None:
            _proto.solution_controls_fluid.CopyFrom(self.solution_controls_fluid._to_proto())
        if self.adjoint_controls_fluid is not None:
            _proto.adjoint_controls_fluid.CopyFrom(self.adjoint_controls_fluid._to_proto())
        if self.spatial_discretization_fluid is not None:
            _proto.spatial_discretization_fluid.CopyFrom(
                self.spatial_discretization_fluid._to_proto()
            )
        if self.boundary_conditions_fluid is not None:
            _proto.boundary_conditions_fluid.extend(
                v._to_proto() for v in self.boundary_conditions_fluid
            )
        if self.sliding_interfaces is not None:
            _proto.sliding_interfaces.extend(v._to_proto() for v in self.sliding_interfaces)
        if self.periodic_pair is not None:
            _proto.periodic_pair.extend(v._to_proto() for v in self.periodic_pair)
        if self.initialization_fluid is not None:
            _proto.initialization_fluid.CopyFrom(self.initialization_fluid._to_proto())
        if self.physical_behavior is not None:
            _proto.physical_behavior.extend(v._to_proto() for v in self.physical_behavior)
        if self.porous_behavior is not None:
            _proto.porous_behavior.extend(v._to_proto() for v in self.porous_behavior)
        return _proto

    def _from_proto(self, proto: clientpb.Fluid) -> None:
        self.basic_fluid = BasicFluid.from_proto(proto.basic_fluid)
        self.turbulence = Turbulence.from_proto(proto.turbulence)
        self.solution_controls_fluid = SolutionControlsFluid.from_proto(
            proto.solution_controls_fluid
        )
        self.adjoint_controls_fluid = AdjointControlsFluid.from_proto(proto.adjoint_controls_fluid)
        self.spatial_discretization_fluid = SpatialDiscretizationFluid.from_proto(
            proto.spatial_discretization_fluid
        )
        self.boundary_conditions_fluid = [
            BoundaryConditionsFluid.from_proto(v) for v in proto.boundary_conditions_fluid
        ]
        self.sliding_interfaces = [
            SlidingInterfaces.from_proto(v) for v in proto.sliding_interfaces
        ]
        self.periodic_pair = [PeriodicPair.from_proto(v) for v in proto.periodic_pair]
        self.initialization_fluid = InitializationFluid.from_proto(proto.initialization_fluid)
        self.physical_behavior = [PhysicalBehavior.from_proto(v) for v in proto.physical_behavior]
        self.porous_behavior = [PorousBehavior.from_proto(v) for v in proto.porous_behavior]
        return None
