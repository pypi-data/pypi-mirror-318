# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id

from .initialization_fluid import InitializationFluid
from .init_farfield_values_komega import InitFarfieldValuesKomega
from .init_farfield_values_sa import InitFarfieldValuesSa
from .init_sa_variable import InitSaVariable
from .init_turbulent_viscosity_and_intensity_komega import InitTurbulentViscosityAndIntensityKomega
from .init_turbulent_viscosity_ratio_and_intensity_komega import (
    InitTurbulentViscosityRatioAndIntensityKomega,
)
from .init_turbulent_viscosity_ratio_sa import InitTurbulentViscosityRatioSa
from .init_turbulent_viscosity_sa import InitTurbulentViscositySa
from .komega_initialization import KomegaInitialization
from .spalart_allmaras_initialization import SpalartAllmarasInitialization
from .turbulence_initialization import TurbulenceInitialization


@dataclass(kw_only=True)
class FluidFarfieldValues(InitializationFluid):
    """Initialize all fields uniformly in space using the values at the far-field boundary."""

    turbulence_initialization: TurbulenceInitialization = field(
        default_factory=TurbulenceInitialization
    )
    ""

    def _to_proto(self) -> clientpb.InitializationFluid:
        _proto = super()._to_proto()
        _proto.initialization_type = enum.InitializationType.FARFIELD_VALUES
        if isinstance(
            self.turbulence_initialization.spalart_allmaras_initialization,
            InitTurbulentViscosityRatioSa,
        ):
            _proto.turbulent_variable_initialization_type_sa = (
                clientpb.INIT_TURBULENT_VISCOSITY_RATIO_SA
            )
            _proto.init_turbulent_viscosity_ratio.value = (
                self.turbulence_initialization.spalart_allmaras_initialization.viscosity_ratio
            )
        if isinstance(
            self.turbulence_initialization.spalart_allmaras_initialization, InitTurbulentViscositySa
        ):
            _proto.turbulent_variable_initialization_type_sa = clientpb.INIT_TURBULENT_VISCOSITY_SA
            _proto.init_turbulent_viscosity.value = (
                self.turbulence_initialization.spalart_allmaras_initialization.viscosity
            )
        if isinstance(
            self.turbulence_initialization.spalart_allmaras_initialization, InitSaVariable
        ):
            _proto.turbulent_variable_initialization_type_sa = clientpb.INIT_SA_VARIABLE
            _proto.uniform_nu_tilde.value = (
                self.turbulence_initialization.spalart_allmaras_initialization.sa_variable
            )
        if isinstance(
            self.turbulence_initialization.spalart_allmaras_initialization, InitFarfieldValuesSa
        ):
            _proto.turbulent_variable_initialization_type_sa = clientpb.INIT_FARFIELD_VALUES_SA
        if isinstance(
            self.turbulence_initialization.komega_initialization,
            InitTurbulentViscosityRatioAndIntensityKomega,
        ):
            _proto.turbulent_variable_initialization_type_komega = (
                clientpb.INIT_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA
            )
            _proto.init_turbulent_viscosity_ratio.value = (
                self.turbulence_initialization.komega_initialization.viscosity_ratio
            )
            _proto.init_turbulence_intensity.value = (
                self.turbulence_initialization.komega_initialization.intensity
            )
        if isinstance(
            self.turbulence_initialization.komega_initialization,
            InitTurbulentViscosityAndIntensityKomega,
        ):
            _proto.turbulent_variable_initialization_type_komega = (
                clientpb.INIT_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA
            )
            _proto.init_turbulent_viscosity.value = (
                self.turbulence_initialization.komega_initialization.viscosity
            )
            _proto.init_turbulence_intensity.value = (
                self.turbulence_initialization.komega_initialization.intensity
            )
        if isinstance(
            self.turbulence_initialization.komega_initialization, InitFarfieldValuesKomega
        ):
            _proto.turbulent_variable_initialization_type_komega = (
                clientpb.INIT_FARFIELD_VALUES_KOMEGA
            )
        return _proto

    def _from_proto(self, proto: clientpb.InitializationFluid) -> None:
        super()._from_proto(proto)
        assert proto.initialization_type == enum.InitializationType.FARFIELD_VALUES
        if (
            proto.turbulent_variable_initialization_type_sa
            == clientpb.INVALID_TURBULENT_VARIABLE_INITIALIZATION_TYPE_SA
        ):
            raise ValueError("Invalid spalart_allmaras_initialization")
        elif (
            proto.turbulent_variable_initialization_type_sa
            == clientpb.INIT_TURBULENT_VISCOSITY_RATIO_SA
        ):
            self.turbulence_initialization.spalart_allmaras_initialization = (
                InitTurbulentViscosityRatioSa()
            )
            self.turbulence_initialization.spalart_allmaras_initialization.viscosity_ratio = (
                proto.init_turbulent_viscosity_ratio.value
            )
        elif (
            proto.turbulent_variable_initialization_type_sa == clientpb.INIT_TURBULENT_VISCOSITY_SA
        ):
            self.turbulence_initialization.spalart_allmaras_initialization = (
                InitTurbulentViscositySa()
            )
            self.turbulence_initialization.spalart_allmaras_initialization.viscosity = (
                proto.init_turbulent_viscosity.value
            )
        elif proto.turbulent_variable_initialization_type_sa == clientpb.INIT_SA_VARIABLE:
            self.turbulence_initialization.spalart_allmaras_initialization = InitSaVariable()
            self.turbulence_initialization.spalart_allmaras_initialization.sa_variable = (
                proto.uniform_nu_tilde.value
            )
        elif proto.turbulent_variable_initialization_type_sa == clientpb.INIT_FARFIELD_VALUES_SA:
            self.turbulence_initialization.spalart_allmaras_initialization = InitFarfieldValuesSa()
        if (
            proto.turbulent_variable_initialization_type_komega
            == clientpb.INVALID_TURBULENT_VARIABLE_INITIALIZATION_TYPE_KOMEGA
        ):
            raise ValueError("Invalid komega_initialization")
        elif (
            proto.turbulent_variable_initialization_type_komega
            == clientpb.INIT_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA
        ):
            self.turbulence_initialization.komega_initialization = (
                InitTurbulentViscosityRatioAndIntensityKomega()
            )
            self.turbulence_initialization.komega_initialization.viscosity_ratio = (
                proto.init_turbulent_viscosity_ratio.value
            )
            self.turbulence_initialization.komega_initialization.intensity = (
                proto.init_turbulence_intensity.value
            )
        elif (
            proto.turbulent_variable_initialization_type_komega
            == clientpb.INIT_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA
        ):
            self.turbulence_initialization.komega_initialization = (
                InitTurbulentViscosityAndIntensityKomega()
            )
            self.turbulence_initialization.komega_initialization.viscosity = (
                proto.init_turbulent_viscosity.value
            )
            self.turbulence_initialization.komega_initialization.intensity = (
                proto.init_turbulence_intensity.value
            )
        elif (
            proto.turbulent_variable_initialization_type_komega
            == clientpb.INIT_FARFIELD_VALUES_KOMEGA
        ):
            self.turbulence_initialization.komega_initialization = InitFarfieldValuesKomega()
        return None
