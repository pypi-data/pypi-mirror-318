# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id

from .convective_scheme import ConvectiveScheme
from .convective_scheme_order import ConvectiveSchemeOrder
from .ec2 import Ec2
from .fds import Fds
from .first_order import FirstOrder
from .ld2 import Ld2
from .rhie_chow import RhieChow
from .second_order import SecondOrder


@dataclass(kw_only=True)
class SpatialDiscretizationFluid(ParamGroupWrapper[clientpb.SpatialDiscretizationFluid]):
    """Spatial discretization settings for a fluid flow physics solver."""

    gradient_method: enum.GradientMethod = enum.GradientMethod.HLSQ
    "Method for computing the spatial gradients of fluid variables."
    hlsq_blend: float = 1.7
    "Blending parameter in the hybrid least squares gradient methods in [1,2]."
    convective_scheme: ConvectiveScheme = field(default_factory=Fds)
    "Type of scheme for discretizing the convective terms of the fluid equations."
    convective_scheme_order: ConvectiveSchemeOrder = field(default_factory=SecondOrder)
    "Spatial order of accuracy of the convective scheme used for the fluid equations."

    def _to_proto(self) -> clientpb.SpatialDiscretizationFluid:
        _proto = clientpb.SpatialDiscretizationFluid()
        _proto.gradient_method = self.gradient_method
        _proto.hlsq_blend.value = self.hlsq_blend
        if isinstance(self.convective_scheme, Fds):
            _proto.convective_schemes_density_based = clientpb.ROE
            _proto.entropy_epsilon.value = self.convective_scheme.entropy_epsilon
            _proto.preconditioning = self.convective_scheme.preconditioning
            _proto.fds_min_low_dissipation.value = self.convective_scheme.fds_min_low_dissipation
        if isinstance(self.convective_scheme, Ld2):
            _proto.convective_schemes_density_based = clientpb.LD2
            _proto.alpha_hybrid.value = self.convective_scheme.alpha_hybrid
            _proto.artificial_viscosity_model = self.convective_scheme.artificial_viscosity_model
        if isinstance(self.convective_scheme, Ec2):
            _proto.convective_schemes_density_based = clientpb.EC2
            _proto.skew_symmetric_formulation = self.convective_scheme.skew_symmetric_formulation
            _proto.artificial_viscosity_model = self.convective_scheme.artificial_viscosity_model
        if isinstance(self.convective_scheme, RhieChow):
            _proto.convective_schemes_density_based = clientpb.RHIE_CHOW
            _proto.alpha_hybrid.value = self.convective_scheme.alpha_hybrid
        if isinstance(self.convective_scheme_order, SecondOrder):
            _proto.upwind_scheme_order = clientpb.SECOND
            _proto.robust_dissipation = self.convective_scheme_order.robust_dissipation
            _proto.limiter = self.convective_scheme_order.limiter
            _proto.limiter_kappa.value = self.convective_scheme_order.limiter_kappa
            _proto.umuscl_chi.value = self.convective_scheme_order.umuscl_chi
            _proto.alpha_ld2.value = self.convective_scheme_order.alpha_ld2
            _proto.geometry_fixes = self.convective_scheme_order.geometry_fixes
            _proto.geometry_fixes_mitigations.value = (
                self.convective_scheme_order.geometry_fixes_mitigations
            )
            _proto.order_blend.value = self.convective_scheme_order.order_blend
        if isinstance(self.convective_scheme_order, FirstOrder):
            _proto.upwind_scheme_order = clientpb.FIRST
        return _proto

    def _from_proto(self, proto: clientpb.SpatialDiscretizationFluid) -> None:
        self.gradient_method = enum.GradientMethod(proto.gradient_method)
        self.hlsq_blend = proto.hlsq_blend.value
        if (
            proto.convective_schemes_density_based
            == clientpb.INVALID_CONVECTIVE_SCHEMES_DENSITY_BASED
        ):
            raise ValueError("Invalid convective_scheme")
        elif proto.convective_schemes_density_based == clientpb.ROE:
            self.convective_scheme = Fds()
            self.convective_scheme.entropy_epsilon = proto.entropy_epsilon.value
            self.convective_scheme.preconditioning = enum.Preconditioning(proto.preconditioning)
            self.convective_scheme.fds_min_low_dissipation = proto.fds_min_low_dissipation.value
        elif proto.convective_schemes_density_based == clientpb.LD2:
            self.convective_scheme = Ld2()
            self.convective_scheme.alpha_hybrid = proto.alpha_hybrid.value
            self.convective_scheme.artificial_viscosity_model = enum.ArtificialViscosityModel(
                proto.artificial_viscosity_model
            )
        elif proto.convective_schemes_density_based == clientpb.EC2:
            self.convective_scheme = Ec2()
            self.convective_scheme.skew_symmetric_formulation = enum.SkewSymmetricFormulation(
                proto.skew_symmetric_formulation
            )
            self.convective_scheme.artificial_viscosity_model = enum.ArtificialViscosityModel(
                proto.artificial_viscosity_model
            )
        elif proto.convective_schemes_density_based == clientpb.RHIE_CHOW:
            self.convective_scheme = RhieChow()
            self.convective_scheme.alpha_hybrid = proto.alpha_hybrid.value
        if proto.upwind_scheme_order == clientpb.INVALID_UPWIND_SCHEME_ORDER:
            raise ValueError("Invalid convective_scheme_order")
        elif proto.upwind_scheme_order == clientpb.SECOND:
            self.convective_scheme_order = SecondOrder()
            self.convective_scheme_order.robust_dissipation = enum.RobustDissipation(
                proto.robust_dissipation
            )
            self.convective_scheme_order.limiter = enum.Limiter(proto.limiter)
            self.convective_scheme_order.limiter_kappa = proto.limiter_kappa.value
            self.convective_scheme_order.umuscl_chi = proto.umuscl_chi.value
            self.convective_scheme_order.alpha_ld2 = proto.alpha_ld2.value
            self.convective_scheme_order.geometry_fixes = enum.GeometryFixes(proto.geometry_fixes)
            self.convective_scheme_order.geometry_fixes_mitigations = (
                proto.geometry_fixes_mitigations.value
            )
            self.convective_scheme_order.order_blend = proto.order_blend.value
        elif proto.upwind_scheme_order == clientpb.FIRST:
            self.convective_scheme_order = FirstOrder()
        return None
