# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id

from .material_fluid import MaterialFluid
from .material_solid import MaterialSolid


@dataclass(kw_only=True)
class MaterialEntity(ParamGroupWrapper[clientpb.MaterialEntity]):
    """Material entity."""

    material_identifier: Optional[EntityIdentifier] = None
    "Unique identifier for a material entity"
    material_fluid: Optional[MaterialFluid] = field(default_factory=MaterialFluid)
    "Configuration for Fluid materials"
    material_solid: Optional[MaterialSolid] = field(default_factory=MaterialSolid)
    "Configuration for Solid materials"

    def _to_proto(self) -> clientpb.MaterialEntity:
        _proto = clientpb.MaterialEntity()
        if self.material_identifier is not None:
            _proto.material_identifier.id = self.material_identifier.id
            _proto.material_identifier.name = self.material_identifier.name
        if self.material_fluid is not None:
            _proto.material_fluid.CopyFrom(self.material_fluid._to_proto())
        if self.material_solid is not None:
            _proto.material_solid.CopyFrom(self.material_solid._to_proto())
        return _proto

    def _from_proto(self, proto: clientpb.MaterialEntity) -> None:
        self.material_identifier = proto.material_identifier
        self.material_fluid = MaterialFluid.from_proto(proto.material_fluid)
        self.material_solid = MaterialSolid.from_proto(proto.material_solid)
        return None
