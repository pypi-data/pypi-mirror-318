# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id

from .boundary_conditions_fluid import BoundaryConditionsFluid
from .bc_komega_variables import BcKomegaVariables
from .bc_sa_variable import BcSaVariable
from .bc_turbulent_viscosity_and_intensity_komega import BcTurbulentViscosityAndIntensityKomega
from .bc_turbulent_viscosity_ratio_and_intensity_komega import (
    BcTurbulentViscosityRatioAndIntensityKomega,
)
from .bc_turbulent_viscosity_ratio_sa import BcTurbulentViscosityRatioSa
from .bc_turbulent_viscosity_sa import BcTurbulentViscositySa
from .komega_boundary_conditions import KomegaBoundaryConditions
from .spalart_allmaras_boundary_conditions import SpalartAllmarasBoundaryConditions
from .turbulence_boundary_conditions import TurbulenceBoundaryConditions


@dataclass(kw_only=True)
class Inlet(BoundaryConditionsFluid):
    """Inlet boundary condition."""

    inlet_energy: enum.InletEnergy = enum.InletEnergy.TOTAL_TEMPERATURE_INLET
    "Method of defining the inlet energy conditions."
    total_temperature: float = 300
    "Total temperature at the inlet boundary."
    turbulence_boundary_conditions: TurbulenceBoundaryConditions = field(
        default_factory=TurbulenceBoundaryConditions
    )
    "Turbulence boundary conditions."

    def _to_proto(self) -> clientpb.BoundaryConditionsFluid:
        _proto = super()._to_proto()
        _proto.physical_boundary = enum.PhysicalBoundary.INLET
        _proto.inlet_energy = self.inlet_energy
        _proto.total_temperature.value = self.total_temperature
        if isinstance(
            self.turbulence_boundary_conditions.spalart_allmaras_boundary_conditions,
            BcTurbulentViscosityRatioSa,
        ):
            _proto.turbulence_specification_spalart_allmaras = clientpb.TURBULENT_VISCOSITY_RATIO_SA
            _proto.turbulent_viscosity_ratio.value = (
                self.turbulence_boundary_conditions.spalart_allmaras_boundary_conditions.viscosity_ratio
            )
        if isinstance(
            self.turbulence_boundary_conditions.spalart_allmaras_boundary_conditions,
            BcTurbulentViscositySa,
        ):
            _proto.turbulence_specification_spalart_allmaras = clientpb.TURBULENT_VISCOSITY_SA
            _proto.turbulent_viscosity.value = (
                self.turbulence_boundary_conditions.spalart_allmaras_boundary_conditions.viscosity
            )
        if isinstance(
            self.turbulence_boundary_conditions.spalart_allmaras_boundary_conditions, BcSaVariable
        ):
            _proto.turbulence_specification_spalart_allmaras = clientpb.BC_SA_VARIABLE
            _proto.bc_uniform_nu_tilde.value = (
                self.turbulence_boundary_conditions.spalart_allmaras_boundary_conditions.sa_variable
            )
        if isinstance(
            self.turbulence_boundary_conditions.komega_boundary_conditions,
            BcTurbulentViscosityRatioAndIntensityKomega,
        ):
            _proto.turbulence_specification_komega = (
                clientpb.BC_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA
            )
            _proto.turbulent_viscosity_ratio.value = (
                self.turbulence_boundary_conditions.komega_boundary_conditions.viscosity_ratio
            )
            _proto.turbulence_intensity.value = (
                self.turbulence_boundary_conditions.komega_boundary_conditions.intensity
            )
        if isinstance(
            self.turbulence_boundary_conditions.komega_boundary_conditions,
            BcTurbulentViscosityAndIntensityKomega,
        ):
            _proto.turbulence_specification_komega = (
                clientpb.BC_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA
            )
            _proto.turbulent_viscosity.value = (
                self.turbulence_boundary_conditions.komega_boundary_conditions.viscosity
            )
            _proto.turbulence_intensity.value = (
                self.turbulence_boundary_conditions.komega_boundary_conditions.intensity
            )
        if isinstance(
            self.turbulence_boundary_conditions.komega_boundary_conditions, BcKomegaVariables
        ):
            _proto.turbulence_specification_komega = clientpb.BC_KOMEGA_VARIABLES
            _proto.bc_uniform_tke.value = (
                self.turbulence_boundary_conditions.komega_boundary_conditions.tke
            )
            _proto.bc_uniform_omega.value = (
                self.turbulence_boundary_conditions.komega_boundary_conditions.omega
            )
        return _proto

    def _from_proto(self, proto: clientpb.BoundaryConditionsFluid) -> None:
        super()._from_proto(proto)
        assert proto.physical_boundary == enum.PhysicalBoundary.INLET
        self.inlet_energy = enum.InletEnergy(proto.inlet_energy)
        self.total_temperature = proto.total_temperature.value
        if (
            proto.turbulence_specification_spalart_allmaras
            == clientpb.INVALID_TURBULENCE_SPECIFICATION_SPALART_ALLMARAS
        ):
            raise ValueError("Invalid spalart_allmaras_boundary_conditions")
        elif (
            proto.turbulence_specification_spalart_allmaras == clientpb.TURBULENT_VISCOSITY_RATIO_SA
        ):
            self.turbulence_boundary_conditions.spalart_allmaras_boundary_conditions = (
                BcTurbulentViscosityRatioSa()
            )
            self.turbulence_boundary_conditions.spalart_allmaras_boundary_conditions.viscosity_ratio = (
                proto.turbulent_viscosity_ratio.value
            )
        elif proto.turbulence_specification_spalart_allmaras == clientpb.TURBULENT_VISCOSITY_SA:
            self.turbulence_boundary_conditions.spalart_allmaras_boundary_conditions = (
                BcTurbulentViscositySa()
            )
            self.turbulence_boundary_conditions.spalart_allmaras_boundary_conditions.viscosity = (
                proto.turbulent_viscosity.value
            )
        elif proto.turbulence_specification_spalart_allmaras == clientpb.BC_SA_VARIABLE:
            self.turbulence_boundary_conditions.spalart_allmaras_boundary_conditions = (
                BcSaVariable()
            )
            self.turbulence_boundary_conditions.spalart_allmaras_boundary_conditions.sa_variable = (
                proto.bc_uniform_nu_tilde.value
            )
        if (
            proto.turbulence_specification_komega
            == clientpb.INVALID_TURBULENCE_SPECIFICATION_KOMEGA
        ):
            raise ValueError("Invalid komega_boundary_conditions")
        elif (
            proto.turbulence_specification_komega
            == clientpb.BC_TURBULENT_VISCOSITY_RATIO_AND_INTENSITY_KOMEGA
        ):
            self.turbulence_boundary_conditions.komega_boundary_conditions = (
                BcTurbulentViscosityRatioAndIntensityKomega()
            )
            self.turbulence_boundary_conditions.komega_boundary_conditions.viscosity_ratio = (
                proto.turbulent_viscosity_ratio.value
            )
            self.turbulence_boundary_conditions.komega_boundary_conditions.intensity = (
                proto.turbulence_intensity.value
            )
        elif (
            proto.turbulence_specification_komega
            == clientpb.BC_TURBULENT_VISCOSITY_AND_INTENSITY_KOMEGA
        ):
            self.turbulence_boundary_conditions.komega_boundary_conditions = (
                BcTurbulentViscosityAndIntensityKomega()
            )
            self.turbulence_boundary_conditions.komega_boundary_conditions.viscosity = (
                proto.turbulent_viscosity.value
            )
            self.turbulence_boundary_conditions.komega_boundary_conditions.intensity = (
                proto.turbulence_intensity.value
            )
        elif proto.turbulence_specification_komega == clientpb.BC_KOMEGA_VARIABLES:
            self.turbulence_boundary_conditions.komega_boundary_conditions = BcKomegaVariables()
            self.turbulence_boundary_conditions.komega_boundary_conditions.tke = (
                proto.bc_uniform_tke.value
            )
            self.turbulence_boundary_conditions.komega_boundary_conditions.omega = (
                proto.bc_uniform_omega.value
            )
        return None
