# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id

from .turbulence import Turbulence
from .custom_komega_sst_constants import CustomKomegaSstConstants
from .default_komega_sst_constants import DefaultKomegaSstConstants
from .komega_sst_constants import KomegaSstConstants


@dataclass(kw_only=True)
class KomegaSst(Turbulence):
    """SST 2003m model."""

    komega_sst_constants: KomegaSstConstants = field(default_factory=DefaultKomegaSstConstants)
    "Apply default constants for the RANS turbulence model or choose to customize."
    qcr: enum.QcrSst = enum.QcrSst.SST_QCR_OFF
    "Modification of the traditional linear Boussinesq relation for the SST turbulence model via the quadratic constitutive relation (QCR)."

    def _to_proto(self) -> clientpb.Turbulence:
        _proto = super()._to_proto()
        _proto.turbulence_model = enum.TurbulenceModel.KOMEGA_SST
        if isinstance(self.komega_sst_constants, DefaultKomegaSstConstants):
            _proto.turbulence_model_constants = clientpb.DEFAULT_TURB_CONSTANTS
        if isinstance(self.komega_sst_constants, CustomKomegaSstConstants):
            _proto.turbulence_model_constants = clientpb.CUSTOM_TURB_CONSTANTS
            _proto.C_sst_des1.value = self.komega_sst_constants.c_des1
            _proto.C_sst_des2.value = self.komega_sst_constants.c_des2
            _proto.sigma_k_1.value = self.komega_sst_constants.sigma_k_1
            _proto.sigma_k_2.value = self.komega_sst_constants.sigma_k_2
            _proto.sigma_w_1.value = self.komega_sst_constants.sigma_w_1
            _proto.sigma_w_2.value = self.komega_sst_constants.sigma_w_2
            _proto.beta_1.value = self.komega_sst_constants.beta_1
            _proto.beta_2.value = self.komega_sst_constants.beta_2
            _proto.beta_star.value = self.komega_sst_constants.beta_star
            _proto.kappa_sst.value = self.komega_sst_constants.kappa
            _proto.a_1.value = self.komega_sst_constants.a_1
            _proto.gamma_1.value = self.komega_sst_constants.gamma_1
            _proto.gamma_2.value = self.komega_sst_constants.gamma_2
        _proto.qcr_sst = self.qcr
        return _proto

    def _from_proto(self, proto: clientpb.Turbulence) -> None:
        super()._from_proto(proto)
        assert proto.turbulence_model == enum.TurbulenceModel.KOMEGA_SST
        if proto.turbulence_model_constants == clientpb.INVALID_TURBULENCE_MODEL_CONSTANTS:
            raise ValueError("Invalid komega_sst_constants")
        elif proto.turbulence_model_constants == clientpb.DEFAULT_TURB_CONSTANTS:
            self.komega_sst_constants = DefaultKomegaSstConstants()
        elif proto.turbulence_model_constants == clientpb.CUSTOM_TURB_CONSTANTS:
            self.komega_sst_constants = CustomKomegaSstConstants()
            self.komega_sst_constants.c_des1 = proto.C_sst_des1.value
            self.komega_sst_constants.c_des2 = proto.C_sst_des2.value
            self.komega_sst_constants.sigma_k_1 = proto.sigma_k_1.value
            self.komega_sst_constants.sigma_k_2 = proto.sigma_k_2.value
            self.komega_sst_constants.sigma_w_1 = proto.sigma_w_1.value
            self.komega_sst_constants.sigma_w_2 = proto.sigma_w_2.value
            self.komega_sst_constants.beta_1 = proto.beta_1.value
            self.komega_sst_constants.beta_2 = proto.beta_2.value
            self.komega_sst_constants.beta_star = proto.beta_star.value
            self.komega_sst_constants.kappa = proto.kappa_sst.value
            self.komega_sst_constants.a_1 = proto.a_1.value
            self.komega_sst_constants.gamma_1 = proto.gamma_1.value
            self.komega_sst_constants.gamma_2 = proto.gamma_2.value
        self.qcr = enum.QcrSst(proto.qcr_sst)
        return None
