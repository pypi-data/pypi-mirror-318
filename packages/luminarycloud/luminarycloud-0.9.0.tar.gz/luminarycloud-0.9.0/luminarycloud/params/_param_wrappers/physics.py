# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id

from .fluid import Fluid
from .heat import Heat


@dataclass(kw_only=True)
class Physics(ParamGroupWrapper[clientpb.Physics]):
    """Single physics solver entity."""

    physics_identifier: Optional[EntityIdentifier] = None
    "Unique identifier for a physics entity"
    heat: Optional[Heat] = field(default_factory=Heat)
    "Configuration for a heat transfer physics solver - simulates heat transfer in solid media."
    fluid: Optional[Fluid] = field(default_factory=Fluid)
    "Configuration for a fluid flow physics solver - simulates the flow of liquids and gases."

    def _to_proto(self) -> clientpb.Physics:
        _proto = clientpb.Physics()
        if self.physics_identifier is not None:
            _proto.physics_identifier.id = self.physics_identifier.id
            _proto.physics_identifier.name = self.physics_identifier.name
        if self.heat is not None:
            _proto.heat.CopyFrom(self.heat._to_proto())
        if self.fluid is not None:
            _proto.fluid.CopyFrom(self.fluid._to_proto())
        return _proto

    def _from_proto(self, proto: clientpb.Physics) -> None:
        self.physics_identifier = proto.physics_identifier
        self.heat = Heat.from_proto(proto.heat)
        self.fluid = Fluid.from_proto(proto.fluid)
        return None
