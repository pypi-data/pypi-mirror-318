# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from ._lib import ParamGroupWrapper, create_unique_id

from .amd import Amd
from .ddes import Ddes
from .ddes_vtm import DdesVtm
from .des_formulation import DesFormulation
from .iddes import Iddes
from .sigma import Sigma
from .smagorinsky import Smagorinsky
from .sub_grid_scale_model import SubGridScaleModel
from .vreman import Vreman
from .wale import Wale


@dataclass(kw_only=True)
class Turbulence(ParamGroupWrapper[clientpb.Turbulence]):
    """Turbulence settings for a fluid flow physics solver."""

    des_formulation: DesFormulation = field(default_factory=DdesVtm)
    "Select a Detached Eddy Simulation (DES) formulation."
    sub_grid_scale_model: Optional[SubGridScaleModel] = field(default_factory=Vreman)
    "Sub-grid scale models available for Large Eddy Simulation (LES)."
    turbulent_prandtl_number: float = 0.85
    "Turbulent Prandtl number for computing an effective thermal conductivity for heat transport."
    transition_model: enum.TransitionModel = enum.TransitionModel.NO_TRANSITION
    "Laminar-turbulent transition models available for Reynolds-averaged Navier-Stokes (RANS)."
    transition_model_cross_flow: enum.TransitionModelCrossFlow = (
        enum.TransitionModelCrossFlow.TRANSITION_MODEL_CROSS_FLOW_OFF
    )
    "Crossflow instability treatment for transition model."
    transition_free_stream_turbulence_intensity: float = 0.002
    "The ratio of the root-mean-square velocity fluctuations to the free stream velocity. A higher number indicates a greater degree of turbulence in the incoming flow."

    def _to_proto(self) -> clientpb.Turbulence:
        _proto = clientpb.Turbulence()
        if isinstance(self.des_formulation, DdesVtm):
            _proto.des_formulation = clientpb.DDES_VTM
        if isinstance(self.des_formulation, Iddes):
            _proto.des_formulation = clientpb.IDDES
        if isinstance(self.des_formulation, Ddes):
            _proto.des_formulation = clientpb.DDES
        if self.sub_grid_scale_model is None:
            _proto.sub_grid_scale_model = clientpb.NONE
        if isinstance(self.sub_grid_scale_model, Smagorinsky):
            _proto.sub_grid_scale_model = clientpb.SMAGORINSKY
            _proto.c_s.value = self.sub_grid_scale_model.c_s
        if isinstance(self.sub_grid_scale_model, Vreman):
            _proto.sub_grid_scale_model = clientpb.VREMAN
            _proto.c_vreman.value = self.sub_grid_scale_model.c_vreman
        if isinstance(self.sub_grid_scale_model, Wale):
            _proto.sub_grid_scale_model = clientpb.WALE
            _proto.c_wale.value = self.sub_grid_scale_model.c_wale
        if isinstance(self.sub_grid_scale_model, Sigma):
            _proto.sub_grid_scale_model = clientpb.SIGMA
            _proto.c_sigma.value = self.sub_grid_scale_model.c_sigma
        if isinstance(self.sub_grid_scale_model, Amd):
            _proto.sub_grid_scale_model = clientpb.AMD
            _proto.c_amd.value = self.sub_grid_scale_model.c_amd
        _proto.turbulent_thermal_conductivity_prandtl_constant.value = self.turbulent_prandtl_number
        _proto.transition_model = self.transition_model
        _proto.transition_model_cross_flow = self.transition_model_cross_flow
        _proto.transition_free_stream_turbulence_intensity.value = (
            self.transition_free_stream_turbulence_intensity
        )
        return _proto

    def _from_proto(self, proto: clientpb.Turbulence) -> None:
        if proto.des_formulation == clientpb.INVALID_DES_FORMULATION:
            raise ValueError("Invalid des_formulation")
        elif proto.des_formulation == clientpb.DDES_VTM:
            self.des_formulation = DdesVtm()
        elif proto.des_formulation == clientpb.IDDES:
            self.des_formulation = Iddes()
        elif proto.des_formulation == clientpb.DDES:
            self.des_formulation = Ddes()
        if proto.sub_grid_scale_model == clientpb.INVALID_SUB_GRID_SCALE_MODEL:
            raise ValueError("Invalid sub_grid_scale_model")
        elif proto.sub_grid_scale_model == clientpb.NONE:
            self.sub_grid_scale_model = None
        elif proto.sub_grid_scale_model == clientpb.SMAGORINSKY:
            self.sub_grid_scale_model = Smagorinsky()
            self.sub_grid_scale_model.c_s = proto.c_s.value
        elif proto.sub_grid_scale_model == clientpb.VREMAN:
            self.sub_grid_scale_model = Vreman()
            self.sub_grid_scale_model.c_vreman = proto.c_vreman.value
        elif proto.sub_grid_scale_model == clientpb.WALE:
            self.sub_grid_scale_model = Wale()
            self.sub_grid_scale_model.c_wale = proto.c_wale.value
        elif proto.sub_grid_scale_model == clientpb.SIGMA:
            self.sub_grid_scale_model = Sigma()
            self.sub_grid_scale_model.c_sigma = proto.c_sigma.value
        elif proto.sub_grid_scale_model == clientpb.AMD:
            self.sub_grid_scale_model = Amd()
            self.sub_grid_scale_model.c_amd = proto.c_amd.value
        self.turbulent_prandtl_number = proto.turbulent_thermal_conductivity_prandtl_constant.value
        self.transition_model = enum.TransitionModel(proto.transition_model)
        self.transition_model_cross_flow = enum.TransitionModelCrossFlow(
            proto.transition_model_cross_flow
        )
        self.transition_free_stream_turbulence_intensity = (
            proto.transition_free_stream_turbulence_intensity.value
        )
        return None
