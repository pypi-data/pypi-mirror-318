[tool.poetry]
name = "pyinaturalist-convert"
version = "0.6.6"
description = "Data conversion tools for iNaturalist observations and taxonomy"
authors = ["Jordan Cook"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/pyinat/pyinaturalist-convert"
repository = "https://github.com/pyinat/pyinaturalist-convert"
documentation = "https://pyinaturalist-convert.readthedocs.io"
keywords = [
    "inaturalist",
    "biodiversity",
    "export",
    "convert",
    "csv",
    "darwin-core",
    "dataframe",
    "gpx",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Typing :: Typed",
]
include = [
    { path = "*.md", format = "sdist" },
    { path = "*.yml", format = "sdist" },
    { path = "docs", format = "sdist" },
    { path = "examples", format = "sdist" },
    { path = "test", format = "sdist" },
]

[tool.poetry.dependencies]
python                      = "^3.8"
pyinaturalist               = ">=0.18"
flatten-dict                = ">=0.4"
tablib                      = ">=3.0"

# Optional dependencies for specific data formats
boto3                       = {optional=true, version=">=1.20"}
geojson                     = {optional=true, version=">=2.5"}
gpxpy                       = {optional=true, version=">=1.4"}
markuppy                    = {optional=true, version=">=1.12"}
numpy                       = {optional=true, version="<2.0"}
odfpy                       = {optional=true, version=">=1.4"}
openpyxl                    = {optional=true, version=">=2.6"}
pandas                      = {optional=true, version=">=1.2"}
pyarrow                     = {optional=true, version=">=10.0"}
pyyaml                      = {optional=true, version=">=6.0"}
sqlalchemy                  = {optional=true, version="^2.0"}
tables                      = {optional=true, version=">=3.6"}
tabulate                    = {optional=true, version="*"}
xlrd                        = {optional=true, version="*"}
xlwt                        = {optional=true, version="*"}
xmltodict                   = {optional=true, version=">=0.12"}

# Documentation dependencies
furo                        = { optional = true, version = "^2024.8" }
myst-parser                 = { optional = true, version = ">1.0" }
sphinx                      = { optional = true, version = "^6.2" }
sphinx-autodoc-typehints    = { optional = true, version = "1.20" }
sphinx-copybutton           = { optional = true, version = ">=0.5" }
sphinx-design               = { optional = true, version = ">=0.5" }

[tool.poetry.extras]
db = ["sqlalchemy"]
dwc = ["xmltodict"]
feather = ["pandas", "pyarrow"]
geojson = ["geojson"]
gpx = ["gpxpy"]
hdf = ["pandas", "tables"]
html = ["jinja", "markuppy"]
odp = ["boto3"]
parquet = ["pandas", "pyarrow"]
xlsx = ["pandas", "openpyxl"]

all = [
    "boto3",
    "geojson",
    "gpxpy",
    "openpyxl",
    "odfpy",
    "pandas",
    "pyarrow",
    "pyyaml",
    "sqlalchemy",
    "tables",
    "tabulate",
    "xlrd",
    "xlwt",
    "xmltodict",
]
docs = [
    "furo",
    "myst-parser",
    "sphinx",
    "sphinx-autodoc-typehints",
    "sphinx-copybutton",
    "sphinx-design",
]

[tool.poetry.dev-dependencies]
coverage = "^7.0"
nox = "^2024.4"
nox-poetry = "^1.0"
pre-commit = "^3.5"
pyparsing = "^3.0"
pytest = "^8.0"
pytest-cov = ">=5.0"
pytest-xdist = ">=2.2"
sqlalchemy2-stubs = ">=0.0.2a38"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.html]
directory = 'test-reports'

[tool.coverage.run]
branch = true
source = ['pyinaturalist_convert']

[tool.coverage.report]
exclude_lines = ['pragma: no cover', 'if TYPE_CHECKING:', 'except ImportError:']

[tool.mypy]
ignore_missing_imports = true
files = ['pyinaturalist_convert']

[tool.ruff]
fix = true
unsafe-fixes = true
line-length = 100
output-format = 'grouped'
target-version = 'py38'
exclude = ['examples/']

[tool.ruff.format]
quote-style = 'single'

[tool.ruff.lint]
select = ['B', 'C4', 'C90', 'E', 'F']
ignore = ['B023']

[tool.ruff.lint.isort]
known-first-party = ['test']

# Wrap lines to 100 chars, but don't error on unwrappable lines until 120 chars
[tool.ruff.lint.pycodestyle]
max-line-length = 120
