# 基本数学常数
PI = "3.141592653589793238462643383279502884197169399375105820974944592307816406286"  # 圆周率
E = "2.718281828459045235360287471352662497757247093699959574966967627724076630353"   # 自然对数的底数
PHI = "1.618033988749894848204586834365638117720309179805762862135448622705260462818"  # 黄金比例

# 平方根常数
SQRT2 = "1.414213562373095048801688724209698078569671875376948073176679737990732478462"  # 2的平方根
SQRT3 = "1.732050807568877293527446341505872366942805253810380628055806979451933016909"  # 3的平方根
SQRT5 = "2.236067977499789696409173668731276235440618359611525724270897245410520925638"  # 5的平方根

# 对数常数
LN2 = "0.693147180559945309417232121458176568075500134360255254120680009493393621969"   # 2的自然对数
LN10 = "2.302585092994045684017991454684364207601101488628772976033327900967572609677"  # 10的自然对数

# 三角函数常数
PI_2 = "1.570796326794896619231321691639751442098584699687552910487472296153908203143"  # π/2
PI_4 = "0.785398163397448309615660845819875721049292349843776455243736148076954101571"  # π/4
TAU = "6.283185307179586476925286766559005768394338798750211641949889184615632812572"   # 2π

# 其他重要常数
EULER_GAMMA = "0.577215664901532860606512090082402431042159335939923598805767234884867726777"  # 欧拉常数
CATALAN = "0.915965594177219015054603514932384110774149374281672134266498119621763019776"      # 卡塔兰常数
APERY = "1.202056903159594285399738161511449990764986292340498881792271555341838324885"        # 阿佩里常数

# 物理常数
SPEED_OF_LIGHT = "299792458"        # 光速 (m/s)
PLANCK = "6.62607015e-34"           # 普朗克常数 (J⋅s)
BOLTZMANN = "1.380649e-23"          # 玻尔兹曼常数 (J/K)
AVOGADRO = "6.02214076e23"          # 阿伏伽德罗常数 (mol^-1)
ELECTRON_MASS = "9.1093837015e-31"   # 电子质量 (kg)
PROTON_MASS = "1.67262192369e-27"    # 质子质量 (kg)

# 天文常数
ASTRONOMICAL_UNIT = "149597870700"   # 天文单位 (m)
LIGHT_YEAR = "9.461e15"             # 光年 (m)
PARSEC = "3.086e16"                 # 秒差距 (m)
SOLAR_MASS = "1.989e30"             # 太阳质量 (kg)

def get_constant_precision(constant, precision=50):
    """
    获取指定精度的常数值
    
    参数:
        constant (str): 常数字符串
        precision (int): 需要的小数位数，默认50位
        
    返回:
        str: 指定精度的常数值
    """
    if 'e' in constant.lower():  # 处理科学计数法
        base, exp = constant.lower().split('e')
        exp = int(exp)
        if '.' in base:
            base_int, base_dec = base.split('.')
            base = base_int + base_dec
            exp -= len(base_dec)
        if exp > 0:
            return base + '0' * exp
        else:
            return '0.' + '0' * (-exp-1) + base
    
    if '.' not in constant:
        return constant
        
    integer_part, decimal_part = constant.split('.')
    return integer_part + '.' + decimal_part[:precision] 