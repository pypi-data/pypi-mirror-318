from abc import ABC, abstractmethod
from enum import Enum
from types import TracebackType
from typing import Any, Dict, List, Optional

from agora.utils import compute_hash, extract_metadata

class Suitability(str, Enum):
    """
    Enumeration of protocol suitability statuses.
    """
    ADEQUATE = 'adequate'
    INADEQUATE = 'inadequate'
    PROBABLY_ADEQUATE = 'probably_adequate'
    PROBABLY_INADEQUATE = 'probably_inadequate'
    UNKNOWN = 'unknown'

class Conversation(ABC):
    """
    Abstract base class representing a conversation.
    """

    @abstractmethod
    def __call__(self, message: str, print_output: bool = True) -> Any:
        """
        Processes a message within the conversation.

        Args:
            message (str): The message to process.
            print_output (bool): Whether to print the response.

        Returns:
            Any: The response generated by processing the message.
        """
        pass

    def close(self) -> None:
        """
        Closes the conversation.

        Returns:
            None
        """
        pass

    def __enter__(self) -> "Conversation":
        """
        Enters the conversation context.

        Returns:
            Conversation: The current conversation instance.
        """
        return self
    
    def __exit__(
        self,
        exc_type: Optional[type],
        exc_value: Optional[BaseException],
        traceback: Optional[TracebackType]
    ) -> None:
        """
        Exits the conversation context, ensuring closure.

        Args:
            exc_type (Optional[type]): The exception type if an error occurred.
            exc_value (Optional[BaseException]): The exception instance if raised.
            traceback (Optional[TracebackType]): The traceback object.

        Returns:
            None
        """
        self.close()

class Protocol:
    """Represents a protocol document with associated sources and metadata."""

    def __init__(
        self,
        protocol_document: str,
        sources: List[str],
        metadata: Optional[Dict[str, str]]
    ) -> None:
        """Initializes a Protocol.

        Args:
            protocol_document (str): The document detailing the protocol.
            sources (List[str]): Sources where the protocol is referenced.
            metadata (Optional[Dict[str, str]]): Additional metadata for the protocol.
        """
        self.protocol_document = protocol_document
        self.sources = sources

        if metadata is None:
            metadata = extract_metadata(protocol_document)

        self.metadata = metadata

    @property
    def hash(self) -> str:
        """
        Computes and returns the hash of the protocol document.

        Returns:
            str: The computed hash value.
        """
        return compute_hash(self.protocol_document)
    
    def __str__(self) -> str:
        """
        Returns a string representation of the Protocol.

        Returns:
            str: The string representation including hash, sources, metadata, and document.
        """
        return f'Protocol {self.hash}\nSources: {self.sources}\nMetadata: {self.metadata}\n\n{self.protocol_document}\n\n'
