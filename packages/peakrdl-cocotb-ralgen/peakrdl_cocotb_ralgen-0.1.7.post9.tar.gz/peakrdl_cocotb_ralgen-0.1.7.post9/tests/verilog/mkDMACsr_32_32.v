//
// Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
//
//
// Ports:
// Name                         I/O  size props
// csr_axi4_awready               O     1 reg
// csr_axi4_wready                O     1 reg
// csr_axi4_bvalid                O     1 reg
// csr_axi4_bresp                 O     2 reg
// csr_axi4_arready               O     1 reg
// csr_axi4_rvalid                O     1 reg
// csr_axi4_rresp                 O     2 reg
// csr_axi4_rdata                 O    32 reg
// hwif_read                      O   206
// CLK                            I     1 clock
// RST_N                          I     1 reset
// csr_axi4_awvalid               I     1
// csr_axi4_awaddr                I    32 reg
// csr_axi4_awprot                I     3 reg
// csr_axi4_wvalid                I     1
// csr_axi4_wdata                 I    32 reg
// csr_axi4_wstrb                 I     4 reg
// csr_axi4_bready                I     1
// csr_axi4_arvalid               I     1
// csr_axi4_araddr                I    32 reg
// csr_axi4_arprot                I     3 reg
// csr_axi4_rready                I     1
// hwif_write_wdata               I    23
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDMACsr_32_32(CLK,
		      RST_N,

		      csr_axi4_awvalid,
		      csr_axi4_awaddr,
		      csr_axi4_awprot,

		      csr_axi4_awready,

		      csr_axi4_wvalid,
		      csr_axi4_wdata,
		      csr_axi4_wstrb,

		      csr_axi4_wready,

		      csr_axi4_bvalid,

		      csr_axi4_bresp,

		      csr_axi4_bready,

		      csr_axi4_arvalid,
		      csr_axi4_araddr,
		      csr_axi4_arprot,

		      csr_axi4_arready,

		      csr_axi4_rvalid,

		      csr_axi4_rresp,

		      csr_axi4_rdata,

		      csr_axi4_rready,

		      hwif_read,

		      hwif_write_wdata);
  input  CLK;
  input  RST_N;

  // action method csr_axi4_m_awvalid
  input  csr_axi4_awvalid;
  input  [31 : 0] csr_axi4_awaddr;
  input  [2 : 0] csr_axi4_awprot;

  // value method csr_axi4_m_awready
  output csr_axi4_awready;

  // action method csr_axi4_m_wvalid
  input  csr_axi4_wvalid;
  input  [31 : 0] csr_axi4_wdata;
  input  [3 : 0] csr_axi4_wstrb;

  // value method csr_axi4_m_wready
  output csr_axi4_wready;

  // value method csr_axi4_m_bvalid
  output csr_axi4_bvalid;

  // value method csr_axi4_m_bresp
  output [1 : 0] csr_axi4_bresp;

  // value method csr_axi4_m_buser

  // action method csr_axi4_m_bready
  input  csr_axi4_bready;

  // action method csr_axi4_m_arvalid
  input  csr_axi4_arvalid;
  input  [31 : 0] csr_axi4_araddr;
  input  [2 : 0] csr_axi4_arprot;

  // value method csr_axi4_m_arready
  output csr_axi4_arready;

  // value method csr_axi4_m_rvalid
  output csr_axi4_rvalid;

  // value method csr_axi4_m_rresp
  output [1 : 0] csr_axi4_rresp;

  // value method csr_axi4_m_rdata
  output [31 : 0] csr_axi4_rdata;

  // value method csr_axi4_m_ruser

  // action method csr_axi4_m_rready
  input  csr_axi4_rready;

  // value method hwif_read
  output [205 : 0] hwif_read;

  // action method hwif_write
  input  [22 : 0] hwif_write_wdata;

  // signals for module outputs
  wire [205 : 0] hwif_read;
  wire [31 : 0] csr_axi4_rdata;
  wire [1 : 0] csr_axi4_bresp, csr_axi4_rresp;
  wire csr_axi4_arready,
       csr_axi4_awready,
       csr_axi4_bvalid,
       csr_axi4_rvalid,
       csr_axi4_wready;

  // inlined wires
  wire [205 : 0] hwif_r_wget;
  wire [31 : 0] rdata_wget, txn_address_wget, wdata_wget;
  wire [22 : 0] hwif_w_wget;
  wire [15 : 0] sstatuscurrent_pd_id_wget, sversionip_id_wget;
  wire [7 : 0] sversionversion_max_wget, sversionversion_min_wget;
  wire hwif_r_whas,
       hwif_w_whas,
       rdata_whas,
       rtxn_wget,
       rtxn_whas,
       spd_countdecr_count_wget,
       spd_countdecr_count_whas,
       sstatuscurrent_pd_id_whas,
       sversionip_id_whas,
       sversionversion_max_whas,
       sversionversion_min_whas,
       txn_address_whas,
       wdata_whas,
       wtxn_wget,
       wtxn_whas;

  // register scfga_burst_length
  reg [7 : 0] scfga_burst_length;
  wire [7 : 0] scfga_burst_length_D_IN;
  wire scfga_burst_length_EN;

  // register scfgb_burst_length
  reg [7 : 0] scfgb_burst_length;
  wire [7 : 0] scfgb_burst_length_D_IN;
  wire scfgb_burst_length_EN;

  // register scfgdest_burst_type
  reg [1 : 0] scfgdest_burst_type;
  wire [1 : 0] scfgdest_burst_type_D_IN;
  wire scfgdest_burst_type_EN;

  // register scfgsrc_burst_type
  reg [1 : 0] scfgsrc_burst_type;
  wire [1 : 0] scfgsrc_burst_type_D_IN;
  wire scfgsrc_burst_type_EN;

  // register sctrlfrom_b
  reg sctrlfrom_b;
  wire sctrlfrom_b_D_IN, sctrlfrom_b_EN;

  // register sctrlgen_interrupt
  reg sctrlgen_interrupt;
  wire sctrlgen_interrupt_D_IN, sctrlgen_interrupt_EN;

  // register sctrlpd_in_b
  reg sctrlpd_in_b;
  wire sctrlpd_in_b_D_IN, sctrlpd_in_b_EN;

  // register sctrlstart
  reg sctrlstart;
  wire sctrlstart_D_IN, sctrlstart_EN;

  // register sctrlto_a
  reg sctrlto_a;
  wire sctrlto_a_D_IN, sctrlto_a_EN;

  // register sctrluse_pd
  reg sctrluse_pd;
  wire sctrluse_pd_D_IN, sctrluse_pd_EN;

  // register sdest_addressaddress
  reg [31 : 0] sdest_addressaddress;
  wire [31 : 0] sdest_addressaddress_D_IN;
  wire sdest_addressaddress_EN;

  // register sinterrupt_maskmask_a_error
  reg sinterrupt_maskmask_a_error;
  wire sinterrupt_maskmask_a_error_D_IN, sinterrupt_maskmask_a_error_EN;

  // register sinterrupt_maskmask_b_error
  reg sinterrupt_maskmask_b_error;
  wire sinterrupt_maskmask_b_error_D_IN, sinterrupt_maskmask_b_error_EN;

  // register sinterrupt_maskmask_xfer_done
  reg sinterrupt_maskmask_xfer_done;
  wire sinterrupt_maskmask_xfer_done_D_IN, sinterrupt_maskmask_xfer_done_EN;

  // register sinterrupt_testmask_a_error
  reg sinterrupt_testmask_a_error;
  wire sinterrupt_testmask_a_error_D_IN, sinterrupt_testmask_a_error_EN;

  // register sinterrupt_testmask_b_error
  reg sinterrupt_testmask_b_error;
  wire sinterrupt_testmask_b_error_D_IN, sinterrupt_testmask_b_error_EN;

  // register sinterrupt_testmask_xfer_done
  reg sinterrupt_testmask_xfer_done;
  wire sinterrupt_testmask_xfer_done_D_IN, sinterrupt_testmask_xfer_done_EN;

  // register sinterruptint_a_error
  reg sinterruptint_a_error;
  wire sinterruptint_a_error_D_IN, sinterruptint_a_error_EN;

  // register sinterruptint_b_error
  reg sinterruptint_b_error;
  wire sinterruptint_b_error_D_IN, sinterruptint_b_error_EN;

  // register sinterruptint_xfer_done
  reg sinterruptint_xfer_done;
  wire sinterruptint_xfer_done_D_IN, sinterruptint_xfer_done_EN;

  // register slengthlength
  reg [31 : 0] slengthlength;
  wire [31 : 0] slengthlength_D_IN;
  wire slengthlength_EN;

  // register spacketdescriptor_addresspd
  reg [31 : 0] spacketdescriptor_addresspd;
  wire [31 : 0] spacketdescriptor_addresspd_D_IN;
  wire spacketdescriptor_addresspd_EN;

  // register spd_countincr_count
  reg spd_countincr_count;
  wire spd_countincr_count_D_IN, spd_countincr_count_EN;

  // register spd_countpd_count
  reg [15 : 0] spd_countpd_count;
  wire [15 : 0] spd_countpd_count_D_IN;
  wire spd_countpd_count_EN;

  // register ssrc_addressaddress
  reg [31 : 0] ssrc_addressaddress;
  wire [31 : 0] ssrc_addressaddress_D_IN;
  wire ssrc_addressaddress_EN;

  // register sstatusa_error
  reg sstatusa_error;
  wire sstatusa_error_D_IN, sstatusa_error_EN;

  // register sstatusb_error
  reg sstatusb_error;
  wire sstatusb_error_D_IN, sstatusb_error_EN;

  // register sstatusbusy
  reg sstatusbusy;
  wire sstatusbusy_D_IN, sstatusbusy_EN;

  // ports of submodule csr_axi_f_rd_addr
  wire [34 : 0] csr_axi_f_rd_addr_D_IN, csr_axi_f_rd_addr_D_OUT;
  wire csr_axi_f_rd_addr_CLR,
       csr_axi_f_rd_addr_DEQ,
       csr_axi_f_rd_addr_EMPTY_N,
       csr_axi_f_rd_addr_ENQ,
       csr_axi_f_rd_addr_FULL_N;

  // ports of submodule csr_axi_f_rd_data
  wire [33 : 0] csr_axi_f_rd_data_D_IN, csr_axi_f_rd_data_D_OUT;
  wire csr_axi_f_rd_data_CLR,
       csr_axi_f_rd_data_DEQ,
       csr_axi_f_rd_data_EMPTY_N,
       csr_axi_f_rd_data_ENQ,
       csr_axi_f_rd_data_FULL_N;

  // ports of submodule csr_axi_f_wr_addr
  wire [34 : 0] csr_axi_f_wr_addr_D_IN, csr_axi_f_wr_addr_D_OUT;
  wire csr_axi_f_wr_addr_CLR,
       csr_axi_f_wr_addr_DEQ,
       csr_axi_f_wr_addr_EMPTY_N,
       csr_axi_f_wr_addr_ENQ,
       csr_axi_f_wr_addr_FULL_N;

  // ports of submodule csr_axi_f_wr_data
  wire [35 : 0] csr_axi_f_wr_data_D_IN, csr_axi_f_wr_data_D_OUT;
  wire csr_axi_f_wr_data_CLR,
       csr_axi_f_wr_data_DEQ,
       csr_axi_f_wr_data_EMPTY_N,
       csr_axi_f_wr_data_ENQ,
       csr_axi_f_wr_data_FULL_N;

  // ports of submodule csr_axi_f_wr_resp
  wire [1 : 0] csr_axi_f_wr_resp_D_IN, csr_axi_f_wr_resp_D_OUT;
  wire csr_axi_f_wr_resp_CLR,
       csr_axi_f_wr_resp_DEQ,
       csr_axi_f_wr_resp_EMPTY_N,
       csr_axi_f_wr_resp_ENQ,
       csr_axi_f_wr_resp_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_DMA_Reg,
       CAN_FIRE_RL_rl_read,
       CAN_FIRE_RL_rl_write,
       CAN_FIRE_csr_axi4_m_arvalid,
       CAN_FIRE_csr_axi4_m_awvalid,
       CAN_FIRE_csr_axi4_m_bready,
       CAN_FIRE_csr_axi4_m_rready,
       CAN_FIRE_csr_axi4_m_wvalid,
       CAN_FIRE_hwif_write,
       WILL_FIRE_RL_rl_DMA_Reg,
       WILL_FIRE_RL_rl_read,
       WILL_FIRE_RL_rl_write,
       WILL_FIRE_csr_axi4_m_arvalid,
       WILL_FIRE_csr_axi4_m_awvalid,
       WILL_FIRE_csr_axi4_m_bready,
       WILL_FIRE_csr_axi4_m_rready,
       WILL_FIRE_csr_axi4_m_wvalid,
       WILL_FIRE_hwif_write;

  // remaining internal signals
  wire [172 : 0] hwif_r_whas__26_AND_hwif_r_wget__27_BIT_172_32_ETC___d358;
  wire [31 : 0] IF_IF_txn_address_whas__1_THEN_txn_address_wge_ETC___d310,
		_theResult_____10__h4163,
		_theResult_____12__h4095,
		_theResult_____14__h4022,
		_theResult_____16__h3946,
		_theResult_____18__h3862,
		_theResult_____20__h3794,
		_theResult_____22__h3727,
		_theResult_____24__h3659,
		_theResult_____26__h3591,
		_theResult_____28__h3522,
		_theResult_____30__h3453,
		_theResult_____32__h3384,
		_theResult_____34__h3315,
		_theResult_____35__h3304,
		_theResult_____37__h3192,
		_theResult_____39__h3123,
		_theResult_____41__h3054,
		_theResult_____43__h2985,
		_theResult_____45__h2916,
		_theResult_____47__h2847,
		_theResult_____49__h2778,
		_theResult_____4__h4367,
		_theResult_____50__h2766,
		_theResult_____52__h2690,
		_theResult_____54__h2582,
		_theResult_____55__h2511,
		_theResult_____56__h2499,
		_theResult_____6__h4299,
		_theResult_____8__h4231,
		x__read__h1026,
		x_wget__h1015;
  wire [15 : 0] x__read_pd_count_pd_count_value__h7311;
  wire NOT_IF_txn_address_whas__1_THEN_txn_address_wg_ETC___d77,
       NOT_IF_txn_address_whas__1_THEN_txn_address_wg_ETC___d80,
       NOT_IF_txn_address_whas__1_THEN_txn_address_wg_ETC___d83,
       NOT_IF_txn_address_whas__1_THEN_txn_address_wg_ETC___d86,
       x__h4812,
       x__h4892,
       x__h7194,
       x__h7251,
       x__h7324,
       x__h7340,
       x__read_ctrl_from_b_value__h7272,
       x__read_ctrl_gen_interrupt_value__h7256,
       x__read_ctrl_pd_in_b_value__h7264,
       x__read_ctrl_to_a_value__h7280,
       x__read_ctrl_use_pd_value__h7288,
       x__read_status_busy_value__h7183;

  // action method csr_axi4_m_awvalid
  assign CAN_FIRE_csr_axi4_m_awvalid = 1'd1 ;
  assign WILL_FIRE_csr_axi4_m_awvalid = 1'd1 ;

  // value method csr_axi4_m_awready
  assign csr_axi4_awready = csr_axi_f_wr_addr_FULL_N ;

  // action method csr_axi4_m_wvalid
  assign CAN_FIRE_csr_axi4_m_wvalid = 1'd1 ;
  assign WILL_FIRE_csr_axi4_m_wvalid = 1'd1 ;

  // value method csr_axi4_m_wready
  assign csr_axi4_wready = csr_axi_f_wr_data_FULL_N ;

  // value method csr_axi4_m_bvalid
  assign csr_axi4_bvalid = csr_axi_f_wr_resp_EMPTY_N ;

  // value method csr_axi4_m_bresp
  assign csr_axi4_bresp = csr_axi_f_wr_resp_D_OUT ;

  // action method csr_axi4_m_bready
  assign CAN_FIRE_csr_axi4_m_bready = 1'd1 ;
  assign WILL_FIRE_csr_axi4_m_bready = 1'd1 ;

  // action method csr_axi4_m_arvalid
  assign CAN_FIRE_csr_axi4_m_arvalid = 1'd1 ;
  assign WILL_FIRE_csr_axi4_m_arvalid = 1'd1 ;

  // value method csr_axi4_m_arready
  assign csr_axi4_arready = csr_axi_f_rd_addr_FULL_N ;

  // value method csr_axi4_m_rvalid
  assign csr_axi4_rvalid = csr_axi_f_rd_data_EMPTY_N ;

  // value method csr_axi4_m_rresp
  assign csr_axi4_rresp = csr_axi_f_rd_data_D_OUT[33:32] ;

  // value method csr_axi4_m_rdata
  assign csr_axi4_rdata = csr_axi_f_rd_data_D_OUT[31:0] ;

  // action method csr_axi4_m_rready
  assign CAN_FIRE_csr_axi4_m_rready = 1'd1 ;
  assign WILL_FIRE_csr_axi4_m_rready = 1'd1 ;

  // value method hwif_read
  assign hwif_read =
	     { CAN_FIRE_RL_rl_DMA_Reg ? hwif_r_wget[205:174] : 32'd0,
	       x__read_status_busy_value__h7183,
	       hwif_r_whas__26_AND_hwif_r_wget__27_BIT_172_32_ETC___d358 } ;

  // action method hwif_write
  assign CAN_FIRE_hwif_write = 1'd1 ;
  assign WILL_FIRE_hwif_write = 1'd1 ;

  // submodule csr_axi_f_rd_addr
  FIFO2 #(.width(32'd35), .guarded(1'd1)) csr_axi_f_rd_addr(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(csr_axi_f_rd_addr_D_IN),
							    .ENQ(csr_axi_f_rd_addr_ENQ),
							    .DEQ(csr_axi_f_rd_addr_DEQ),
							    .CLR(csr_axi_f_rd_addr_CLR),
							    .D_OUT(csr_axi_f_rd_addr_D_OUT),
							    .FULL_N(csr_axi_f_rd_addr_FULL_N),
							    .EMPTY_N(csr_axi_f_rd_addr_EMPTY_N));

  // submodule csr_axi_f_rd_data
  FIFO2 #(.width(32'd34), .guarded(1'd1)) csr_axi_f_rd_data(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(csr_axi_f_rd_data_D_IN),
							    .ENQ(csr_axi_f_rd_data_ENQ),
							    .DEQ(csr_axi_f_rd_data_DEQ),
							    .CLR(csr_axi_f_rd_data_CLR),
							    .D_OUT(csr_axi_f_rd_data_D_OUT),
							    .FULL_N(csr_axi_f_rd_data_FULL_N),
							    .EMPTY_N(csr_axi_f_rd_data_EMPTY_N));

  // submodule csr_axi_f_wr_addr
  FIFO2 #(.width(32'd35), .guarded(1'd1)) csr_axi_f_wr_addr(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(csr_axi_f_wr_addr_D_IN),
							    .ENQ(csr_axi_f_wr_addr_ENQ),
							    .DEQ(csr_axi_f_wr_addr_DEQ),
							    .CLR(csr_axi_f_wr_addr_CLR),
							    .D_OUT(csr_axi_f_wr_addr_D_OUT),
							    .FULL_N(csr_axi_f_wr_addr_FULL_N),
							    .EMPTY_N(csr_axi_f_wr_addr_EMPTY_N));

  // submodule csr_axi_f_wr_data
  FIFO2 #(.width(32'd36), .guarded(1'd1)) csr_axi_f_wr_data(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(csr_axi_f_wr_data_D_IN),
							    .ENQ(csr_axi_f_wr_data_ENQ),
							    .DEQ(csr_axi_f_wr_data_DEQ),
							    .CLR(csr_axi_f_wr_data_CLR),
							    .D_OUT(csr_axi_f_wr_data_D_OUT),
							    .FULL_N(csr_axi_f_wr_data_FULL_N),
							    .EMPTY_N(csr_axi_f_wr_data_EMPTY_N));

  // submodule csr_axi_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(1'd1)) csr_axi_f_wr_resp(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(csr_axi_f_wr_resp_D_IN),
							   .ENQ(csr_axi_f_wr_resp_ENQ),
							   .DEQ(csr_axi_f_wr_resp_DEQ),
							   .CLR(csr_axi_f_wr_resp_CLR),
							   .D_OUT(csr_axi_f_wr_resp_D_OUT),
							   .FULL_N(csr_axi_f_wr_resp_FULL_N),
							   .EMPTY_N(csr_axi_f_wr_resp_EMPTY_N));

  // rule RL_rl_write
  assign CAN_FIRE_RL_rl_write =
	     csr_axi_f_wr_addr_EMPTY_N && csr_axi_f_wr_data_EMPTY_N ;
  assign WILL_FIRE_RL_rl_write = CAN_FIRE_RL_rl_write ;

  // rule RL_rl_read
  assign CAN_FIRE_RL_rl_read = csr_axi_f_rd_addr_EMPTY_N ;
  assign WILL_FIRE_RL_rl_read =
	     csr_axi_f_rd_addr_EMPTY_N && !WILL_FIRE_RL_rl_write ;

  // rule RL_rl_DMA_Reg
  assign CAN_FIRE_RL_rl_DMA_Reg =
	     (!CAN_FIRE_RL_rl_write ||
	      csr_axi_f_wr_addr_EMPTY_N && csr_axi_f_wr_data_EMPTY_N &&
	      csr_axi_f_wr_resp_FULL_N) &&
	     (x__read__h1026 != 32'd4 || !CAN_FIRE_RL_rl_write ||
	      CAN_FIRE_RL_rl_write) &&
	     NOT_IF_txn_address_whas__1_THEN_txn_address_wg_ETC___d86 ;
  assign WILL_FIRE_RL_rl_DMA_Reg = CAN_FIRE_RL_rl_DMA_Reg ;

  // inlined wires
  assign hwif_r_wget =
	     { 32'd1,
	       sstatusbusy,
	       sctrlstart,
	       x__h4812,
	       sctrlgen_interrupt,
	       sctrlpd_in_b,
	       sctrlfrom_b,
	       sctrlto_a,
	       sctrluse_pd,
	       spd_countpd_count,
	       spd_countincr_count,
	       x__h4892,
	       scfga_burst_length,
	       scfgb_burst_length,
	       scfgsrc_burst_type,
	       scfgdest_burst_type,
	       ssrc_addressaddress,
	       sdest_addressaddress,
	       slengthlength,
	       spacketdescriptor_addresspd } ;
  assign hwif_r_whas = CAN_FIRE_RL_rl_DMA_Reg ;
  assign hwif_w_wget = hwif_write_wdata ;
  assign hwif_w_whas = 1'd1 ;
  assign wtxn_wget = 1'd1 ;
  assign wtxn_whas = CAN_FIRE_RL_rl_write ;
  assign rtxn_wget = 1'd1 ;
  assign rtxn_whas = WILL_FIRE_RL_rl_read ;
  assign rdata_wget = 32'h0 ;
  assign rdata_whas = 1'b0 ;
  assign wdata_wget = csr_axi_f_wr_data_D_OUT[35:4] ;
  assign wdata_whas = CAN_FIRE_RL_rl_write ;
  assign txn_address_wget = x_wget__h1015 ;
  assign txn_address_whas = WILL_FIRE_RL_rl_write || WILL_FIRE_RL_rl_read ;
  assign sversionversion_min_wget = 8'h0 ;
  assign sversionversion_min_whas = 1'b0 ;
  assign sversionversion_max_wget = 8'h0 ;
  assign sversionversion_max_whas = 1'b0 ;
  assign sversionip_id_wget = 16'h0 ;
  assign sversionip_id_whas = 1'b0 ;
  assign sstatuscurrent_pd_id_wget = 16'h0 ;
  assign sstatuscurrent_pd_id_whas = 1'b0 ;
  assign spd_countdecr_count_wget = 1'b0 ;
  assign spd_countdecr_count_whas = 1'b0 ;

  // register scfga_burst_length
  assign scfga_burst_length_D_IN =
	     (x__read__h1026 == 32'd16 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[7:0] :
	       scfga_burst_length ;
  assign scfga_burst_length_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register scfgb_burst_length
  assign scfgb_burst_length_D_IN =
	     (x__read__h1026 == 32'd16 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[15:8] :
	       scfgb_burst_length ;
  assign scfgb_burst_length_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register scfgdest_burst_type
  assign scfgdest_burst_type_D_IN =
	     (x__read__h1026 == 32'd16 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[19:18] :
	       scfgdest_burst_type ;
  assign scfgdest_burst_type_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register scfgsrc_burst_type
  assign scfgsrc_burst_type_D_IN =
	     (x__read__h1026 == 32'd16 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[17:16] :
	       scfgsrc_burst_type ;
  assign scfgsrc_burst_type_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sctrlfrom_b
  assign sctrlfrom_b_D_IN =
	     (x__read__h1026 == 32'd8 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[3] :
	       sctrlfrom_b ;
  assign sctrlfrom_b_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sctrlgen_interrupt
  assign sctrlgen_interrupt_D_IN =
	     (x__read__h1026 == 32'd8 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[1] :
	       sctrlgen_interrupt ;
  assign sctrlgen_interrupt_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sctrlpd_in_b
  assign sctrlpd_in_b_D_IN =
	     (x__read__h1026 == 32'd8 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[2] :
	       sctrlpd_in_b ;
  assign sctrlpd_in_b_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sctrlstart
  assign sctrlstart_D_IN =
	     (x__read__h1026 == 32'd8 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[0] :
	       sctrlstart ;
  assign sctrlstart_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sctrlto_a
  assign sctrlto_a_D_IN =
	     (x__read__h1026 == 32'd8 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[4] :
	       sctrlto_a ;
  assign sctrlto_a_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sctrluse_pd
  assign sctrluse_pd_D_IN =
	     (x__read__h1026 == 32'd8 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[5] :
	       sctrluse_pd ;
  assign sctrluse_pd_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sdest_addressaddress
  assign sdest_addressaddress_D_IN =
	     (x__read__h1026 == 32'd24 && CAN_FIRE_RL_rl_write) ?
	       csr_axi_f_wr_data_D_OUT[35:4] :
	       sdest_addressaddress ;
  assign sdest_addressaddress_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sinterrupt_maskmask_a_error
  assign sinterrupt_maskmask_a_error_D_IN =
	     (x__read__h1026 == 32'd40 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[0] :
	       sinterrupt_maskmask_a_error ;
  assign sinterrupt_maskmask_a_error_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sinterrupt_maskmask_b_error
  assign sinterrupt_maskmask_b_error_D_IN =
	     (x__read__h1026 == 32'd40 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[1] :
	       sinterrupt_maskmask_b_error ;
  assign sinterrupt_maskmask_b_error_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sinterrupt_maskmask_xfer_done
  assign sinterrupt_maskmask_xfer_done_D_IN =
	     (x__read__h1026 == 32'd40 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[2] :
	       sinterrupt_maskmask_xfer_done ;
  assign sinterrupt_maskmask_xfer_done_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sinterrupt_testmask_a_error
  assign sinterrupt_testmask_a_error_D_IN =
	     (x__read__h1026 == 32'd44 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[0] :
	       sinterrupt_testmask_a_error ;
  assign sinterrupt_testmask_a_error_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sinterrupt_testmask_b_error
  assign sinterrupt_testmask_b_error_D_IN =
	     (x__read__h1026 == 32'd44 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[1] :
	       sinterrupt_testmask_b_error ;
  assign sinterrupt_testmask_b_error_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sinterrupt_testmask_xfer_done
  assign sinterrupt_testmask_xfer_done_D_IN =
	     (x__read__h1026 == 32'd44 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[2] :
	       sinterrupt_testmask_xfer_done ;
  assign sinterrupt_testmask_xfer_done_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sinterruptint_a_error
  assign sinterruptint_a_error_D_IN =
	     (x__read__h1026 == 32'd36 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[0] :
	       hwif_write_wdata[2] ;
  assign sinterruptint_a_error_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sinterruptint_b_error
  assign sinterruptint_b_error_D_IN =
	     (x__read__h1026 == 32'd36 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[1] :
	       hwif_write_wdata[1] ;
  assign sinterruptint_b_error_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sinterruptint_xfer_done
  assign sinterruptint_xfer_done_D_IN =
	     (x__read__h1026 == 32'd36 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[2] :
	       hwif_write_wdata[0] ;
  assign sinterruptint_xfer_done_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register slengthlength
  assign slengthlength_D_IN =
	     (x__read__h1026 == 32'd28 && CAN_FIRE_RL_rl_write) ?
	       csr_axi_f_wr_data_D_OUT[35:4] :
	       slengthlength ;
  assign slengthlength_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register spacketdescriptor_addresspd
  assign spacketdescriptor_addresspd_D_IN =
	     (x__read__h1026 == 32'd32 && CAN_FIRE_RL_rl_write) ?
	       csr_axi_f_wr_data_D_OUT[35:4] :
	       spacketdescriptor_addresspd ;
  assign spacketdescriptor_addresspd_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register spd_countincr_count
  assign spd_countincr_count_D_IN =
	     (x__read__h1026 == 32'd12 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[16] :
	       spd_countincr_count ;
  assign spd_countincr_count_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register spd_countpd_count
  assign spd_countpd_count_D_IN = spd_countpd_count ;
  assign spd_countpd_count_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register ssrc_addressaddress
  assign ssrc_addressaddress_D_IN =
	     (x__read__h1026 == 32'd20 && CAN_FIRE_RL_rl_write) ?
	       csr_axi_f_wr_data_D_OUT[35:4] :
	       ssrc_addressaddress ;
  assign ssrc_addressaddress_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sstatusa_error
  assign sstatusa_error_D_IN =
	     (x__read__h1026 == 32'd4 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[1] :
	       hwif_write_wdata[21] ;
  assign sstatusa_error_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sstatusb_error
  assign sstatusb_error_D_IN =
	     (x__read__h1026 == 32'd4 && CAN_FIRE_RL_rl_write) ?
	       wdata_wget[2] :
	       hwif_write_wdata[20] ;
  assign sstatusb_error_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // register sstatusbusy
  assign sstatusbusy_D_IN = hwif_write_wdata[22] ;
  assign sstatusbusy_EN = CAN_FIRE_RL_rl_DMA_Reg ;

  // submodule csr_axi_f_rd_addr
  assign csr_axi_f_rd_addr_D_IN = { csr_axi4_araddr, csr_axi4_arprot } ;
  assign csr_axi_f_rd_addr_ENQ =
	     csr_axi4_arvalid && csr_axi_f_rd_addr_FULL_N ;
  assign csr_axi_f_rd_addr_DEQ =
	     WILL_FIRE_RL_rl_DMA_Reg && WILL_FIRE_RL_rl_read ;
  assign csr_axi_f_rd_addr_CLR = 1'b0 ;

  // submodule csr_axi_f_rd_data
  assign csr_axi_f_rd_data_D_IN =
	     { 2'd1,
	       IF_IF_txn_address_whas__1_THEN_txn_address_wge_ETC___d310 } ;
  assign csr_axi_f_rd_data_ENQ =
	     WILL_FIRE_RL_rl_DMA_Reg && WILL_FIRE_RL_rl_read ;
  assign csr_axi_f_rd_data_DEQ =
	     csr_axi4_rready && csr_axi_f_rd_data_EMPTY_N ;
  assign csr_axi_f_rd_data_CLR = 1'b0 ;

  // submodule csr_axi_f_wr_addr
  assign csr_axi_f_wr_addr_D_IN = { csr_axi4_awaddr, csr_axi4_awprot } ;
  assign csr_axi_f_wr_addr_ENQ =
	     csr_axi4_awvalid && csr_axi_f_wr_addr_FULL_N ;
  assign csr_axi_f_wr_addr_DEQ =
	     WILL_FIRE_RL_rl_DMA_Reg && CAN_FIRE_RL_rl_write ;
  assign csr_axi_f_wr_addr_CLR = 1'b0 ;

  // submodule csr_axi_f_wr_data
  assign csr_axi_f_wr_data_D_IN = { csr_axi4_wdata, csr_axi4_wstrb } ;
  assign csr_axi_f_wr_data_ENQ = csr_axi4_wvalid && csr_axi_f_wr_data_FULL_N ;
  assign csr_axi_f_wr_data_DEQ =
	     WILL_FIRE_RL_rl_DMA_Reg && CAN_FIRE_RL_rl_write ;
  assign csr_axi_f_wr_data_CLR = 1'b0 ;

  // submodule csr_axi_f_wr_resp
  assign csr_axi_f_wr_resp_D_IN = 2'd0 ;
  assign csr_axi_f_wr_resp_ENQ =
	     WILL_FIRE_RL_rl_DMA_Reg && CAN_FIRE_RL_rl_write ;
  assign csr_axi_f_wr_resp_DEQ =
	     csr_axi4_bready && csr_axi_f_wr_resp_EMPTY_N ;
  assign csr_axi_f_wr_resp_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_txn_address_whas__1_THEN_txn_address_wge_ETC___d310 =
	     (x__read__h1026 == 32'd44) ?
	       { _theResult_____6__h4299[31:3],
		 sinterrupt_testmask_xfer_done,
		 sinterrupt_testmask_b_error,
		 _theResult_____6__h4299[0] } :
	       _theResult_____4__h4367 ;
  assign NOT_IF_txn_address_whas__1_THEN_txn_address_wg_ETC___d77 =
	     (x__read__h1026 != 32'd44 || !CAN_FIRE_RL_rl_write ||
	      CAN_FIRE_RL_rl_write) &&
	     (!WILL_FIRE_RL_rl_read ||
	      csr_axi_f_rd_addr_EMPTY_N && csr_axi_f_rd_data_FULL_N) ;
  assign NOT_IF_txn_address_whas__1_THEN_txn_address_wg_ETC___d80 =
	     (x__read__h1026 != 32'd32 || !CAN_FIRE_RL_rl_write ||
	      CAN_FIRE_RL_rl_write) &&
	     (x__read__h1026 != 32'd36 || !CAN_FIRE_RL_rl_write ||
	      CAN_FIRE_RL_rl_write) &&
	     (x__read__h1026 != 32'd40 || !CAN_FIRE_RL_rl_write ||
	      CAN_FIRE_RL_rl_write) &&
	     NOT_IF_txn_address_whas__1_THEN_txn_address_wg_ETC___d77 ;
  assign NOT_IF_txn_address_whas__1_THEN_txn_address_wg_ETC___d83 =
	     (x__read__h1026 != 32'd20 || !CAN_FIRE_RL_rl_write ||
	      CAN_FIRE_RL_rl_write) &&
	     (x__read__h1026 != 32'd24 || !CAN_FIRE_RL_rl_write ||
	      CAN_FIRE_RL_rl_write) &&
	     (x__read__h1026 != 32'd28 || !CAN_FIRE_RL_rl_write ||
	      CAN_FIRE_RL_rl_write) &&
	     NOT_IF_txn_address_whas__1_THEN_txn_address_wg_ETC___d80 ;
  assign NOT_IF_txn_address_whas__1_THEN_txn_address_wg_ETC___d86 =
	     (x__read__h1026 != 32'd8 || !CAN_FIRE_RL_rl_write ||
	      CAN_FIRE_RL_rl_write) &&
	     (x__read__h1026 != 32'd12 || !CAN_FIRE_RL_rl_write ||
	      CAN_FIRE_RL_rl_write) &&
	     (x__read__h1026 != 32'd16 || !CAN_FIRE_RL_rl_write ||
	      CAN_FIRE_RL_rl_write) &&
	     NOT_IF_txn_address_whas__1_THEN_txn_address_wg_ETC___d83 ;
  assign _theResult_____10__h4163 =
	     (x__read__h1026 == 32'd40 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____12__h4095[31:2],
		 sinterrupt_maskmask_b_error,
		 _theResult_____12__h4095[0] } :
	       _theResult_____12__h4095 ;
  assign _theResult_____12__h4095 =
	     (x__read__h1026 == 32'd40 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____14__h4022[31:1],
		 sinterrupt_maskmask_a_error } :
	       _theResult_____14__h4022 ;
  assign _theResult_____14__h4022 =
	     (x__read__h1026 == 32'd36 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____16__h3946[31:3],
		 hwif_write_wdata[0],
		 _theResult_____16__h3946[1:0] } :
	       _theResult_____16__h3946 ;
  assign _theResult_____16__h3946 =
	     (x__read__h1026 == 32'd36 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____18__h3862[31:2],
		 hwif_write_wdata[1],
		 _theResult_____18__h3862[0] } :
	       _theResult_____18__h3862 ;
  assign _theResult_____18__h3862 =
	     (x__read__h1026 == 32'd36 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____20__h3794[31:1], hwif_write_wdata[2] } :
	       _theResult_____20__h3794 ;
  assign _theResult_____20__h3794 =
	     (x__read__h1026 == 32'd32 && WILL_FIRE_RL_rl_read) ?
	       spacketdescriptor_addresspd :
	       _theResult_____22__h3727 ;
  assign _theResult_____22__h3727 =
	     (x__read__h1026 == 32'd28 && WILL_FIRE_RL_rl_read) ?
	       slengthlength :
	       _theResult_____24__h3659 ;
  assign _theResult_____24__h3659 =
	     (x__read__h1026 == 32'd24 && WILL_FIRE_RL_rl_read) ?
	       sdest_addressaddress :
	       _theResult_____26__h3591 ;
  assign _theResult_____26__h3591 =
	     (x__read__h1026 == 32'd20 && WILL_FIRE_RL_rl_read) ?
	       ssrc_addressaddress :
	       _theResult_____28__h3522 ;
  assign _theResult_____28__h3522 =
	     (x__read__h1026 == 32'd16 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____32__h3384[31:20],
		 scfgdest_burst_type,
		 scfgsrc_burst_type,
		 _theResult_____32__h3384[15:0] } :
	       _theResult_____30__h3453 ;
  assign _theResult_____30__h3453 =
	     (x__read__h1026 == 32'd16 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____32__h3384[31:18],
		 scfgsrc_burst_type,
		 _theResult_____32__h3384[15:0] } :
	       _theResult_____32__h3384 ;
  assign _theResult_____32__h3384 =
	     (x__read__h1026 == 32'd16 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____34__h3315[31:16],
		 scfgb_burst_length,
		 _theResult_____34__h3315[7:0] } :
	       _theResult_____34__h3315 ;
  assign _theResult_____34__h3315 =
	     (x__read__h1026 == 32'd16 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____35__h3304[31:8], scfga_burst_length } :
	       _theResult_____35__h3304 ;
  assign _theResult_____35__h3304 =
	     (x__read__h1026 == 32'd12 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____37__h3192[31:18],
		 hwif_write_wdata[3],
		 _theResult_____37__h3192[16:0] } :
	       _theResult_____37__h3192 ;
  assign _theResult_____37__h3192 =
	     (x__read__h1026 == 32'd12 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____39__h3123[31:16], spd_countpd_count } :
	       _theResult_____39__h3123 ;
  assign _theResult_____39__h3123 =
	     (x__read__h1026 == 32'd8 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____41__h3054[31:6],
		 sctrluse_pd,
		 _theResult_____41__h3054[4:0] } :
	       _theResult_____41__h3054 ;
  assign _theResult_____41__h3054 =
	     (x__read__h1026 == 32'd8 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____43__h2985[31:5],
		 sctrlto_a,
		 _theResult_____43__h2985[3:0] } :
	       _theResult_____43__h2985 ;
  assign _theResult_____43__h2985 =
	     (x__read__h1026 == 32'd8 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____45__h2916[31:4],
		 sctrlfrom_b,
		 _theResult_____45__h2916[2:0] } :
	       _theResult_____45__h2916 ;
  assign _theResult_____45__h2916 =
	     (x__read__h1026 == 32'd8 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____47__h2847[31:3],
		 sctrlpd_in_b,
		 _theResult_____47__h2847[1:0] } :
	       _theResult_____47__h2847 ;
  assign _theResult_____47__h2847 =
	     (x__read__h1026 == 32'd8 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____49__h2778[31:2],
		 sctrlgen_interrupt,
		 _theResult_____49__h2778[0] } :
	       _theResult_____49__h2778 ;
  assign _theResult_____49__h2778 =
	     (x__read__h1026 == 32'd8 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____50__h2766[31:1], sctrlstart } :
	       _theResult_____50__h2766 ;
  assign _theResult_____4__h4367 =
	     (x__read__h1026 == 32'd44 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____6__h4299[31:2],
		 sinterrupt_testmask_b_error,
		 _theResult_____6__h4299[0] } :
	       _theResult_____6__h4299 ;
  assign _theResult_____50__h2766 =
	     (x__read__h1026 == 32'd4 && WILL_FIRE_RL_rl_read) ?
	       { hwif_write_wdata[19:4], _theResult_____52__h2690[15:0] } :
	       _theResult_____52__h2690 ;
  assign _theResult_____52__h2690 =
	     (x__read__h1026 == 32'd4 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____54__h2582[31:3],
		 hwif_write_wdata[20],
		 _theResult_____54__h2582[1:0] } :
	       _theResult_____54__h2582 ;
  assign _theResult_____54__h2582 =
	     (x__read__h1026 == 32'd4 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____55__h2511[31:2],
		 hwif_write_wdata[21],
		 _theResult_____55__h2511[0] } :
	       _theResult_____55__h2511 ;
  assign _theResult_____55__h2511 =
	     (x__read__h1026 == 32'd4 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____56__h2499[31:1], hwif_write_wdata[22] } :
	       _theResult_____56__h2499 ;
  assign _theResult_____56__h2499 =
	     (x__read__h1026 == 32'd0 && WILL_FIRE_RL_rl_read) ?
	       32'd65536 :
	       32'd0 ;
  assign _theResult_____6__h4299 =
	     (x__read__h1026 == 32'd44 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____8__h4231[31:1],
		 sinterrupt_testmask_a_error } :
	       _theResult_____8__h4231 ;
  assign _theResult_____8__h4231 =
	     (x__read__h1026 == 32'd40 && WILL_FIRE_RL_rl_read) ?
	       { _theResult_____10__h4163[31:3],
		 sinterrupt_maskmask_xfer_done,
		 _theResult_____10__h4163[1:0] } :
	       _theResult_____10__h4163 ;
  assign hwif_r_whas__26_AND_hwif_r_wget__27_BIT_172_32_ETC___d358 =
	     { x__h7194,
	       x__h7251,
	       x__read_ctrl_gen_interrupt_value__h7256,
	       x__read_ctrl_pd_in_b_value__h7264,
	       x__read_ctrl_from_b_value__h7272,
	       x__read_ctrl_to_a_value__h7280,
	       x__read_ctrl_use_pd_value__h7288,
	       x__read_pd_count_pd_count_value__h7311,
	       x__h7324,
	       x__h7340,
	       CAN_FIRE_RL_rl_DMA_Reg ? hwif_r_wget[147:0] : 148'd0 } ;
  assign x__h4812 =
	     x__read__h1026 == 32'd8 && CAN_FIRE_RL_rl_write &&
	     wdata_wget[0] ;
  assign x__h4892 =
	     x__read__h1026 == 32'd12 && CAN_FIRE_RL_rl_write &&
	     wdata_wget[16] ;
  assign x__h7194 = CAN_FIRE_RL_rl_DMA_Reg && hwif_r_wget[172] ;
  assign x__h7251 = CAN_FIRE_RL_rl_DMA_Reg && hwif_r_wget[171] ;
  assign x__h7324 = CAN_FIRE_RL_rl_DMA_Reg && hwif_r_wget[149] ;
  assign x__h7340 = CAN_FIRE_RL_rl_DMA_Reg && hwif_r_wget[148] ;
  assign x__read__h1026 = txn_address_whas ? x_wget__h1015 : 32'd0 ;
  assign x__read_ctrl_from_b_value__h7272 =
	     CAN_FIRE_RL_rl_DMA_Reg && hwif_r_wget[168] ;
  assign x__read_ctrl_gen_interrupt_value__h7256 =
	     CAN_FIRE_RL_rl_DMA_Reg && hwif_r_wget[170] ;
  assign x__read_ctrl_pd_in_b_value__h7264 =
	     CAN_FIRE_RL_rl_DMA_Reg && hwif_r_wget[169] ;
  assign x__read_ctrl_to_a_value__h7280 =
	     CAN_FIRE_RL_rl_DMA_Reg && hwif_r_wget[167] ;
  assign x__read_ctrl_use_pd_value__h7288 =
	     CAN_FIRE_RL_rl_DMA_Reg && hwif_r_wget[166] ;
  assign x__read_pd_count_pd_count_value__h7311 =
	     CAN_FIRE_RL_rl_DMA_Reg ? hwif_r_wget[165:150] : 16'd0 ;
  assign x__read_status_busy_value__h7183 =
	     CAN_FIRE_RL_rl_DMA_Reg && hwif_r_wget[173] ;
  assign x_wget__h1015 =
	     WILL_FIRE_RL_rl_write ?
	       csr_axi_f_wr_addr_D_OUT[34:3] :
	       csr_axi_f_rd_addr_D_OUT[34:3] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (sdest_addressaddress_EN)
      sdest_addressaddress <= `BSV_ASSIGNMENT_DELAY sdest_addressaddress_D_IN;
    if (slengthlength_EN)
      slengthlength <= `BSV_ASSIGNMENT_DELAY slengthlength_D_IN;
    if (spacketdescriptor_addresspd_EN)
      spacketdescriptor_addresspd <= `BSV_ASSIGNMENT_DELAY
	  spacketdescriptor_addresspd_D_IN;
    if (ssrc_addressaddress_EN)
      ssrc_addressaddress <= `BSV_ASSIGNMENT_DELAY ssrc_addressaddress_D_IN;
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      scfga_burst_length <= `BSV_ASSIGNMENT_DELAY 8'd1;
      scfgb_burst_length <= `BSV_ASSIGNMENT_DELAY 8'd1;
      scfgdest_burst_type <= `BSV_ASSIGNMENT_DELAY 2'd0;
      scfgsrc_burst_type <= `BSV_ASSIGNMENT_DELAY 2'd0;
      sctrlfrom_b <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sctrlgen_interrupt <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sctrlpd_in_b <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sctrlstart <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sctrlto_a <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sctrluse_pd <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sinterrupt_maskmask_a_error <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sinterrupt_maskmask_b_error <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sinterrupt_maskmask_xfer_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sinterrupt_testmask_a_error <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sinterrupt_testmask_b_error <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sinterrupt_testmask_xfer_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sinterruptint_a_error <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sinterruptint_b_error <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sinterruptint_xfer_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
      spd_countincr_count <= `BSV_ASSIGNMENT_DELAY 1'd0;
      spd_countpd_count <= `BSV_ASSIGNMENT_DELAY 16'd0;
      sstatusa_error <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sstatusb_error <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sstatusbusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (scfga_burst_length_EN)
	scfga_burst_length <= `BSV_ASSIGNMENT_DELAY scfga_burst_length_D_IN;
      if (scfgb_burst_length_EN)
	scfgb_burst_length <= `BSV_ASSIGNMENT_DELAY scfgb_burst_length_D_IN;
      if (scfgdest_burst_type_EN)
	scfgdest_burst_type <= `BSV_ASSIGNMENT_DELAY scfgdest_burst_type_D_IN;
      if (scfgsrc_burst_type_EN)
	scfgsrc_burst_type <= `BSV_ASSIGNMENT_DELAY scfgsrc_burst_type_D_IN;
      if (sctrlfrom_b_EN)
	sctrlfrom_b <= `BSV_ASSIGNMENT_DELAY sctrlfrom_b_D_IN;
      if (sctrlgen_interrupt_EN)
	sctrlgen_interrupt <= `BSV_ASSIGNMENT_DELAY sctrlgen_interrupt_D_IN;
      if (sctrlpd_in_b_EN)
	sctrlpd_in_b <= `BSV_ASSIGNMENT_DELAY sctrlpd_in_b_D_IN;
      if (sctrlstart_EN) sctrlstart <= `BSV_ASSIGNMENT_DELAY sctrlstart_D_IN;
      if (sctrlto_a_EN) sctrlto_a <= `BSV_ASSIGNMENT_DELAY sctrlto_a_D_IN;
      if (sctrluse_pd_EN)
	sctrluse_pd <= `BSV_ASSIGNMENT_DELAY sctrluse_pd_D_IN;
      if (sinterrupt_maskmask_a_error_EN)
	sinterrupt_maskmask_a_error <= `BSV_ASSIGNMENT_DELAY
	    sinterrupt_maskmask_a_error_D_IN;
      if (sinterrupt_maskmask_b_error_EN)
	sinterrupt_maskmask_b_error <= `BSV_ASSIGNMENT_DELAY
	    sinterrupt_maskmask_b_error_D_IN;
      if (sinterrupt_maskmask_xfer_done_EN)
	sinterrupt_maskmask_xfer_done <= `BSV_ASSIGNMENT_DELAY
	    sinterrupt_maskmask_xfer_done_D_IN;
      if (sinterrupt_testmask_a_error_EN)
	sinterrupt_testmask_a_error <= `BSV_ASSIGNMENT_DELAY
	    sinterrupt_testmask_a_error_D_IN;
      if (sinterrupt_testmask_b_error_EN)
	sinterrupt_testmask_b_error <= `BSV_ASSIGNMENT_DELAY
	    sinterrupt_testmask_b_error_D_IN;
      if (sinterrupt_testmask_xfer_done_EN)
	sinterrupt_testmask_xfer_done <= `BSV_ASSIGNMENT_DELAY
	    sinterrupt_testmask_xfer_done_D_IN;
      if (sinterruptint_a_error_EN)
	sinterruptint_a_error <= `BSV_ASSIGNMENT_DELAY
	    sinterruptint_a_error_D_IN;
      if (sinterruptint_b_error_EN)
	sinterruptint_b_error <= `BSV_ASSIGNMENT_DELAY
	    sinterruptint_b_error_D_IN;
      if (sinterruptint_xfer_done_EN)
	sinterruptint_xfer_done <= `BSV_ASSIGNMENT_DELAY
	    sinterruptint_xfer_done_D_IN;
      if (spd_countincr_count_EN)
	spd_countincr_count <= `BSV_ASSIGNMENT_DELAY spd_countincr_count_D_IN;
      if (spd_countpd_count_EN)
	spd_countpd_count <= `BSV_ASSIGNMENT_DELAY spd_countpd_count_D_IN;
      if (sstatusa_error_EN)
	sstatusa_error <= `BSV_ASSIGNMENT_DELAY sstatusa_error_D_IN;
      if (sstatusb_error_EN)
	sstatusb_error <= `BSV_ASSIGNMENT_DELAY sstatusb_error_D_IN;
      if (sstatusbusy_EN)
	sstatusbusy <= `BSV_ASSIGNMENT_DELAY sstatusbusy_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    scfga_burst_length = 8'hAA;
    scfgb_burst_length = 8'hAA;
    scfgdest_burst_type = 2'h2;
    scfgsrc_burst_type = 2'h2;
    sctrlfrom_b = 1'h0;
    sctrlgen_interrupt = 1'h0;
    sctrlpd_in_b = 1'h0;
    sctrlstart = 1'h0;
    sctrlto_a = 1'h0;
    sctrluse_pd = 1'h0;
    sdest_addressaddress = 32'hAAAAAAAA;
    sinterrupt_maskmask_a_error = 1'h0;
    sinterrupt_maskmask_b_error = 1'h0;
    sinterrupt_maskmask_xfer_done = 1'h0;
    sinterrupt_testmask_a_error = 1'h0;
    sinterrupt_testmask_b_error = 1'h0;
    sinterrupt_testmask_xfer_done = 1'h0;
    sinterruptint_a_error = 1'h0;
    sinterruptint_b_error = 1'h0;
    sinterruptint_xfer_done = 1'h0;
    slengthlength = 32'hAAAAAAAA;
    spacketdescriptor_addresspd = 32'hAAAAAAAA;
    spd_countincr_count = 1'h0;
    spd_countpd_count = 16'hAAAA;
    ssrc_addressaddress = 32'hAAAAAAAA;
    sstatusa_error = 1'h0;
    sstatusb_error = 1'h0;
    sstatusbusy = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkDMACsr_32_32
